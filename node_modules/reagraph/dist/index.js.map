{"version":3,"file":"index.js","sources":["../src/layout/depthUtils.ts","../src/layout/forceUtils.ts","../src/layout/layoutUtils.ts","../src/layout/forceInABox.ts","../src/layout/forceDirected.ts","../src/layout/circular2d.ts","../src/layout/hierarchical.ts","../src/layout/nooverlap.ts","../src/layout/forceatlas2.ts","../src/layout/custom.ts","../src/layout/layoutProvider.ts","../src/layout/recommender.ts","../src/utils/visibility.ts","../src/sizing/pageRank.ts","../src/sizing/centrality.ts","../src/sizing/attribute.ts","../src/sizing/nodeSizeProvider.ts","../src/utils/graph.ts","../src/utils/animation.ts","../src/utils/arrow.ts","../src/utils/position.ts","../src/utils/layout.ts","../src/utils/cluster.ts","../src/utils/paths.ts","../src/utils/dom.ts","../src/store.ts","../src/collapse/utils.ts","../src/collapse/useCollapse.ts","../src/useGraph.ts","../src/symbols/Label.tsx","../src/utils/useDrag.ts","../src/utils/useHoverIntent.ts","../src/CameraControls/useCameraControls.ts","../src/symbols/clusters/Ring.tsx","../src/symbols/Cluster.tsx","../src/symbols/Arrow.tsx","../src/symbols/Line.tsx","../src/symbols/Edge.tsx","../src/symbols/edges/useEdgeGeometry.ts","../src/symbols/edges/useEdgeEvents.ts","../src/symbols/edges/useEdgeAnimations.ts","../src/symbols/edges/Edge.tsx","../src/symbols/edges/Edges.tsx","../src/symbols/Ring.tsx","../src/symbols/nodes/Sphere.tsx","../src/symbols/nodes/Icon.tsx","../src/symbols/nodes/SphereWithIcon.tsx","../src/symbols/nodes/Svg.tsx","../src/symbols/nodes/SphereWithSvg.tsx","../src/symbols/Node.tsx","../src/CameraControls/utils.ts","../src/CameraControls/useCenterGraph.ts","../src/GraphScene.tsx","../src/CameraControls/CameraControls.tsx","../src/themes/darkTheme.ts","../src/themes/lightTheme.ts","../src/selection/utils.ts","../src/selection/Lasso.tsx","../src/GraphCanvas/GraphCanvas.tsx","../src/selection/useSelection.ts","../src/RadialMenu/RadialSlice.tsx","../src/RadialMenu/utils.ts","../src/RadialMenu/RadialMenu.tsx"],"sourcesContent":["import { InternalGraphEdge, InternalGraphNode } from '../types';\n\nexport interface DepthNode {\n  data: InternalGraphNode;\n  ins: DepthNode[];\n  out: DepthNode[];\n  depth: number;\n}\n\n/**\n * Traverse the graph and get the depth of each node.\n */\nfunction traverseGraph(nodes: DepthNode[], nodeStack: DepthNode[] = []) {\n  const currentDepth = nodeStack.length;\n\n  for (const node of nodes) {\n    const idx = nodeStack.indexOf(node);\n    if (idx > -1) {\n      const loop = [...nodeStack.slice(idx), node].map(d => d.data.id);\n      throw new Error(\n        `Invalid Graph: Circular node path detected: ${loop.join(' -> ')}.`\n      );\n    }\n\n    if (currentDepth > node.depth) {\n      node.depth = currentDepth;\n      traverseGraph(node.out, [...nodeStack, node]);\n    }\n  }\n}\n\n/**\n * Gets the depth of the graph's nodes. Used in the radial layout.\n */\nexport function getNodeDepth(\n  nodes: InternalGraphNode[],\n  links: InternalGraphEdge[]\n) {\n  let invalid = false;\n\n  const graph: { [key: string]: DepthNode } = nodes.reduce(\n    (acc, cur) => ({\n      ...acc,\n      [cur.id]: {\n        data: cur,\n        out: [],\n        depth: -1,\n        ins: []\n      }\n    }),\n    {}\n  );\n\n  try {\n    for (const link of links) {\n      const from = link.source;\n      const to = link.target;\n\n      if (!graph.hasOwnProperty(from)) {\n        throw new Error(`Missing source Node ${from}`);\n      }\n\n      if (!graph.hasOwnProperty(to)) {\n        throw new Error(`Missing target Node ${to}`);\n      }\n\n      const sourceNode = graph[from];\n      const targetNode = graph[to];\n      targetNode.ins.push(sourceNode);\n      sourceNode.out.push(targetNode);\n    }\n\n    traverseGraph(Object.values(graph));\n  } catch (e) {\n    invalid = true;\n  }\n\n  const allDepths = Object.keys(graph).map(id => graph[id].depth);\n  const maxDepth = Math.max(...allDepths);\n\n  return {\n    invalid,\n    depths: graph,\n    maxDepth: maxDepth || 1\n  };\n}\n","import { forceRadial as d3ForceRadial } from 'd3-force-3d';\nimport { InternalGraphEdge, InternalGraphNode } from '../types';\nimport { getNodeDepth } from './depthUtils';\n\nconst RADIALS: DagMode[] = ['radialin', 'radialout'];\n\nexport type DagMode =\n  | 'lr'\n  | 'rl'\n  | 'td'\n  | 'but'\n  | 'zout'\n  | 'zin'\n  | 'radialin'\n  | 'radialout';\n\nexport interface ForceRadialInputs {\n  nodes: InternalGraphNode[];\n  edges: InternalGraphEdge[];\n  mode: DagMode;\n  nodeLevelRatio: number;\n}\n\n/**\n * Radial graph layout using D3 Force 3d.\n * Inspired by: https://github.com/vasturiano/three-forcegraph/blob/master/src/forcegraph-kapsule.js#L970-L1018\n */\nexport function forceRadial({\n  nodes,\n  edges,\n  mode = 'lr',\n  nodeLevelRatio = 2\n}: ForceRadialInputs) {\n  const { depths, maxDepth, invalid } = getNodeDepth(nodes, edges);\n\n  if (invalid) {\n    return null;\n  }\n\n  const modeDistance = RADIALS.includes(mode) ? 1 : 5;\n  const dagLevelDistance =\n    (nodes.length / maxDepth) * nodeLevelRatio * modeDistance;\n\n  if (mode) {\n    const getFFn =\n      (fix: boolean, invert: boolean) => (node: InternalGraphNode) =>\n        !fix\n          ? undefined\n          : (depths[node.id].depth - maxDepth / 2) *\n            dagLevelDistance *\n            (invert ? -1 : 1);\n\n    const fxFn = getFFn(['lr', 'rl'].includes(mode), mode === 'rl');\n    const fyFn = getFFn(['td', 'bu'].includes(mode), mode === 'td');\n    const fzFn = getFFn(['zin', 'zout'].includes(mode), mode === 'zout');\n\n    nodes.forEach(node => {\n      node.fx = fxFn(node);\n      node.fy = fyFn(node);\n      node.fz = fzFn(node);\n    });\n  }\n\n  return RADIALS.includes(mode)\n    ? d3ForceRadial(node => {\n      const nodeDepth = depths[node.id];\n      const depth =\n          mode === 'radialin' ? maxDepth - nodeDepth.depth : nodeDepth.depth;\n      return depth * dagLevelDistance;\n    }).strength(1)\n    : null;\n}\n","import Graph from 'graphology';\nimport { LayoutStrategy } from './types';\nimport { InternalGraphEdge, InternalGraphNode } from '../types';\n\n/**\n * Promise based tick helper.\n */\nexport function tick(layout: LayoutStrategy) {\n  return new Promise((resolve, _reject) => {\n    let stable: boolean | undefined;\n\n    function run() {\n      if (!stable) {\n        stable = layout.step();\n        run();\n      } else {\n        resolve(stable);\n      }\n    }\n\n    run();\n  });\n}\n\n/**\n * Helper function to turn the graph nodes/edges into an array for\n * easier manipulation.\n */\nexport function buildNodeEdges(graph: Graph) {\n  const nodes: InternalGraphNode[] = [];\n  const edges: InternalGraphEdge[] = [];\n\n  graph.forEachNode((id, n: any) => {\n    nodes.push({\n      ...n,\n      id,\n      // This is for the clustering\n      radius: n.size || 1\n    });\n  });\n\n  graph.forEachEdge((id, l: any) => {\n    edges.push({ ...l, id });\n  });\n\n  return { nodes, edges };\n}\n","import {\n  forceSimulation,\n  forceX,\n  forceY,\n  forceLink,\n  forceManyBody,\n  forceCollide\n} from 'd3-force-3d';\nimport { treemap, hierarchy } from 'd3-hierarchy';\nimport { ClusterGroup } from '../utils/cluster';\n\n/**\n * Used for calculating clusterings of nodes.\n *\n * Modified version of: https://github.com/john-guerra/forceInABox\n *\n * Changes:\n *  - Improved d3 import for tree shaking\n *  - Fixed node lookup for edges using array\n *  - Updated d3-force to use d3-force-3d\n *  - Removed template logic\n */\nexport function forceInABox() {\n  // d3 style\n  const constant = (_: any) => () => _;\n  const index = (d: any) => d.index;\n\n  // Default values\n  let id = index;\n  let nodes = [];\n  let links = []; // needed for the force version\n  let clusters: Map<string, ClusterGroup>;\n  let tree;\n  let size = [100, 100];\n  let forceNodeSize = constant(1); // The expected node size used for computing the cluster node\n  let forceCharge = constant(-1);\n  let forceLinkDistance = constant(100);\n  let forceLinkStrength = constant(0.1);\n  let foci = {};\n  let linkStrengthIntraCluster = 0.1;\n  let linkStrengthInterCluster = 0.001;\n  let templateNodes = [];\n  let offset = [0, 0];\n  let templateForce;\n  let groupBy = d => d.cluster;\n  let template = 'treemap';\n  let enableGrouping = true;\n  let strength = 0.1;\n\n  function force(alpha) {\n    if (!enableGrouping) {\n      return force;\n    }\n\n    if (template === 'force') {\n      // Do the tick of the template force and get the new focis\n      templateForce.tick();\n      getFocisFromTemplate();\n    }\n\n    for (let i = 0, n = nodes.length, node, k = alpha * strength; i < n; ++i) {\n      node = nodes[i];\n      node.vx += (foci[groupBy(node)].x - node.x) * k;\n      node.vy += (foci[groupBy(node)].y - node.y) * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) {\n      return;\n    }\n\n    if (template === 'treemap') {\n      initializeWithTreemap();\n    } else {\n      initializeWithForce();\n    }\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  function getLinkKey(l) {\n    let sourceID = groupBy(l.source),\n      targetID = groupBy(l.target);\n\n    return sourceID <= targetID\n      ? sourceID + '~' + targetID\n      : targetID + '~' + sourceID;\n  }\n\n  function computeClustersNodeCounts(nodes) {\n    let clustersCounts = new Map(),\n      tmpCount: any = {};\n\n    nodes.forEach(function (d) {\n      if (!clustersCounts.has(groupBy(d))) {\n        clustersCounts.set(groupBy(d), { count: 0, sumforceNodeSize: 0 });\n      }\n    });\n\n    nodes.forEach(function (d) {\n      tmpCount = clustersCounts.get(groupBy(d));\n      tmpCount.count = tmpCount.count + 1;\n      tmpCount.sumforceNodeSize =\n        tmpCount.sumforceNodeSize +\n        // @ts-ignore\n        Math.PI * (forceNodeSize(d) * forceNodeSize(d)) * 1.3;\n      clustersCounts.set(groupBy(d), tmpCount);\n    });\n\n    return clustersCounts;\n  }\n\n  //Returns\n  function computeClustersLinkCounts(links) {\n    let dClusterLinks = new Map(),\n      clusterLinks = [];\n\n    links.forEach(function (l) {\n      let key = getLinkKey(l),\n        count;\n      if (dClusterLinks.has(key)) {\n        count = dClusterLinks.get(key);\n      } else {\n        count = 0;\n      }\n      count += 1;\n      dClusterLinks.set(key, count);\n    });\n\n    dClusterLinks.forEach(function (value, key) {\n      let source, target;\n      source = key.split('~')[0];\n      target = key.split('~')[1];\n      if (source !== undefined && target !== undefined) {\n        clusterLinks.push({\n          source: source,\n          target: target,\n          count: value\n        });\n      }\n    });\n\n    return clusterLinks;\n  }\n\n  //Returns the metagraph of the clusters\n  function getGroupsGraph() {\n    let gnodes = [];\n    let glinks = [];\n    let dNodes = new Map();\n    let c;\n    let i;\n    let cc;\n    let clustersCounts;\n    let clustersLinks;\n\n    clustersCounts = computeClustersNodeCounts(nodes);\n    clustersLinks = computeClustersLinkCounts(links);\n\n    for (c of clustersCounts.keys()) {\n      cc = clustersCounts.get(c);\n      gnodes.push({\n        id: c,\n        size: cc.count,\n        r: Math.sqrt(cc.sumforceNodeSize / Math.PI)\n      }); // Uses approx meta-node size\n      dNodes.set(c, i);\n    }\n\n    clustersLinks.forEach(function (l) {\n      let source = dNodes.get(l.source),\n        target = dNodes.get(l.target);\n      if (source !== undefined && target !== undefined) {\n        glinks.push({\n          source: source,\n          target: target,\n          count: l.count\n        });\n      }\n    });\n\n    return { nodes: gnodes, links: glinks };\n  }\n\n  function getGroupsTree() {\n    let children = [];\n    let c;\n    let cc;\n    let clustersCounts;\n\n    // @ts-ignore\n    clustersCounts = computeClustersNodeCounts(force.nodes());\n\n    for (c of clustersCounts.keys()) {\n      cc = clustersCounts.get(c);\n      children.push({ id: c, size: cc.count });\n    }\n    return { id: 'clustersTree', children: children };\n  }\n\n  function getFocisFromTemplate() {\n    //compute foci\n    // @ts-ignore\n    foci.none = { x: 0, y: 0 };\n    templateNodes.forEach(function (d) {\n      if (template === 'treemap') {\n        foci[d.data.id] = {\n          x: d.x0 + (d.x1 - d.x0) / 2 - offset[0],\n          y: d.y0 + (d.y1 - d.y0) / 2 - offset[1]\n        };\n      } else {\n        foci[d.id] = {\n          x: d.x - offset[0],\n          y: d.y - offset[1]\n        };\n      }\n    });\n    return foci;\n  }\n\n  function initializeWithTreemap() {\n    // @ts-ignore\n    let sim = treemap().size(force.size());\n\n    tree = hierarchy(getGroupsTree())\n      .sum((d: any) => d.radius)\n      .sort(function (a, b) {\n        return b.height - a.height || b.value - a.value;\n      });\n\n    templateNodes = sim(tree).leaves();\n    getFocisFromTemplate();\n  }\n\n  function checkLinksAsObjects() {\n    // Check if links come in the format of indexes instead of objects\n    let linkCount = 0;\n    if (nodes.length === 0) return;\n\n    links.forEach(function (link) {\n      let source, target;\n      if (!nodes) {\n        return;\n      }\n\n      source = link.source;\n      target = link.target;\n\n      if (typeof link.source !== 'object') {\n        source = nodes.find(n => n.id === link.source);\n      }\n\n      if (typeof link.target !== 'object') {\n        target = nodes.find(n => n.id === link.target);\n      }\n\n      if (source === undefined || target === undefined) {\n        throw Error(\n          'Error setting links, couldnt find nodes for a link (see it on the console)'\n        );\n      }\n      link.source = source;\n      link.target = target;\n      link.index = linkCount++;\n    });\n  }\n\n  function initializeWithForce() {\n    let net;\n\n    if (!nodes || !nodes.length) {\n      return;\n    }\n\n    checkLinksAsObjects();\n\n    net = getGroupsGraph();\n\n    // Use dragged clusters position if available\n    if (clusters.size > 0) {\n      net.nodes.forEach(n => {\n        // Set fixed X position for cluster\n        n.fx = clusters.get(n.id)?.position?.x;\n        // Set fixed Y position for cluster\n        n.fy = clusters.get(n.id)?.position?.y;\n      });\n    }\n\n    templateForce = forceSimulation(net.nodes)\n      .force('x', forceX(size[0] / 2).strength(0.1))\n      .force('y', forceY(size[1] / 2).strength(0.1))\n      .force('collide', forceCollide(d => d.r).iterations(4))\n      .force('charge', forceManyBody().strength(forceCharge))\n      .force(\n        'links',\n        forceLink(net.nodes.length ? net.links : [])\n          .distance(forceLinkDistance)\n          .strength(forceLinkStrength)\n      );\n\n    templateNodes = templateForce.nodes();\n\n    getFocisFromTemplate();\n  }\n\n  force.template = function (x) {\n    if (!arguments.length) {\n      return template;\n    }\n\n    template = x;\n    initialize();\n    return force;\n  };\n\n  force.groupBy = function (x) {\n    if (!arguments.length) {\n      return groupBy;\n    }\n\n    if (typeof x === 'string') {\n      groupBy = function (d) {\n        return d[x];\n      };\n\n      return force;\n    }\n\n    groupBy = x;\n\n    return force;\n  };\n\n  force.enableGrouping = function (x) {\n    if (!arguments.length) {\n      return enableGrouping;\n    }\n\n    enableGrouping = x;\n\n    return force;\n  };\n\n  force.strength = function (x) {\n    if (!arguments.length) {\n      return strength;\n    }\n\n    strength = x;\n\n    return force as any;\n  };\n\n  force.getLinkStrength = function (e) {\n    if (enableGrouping) {\n      if (groupBy(e.source) === groupBy(e.target)) {\n        if (typeof linkStrengthIntraCluster === 'function') {\n          // @ts-ignore\n          return linkStrengthIntraCluster(e);\n        } else {\n          return linkStrengthIntraCluster;\n        }\n      } else {\n        if (typeof linkStrengthInterCluster === 'function') {\n          // @ts-ignore\n          return linkStrengthInterCluster(e);\n        } else {\n          return linkStrengthInterCluster;\n        }\n      }\n    } else {\n      // Not grouping return the intracluster\n      if (typeof linkStrengthIntraCluster === 'function') {\n        // @ts-ignore\n        return linkStrengthIntraCluster(e);\n      } else {\n        return linkStrengthIntraCluster;\n      }\n    }\n  };\n\n  force.id = function (_) {\n    return arguments.length ? ((id = _), force) : id;\n  };\n\n  force.size = function (_) {\n    return arguments.length ? ((size = _), force) : size;\n  };\n\n  force.linkStrengthInterCluster = function (_) {\n    return arguments.length\n      ? ((linkStrengthInterCluster = _), force)\n      : linkStrengthInterCluster;\n  };\n\n  force.linkStrengthIntraCluster = function (_) {\n    return arguments.length\n      ? ((linkStrengthIntraCluster = _), force)\n      : linkStrengthIntraCluster;\n  };\n\n  force.nodes = function (_) {\n    return arguments.length ? ((nodes = _), force) : nodes;\n  };\n\n  force.links = function (_) {\n    if (!arguments.length) {\n      return links;\n    }\n\n    if (_ === null) {\n      links = [];\n    } else {\n      links = _;\n    }\n\n    initialize();\n\n    return force;\n  };\n\n  force.template = function (x) {\n    if (!arguments.length) {\n      return template;\n    }\n\n    template = x;\n    initialize();\n    return force;\n  };\n\n  force.forceNodeSize = function (_) {\n    return arguments.length\n      ? ((forceNodeSize = typeof _ === 'function' ? _ : constant(+_)),\n      initialize(),\n      force)\n      : forceNodeSize;\n  };\n\n  // Legacy support\n  force.nodeSize = force.forceNodeSize;\n\n  force.forceCharge = function (_) {\n    return arguments.length\n      ? ((forceCharge = typeof _ === 'function' ? _ : constant(+_)),\n      initialize(),\n      force)\n      : forceCharge;\n  };\n\n  force.forceLinkDistance = function (_) {\n    return arguments.length\n      ? ((forceLinkDistance = typeof _ === 'function' ? _ : constant(+_)),\n      initialize(),\n      force)\n      : forceLinkDistance;\n  };\n\n  force.forceLinkStrength = function (_) {\n    return arguments.length\n      ? ((forceLinkStrength = typeof _ === 'function' ? _ : constant(+_)),\n      initialize(),\n      force)\n      : forceLinkStrength;\n  };\n\n  force.offset = function (_) {\n    return arguments.length\n      ? ((offset = typeof _ === 'function' ? _ : constant(+_)), force)\n      : offset;\n  };\n\n  force.getFocis = getFocisFromTemplate;\n\n  // Define the clusters to reuse positions from\n  force.setClusters = function (value: any) {\n    clusters = value;\n\n    return force;\n  };\n\n  return force;\n}\n","import {\n  forceSimulation as d3ForceSimulation,\n  forceLink as d3ForceLink,\n  forceCollide,\n  forceManyBody as d3ForceManyBody,\n  forceX as d3ForceX,\n  forceY as d3ForceY,\n  forceZ as d3ForceZ,\n  forceCenter as d3ForceCenter\n} from 'd3-force-3d';\nimport { forceRadial, DagMode } from './forceUtils';\nimport { LayoutFactoryProps, LayoutStrategy } from './types';\nimport { buildNodeEdges } from './layoutUtils';\nimport { forceInABox } from './forceInABox';\nimport { FORCE_LAYOUTS } from './layoutProvider';\nimport { ClusterGroup } from '../utils/cluster';\n\nexport interface ForceDirectedLayoutInputs extends LayoutFactoryProps {\n  /**\n   * Center inertia for the layout. Default: 1.\n   */\n  centerInertia?: number;\n\n  /**\n   * Number of dimensions for the layout. 2d or 3d.\n   */\n  dimensions?: number;\n\n  /**\n   * Mode for the dag layout. Only applicable for dag layouts.\n   */\n  mode?: DagMode;\n\n  /**\n   * Distance between links.\n   */\n  linkDistance?: number;\n\n  /**\n   * Strength of the node repulsion.\n   */\n  nodeStrength?: number;\n\n  /**\n   * Strength of the cluster repulsion.\n   */\n  clusterStrength?: number;\n\n  /**\n   * The clusters dragged position to reuse for the layout.\n   */\n  clusters: Map<string, ClusterGroup>;\n\n  /**\n   * The type of clustering.\n   */\n  clusterType?: 'force' | 'treemap';\n\n  /**\n   * Ratio of the distance between nodes on the same level.\n   */\n  nodeLevelRatio?: number;\n\n  /**\n   * LinkStrength between nodes of different clusters\n   */\n  linkStrengthInterCluster?: number | ((d: any) => number);\n\n  /**\n   * LinkStrength between nodes of the same cluster\n   */\n  linkStrengthIntraCluster?: number | ((d: any) => number);\n\n  /**\n   * Charge between the meta-nodes (Force template only)\n   */\n  forceLinkDistance?: number;\n\n  /**\n   * Used to compute the template force nodes size (Force template only)\n   */\n  forceLinkStrength?: number;\n\n  /**\n   * Used to compute the template force nodes size (Force template only)\n   */\n  forceCharge?: number;\n\n  /**\n   * Used to determine the simulation forceX and forceY values\n   */\n  forceLayout: (typeof FORCE_LAYOUTS)[number];\n}\n\nexport function forceDirected({\n  graph,\n  nodeLevelRatio = 2,\n  mode = null,\n  dimensions = 2,\n  nodeStrength = -250,\n  linkDistance = 50,\n  clusterStrength = 0.5,\n  linkStrengthInterCluster = 0.01,\n  linkStrengthIntraCluster = 0.5,\n  forceLinkDistance = 100,\n  forceLinkStrength = 0.1,\n  clusterType = 'force',\n  forceCharge = -700,\n  getNodePosition,\n  drags,\n  clusters,\n  clusterAttribute,\n  forceLayout\n}: ForceDirectedLayoutInputs): LayoutStrategy {\n  const { nodes, edges } = buildNodeEdges(graph);\n\n  // Dynamically adjust node strength based on the number of edges\n  const is2d = dimensions === 2;\n  const nodeStrengthAdjustment =\n    is2d && edges.length > 25 ? nodeStrength * 2 : nodeStrength;\n\n  let forceX;\n  let forceY;\n  if (forceLayout === 'forceDirected2d') {\n    forceX = d3ForceX();\n    forceY = d3ForceY();\n  } else {\n    forceX = d3ForceX(600).strength(0.05);\n    forceY = d3ForceY(600).strength(0.05);\n  }\n\n  // Create the simulation\n  const sim = d3ForceSimulation()\n    .force('center', d3ForceCenter(0, 0))\n    .force('link', d3ForceLink())\n    .force('charge', d3ForceManyBody().strength(nodeStrengthAdjustment))\n    .force('x', forceX)\n    .force('y', forceY)\n    .force('z', d3ForceZ())\n    // Handles nodes not overlapping each other ( most relevant in clustering )\n    .force(\n      'collide',\n      forceCollide(d => d.radius + 10)\n    )\n    .force(\n      'dagRadial',\n      forceRadial({\n        nodes,\n        edges,\n        mode,\n        nodeLevelRatio\n      })\n    )\n    .stop();\n\n  let groupingForce;\n  if (clusterAttribute) {\n    // Dynamically adjust cluster force charge based on the number of nodes\n    let forceChargeAdjustment = forceCharge;\n    if (nodes?.length) {\n      const adjustmentFactor = Math.ceil(nodes.length / 200);\n      forceChargeAdjustment = forceCharge * adjustmentFactor;\n    }\n\n    groupingForce = forceInABox()\n      // The clusters dragged position to reuse for the layout\n      .setClusters(clusters)\n      // Strength to foci\n      .strength(clusterStrength)\n      // Either treemap or force\n      .template(clusterType)\n      // Node attribute to group\n      .groupBy(d => d.data[clusterAttribute])\n      // The graph links. Must be called after setting the grouping attribute\n      .links(edges)\n      // Size of the chart\n      .size([100, 100])\n      // linkStrength between nodes of different clusters\n      .linkStrengthInterCluster(linkStrengthInterCluster)\n      // linkStrength between nodes of the same cluster\n      .linkStrengthIntraCluster(linkStrengthIntraCluster)\n      // linkDistance between meta-nodes on the template (Force template only)\n      .forceLinkDistance(forceLinkDistance)\n      // linkStrength between meta-nodes of the template (Force template only)\n      .forceLinkStrength(forceLinkStrength)\n      // Charge between the meta-nodes (Force template only)\n      .forceCharge(forceChargeAdjustment)\n      // Used to compute the template force nodes size (Force template only)\n      .forceNodeSize(d => d.radius);\n  }\n\n  // Initialize the simulation\n  let layout = sim.numDimensions(dimensions).nodes(nodes);\n\n  if (groupingForce) {\n    layout = layout.force('group', groupingForce);\n  }\n\n  // Run the force on the links\n  if (linkDistance) {\n    let linkForce = layout.force('link');\n    if (linkForce) {\n      linkForce\n        .id(d => d.id)\n        .links(edges)\n        // When no mode passed, its a tree layout\n        // so let's use a larger distance\n        .distance(linkDistance);\n\n      if (groupingForce) {\n        linkForce = linkForce.strength(groupingForce?.getLinkStrength ?? 0.1);\n      }\n    }\n  }\n\n  const nodeMap = new Map(nodes.map(n => [n.id, n]));\n\n  return {\n    step() {\n      // Run the simulation til we get a stable result\n      while (sim.alpha() > 0.01) {\n        sim.tick();\n      }\n      return true;\n    },\n    getNodePosition(id: string) {\n      if (getNodePosition) {\n        const pos = getNodePosition(id, { graph, drags, nodes, edges });\n        if (pos) {\n          return pos;\n        }\n      }\n\n      if (drags?.[id]?.position) {\n        // If we dragged, we need to use that position\n        return drags?.[id]?.position as any;\n      }\n\n      return nodeMap.get(id);\n    }\n  };\n}\n","import circular from 'graphology-layout/circular.js';\nimport { LayoutFactoryProps } from './types';\nimport { buildNodeEdges } from './layoutUtils';\n\nexport interface CircularLayoutInputs extends LayoutFactoryProps {\n  /**\n   * Radius of the circle.\n   */\n  radius: number;\n}\n\nexport function circular2d({\n  graph,\n  radius,\n  drags,\n  getNodePosition\n}: CircularLayoutInputs) {\n  const layout = circular(graph, {\n    scale: radius\n  });\n\n  const { nodes, edges } = buildNodeEdges(graph);\n\n  return {\n    step() {\n      return true;\n    },\n    getNodePosition(id: string) {\n      if (getNodePosition) {\n        const pos = getNodePosition(id, { graph, drags, nodes, edges });\n        if (pos) {\n          return pos;\n        }\n      }\n\n      if (drags?.[id]?.position) {\n        // If we dragged, we need to use that position\n        return drags?.[id]?.position as any;\n      }\n\n      return layout?.[id];\n    }\n  };\n}\n","import { InternalGraphNode } from '../types';\nimport { DepthNode, getNodeDepth } from './depthUtils';\nimport { LayoutFactoryProps, LayoutStrategy } from './types';\nimport { hierarchy, stratify, tree } from 'd3-hierarchy';\nimport { buildNodeEdges } from './layoutUtils';\n\nexport interface HierarchicalLayoutInputs extends LayoutFactoryProps {\n  /**\n   * Direction of the layout. Default 'td'.\n   */\n  mode?: 'td' | 'lr';\n  /**\n   * Factor of distance between nodes. Default 1.\n   */\n  nodeSeparation?: number;\n  /**\n   * Size of each node. Default [50,50]\n   */\n  nodeSize?: [number, number];\n}\n\nconst DIRECTION_MAP = {\n  td: {\n    x: 'x',\n    y: 'y',\n    factor: -1\n  },\n  lr: {\n    x: 'y',\n    y: 'x',\n    factor: 1\n  }\n};\n\nexport function hierarchical({\n  graph,\n  drags,\n  mode = 'td',\n  nodeSeparation = 1,\n  nodeSize = [50, 50],\n  getNodePosition\n}: HierarchicalLayoutInputs): LayoutStrategy {\n  const { nodes, edges } = buildNodeEdges(graph);\n\n  const { depths } = getNodeDepth(nodes, edges);\n  const rootNodes = Object.keys(depths).map(d => depths[d]);\n\n  const root = stratify<DepthNode>()\n    .id(d => d.data.id)\n    .parentId(d => d.ins?.[0]?.data?.id)(rootNodes);\n\n  const treeRoot = tree()\n    .separation(() => nodeSeparation)\n    .nodeSize(nodeSize)(hierarchy(root));\n\n  const treeNodes = treeRoot.descendants();\n  const path = DIRECTION_MAP[mode];\n\n  const mappedNodes = new Map<string, InternalGraphNode>(\n    nodes.map(n => {\n      const { x, y } = treeNodes.find((t: any) => t.data.id === n.id);\n      return [\n        n.id,\n        {\n          ...n,\n          [path.x]: x * path.factor,\n          [path.y]: y * path.factor,\n          z: 0\n        }\n      ];\n    })\n  );\n\n  return {\n    step() {\n      return true;\n    },\n    getNodePosition(id: string) {\n      if (getNodePosition) {\n        const pos = getNodePosition(id, { graph, drags, nodes, edges });\n        if (pos) {\n          return pos;\n        }\n      }\n\n      if (drags?.[id]?.position) {\n        // If we dragged, we need to use that position\n        return drags?.[id]?.position as any;\n      }\n\n      return mappedNodes.get(id);\n    }\n  };\n}\n","import noverlapLayout from 'graphology-layout-noverlap';\nimport { LayoutFactoryProps } from './types';\nimport { buildNodeEdges } from './layoutUtils';\n\nexport interface NoOverlapLayoutInputs extends LayoutFactoryProps {\n  /**\n   * Grid size. Default 20.\n   */\n  gridSize?: number;\n\n  /**\n   * Ratio of the layout. Default 10.\n   */\n  ratio?: number;\n\n  /**\n   * Maximum number of iterations. Default 50.\n   */\n  maxIterations?: number;\n\n  /**\n   * Margin between nodes. Default 10.\n   */\n  margin?: number;\n}\n\nexport function nooverlap({\n  graph,\n  margin,\n  drags,\n  getNodePosition,\n  ratio,\n  gridSize,\n  maxIterations\n}: NoOverlapLayoutInputs) {\n  const { nodes, edges } = buildNodeEdges(graph);\n\n  const layout = noverlapLayout(graph, {\n    maxIterations,\n    inputReducer: (_key, attr) => ({\n      ...attr,\n      // Have to specify defaults for the engine\n      x: attr.x || 0,\n      y: attr.y || 0\n    }),\n    settings: {\n      ratio,\n      margin,\n      gridSize\n    }\n  });\n\n  return {\n    step() {\n      return true;\n    },\n    getNodePosition(id: string) {\n      if (getNodePosition) {\n        const pos = getNodePosition(id, { graph, drags, nodes, edges });\n        if (pos) {\n          return pos;\n        }\n      }\n\n      if (drags?.[id]?.position) {\n        // If we dragged, we need to use that position\n        return drags?.[id]?.position as any;\n      }\n\n      return layout?.[id];\n    }\n  };\n}\n","import forceAtlas2Layout from 'graphology-layout-forceatlas2';\nimport { LayoutFactoryProps } from './types';\nimport random from 'graphology-layout/random.js';\n\nexport interface ForceAtlas2LayoutInputs extends LayoutFactoryProps {\n  /**\n   * Should the node’s sizes be taken into account. Default: false.\n   */\n  adjustSizes?: boolean;\n\n  /**\n   * whether to use the Barnes-Hut approximation to compute\n   * repulsion in O(n*log(n)) rather than default O(n^2),\n   * n being the number of nodes. Default: false.\n   */\n  barnesHutOptimize?: boolean;\n\n  /**\n   * Barnes-Hut approximation theta parameter. Default: 0.5.\n   */\n  barnesHutTheta?: number;\n\n  /**\n   * Influence of the edge’s weights on the layout. To consider edge weight, don’t\n   *  forget to pass weighted as true. Default: 1.\n   */\n  edgeWeightInfluence?: number;\n\n  /**\n   * Strength of the layout’s gravity. Default: 10.\n   */\n  gravity?: number;\n\n  /**\n   * Whether to use Noack’s LinLog model. Default: false.\n   */\n  linLogMode?: boolean;\n\n  /**\n   * Whether to consider edge weights when calculating repulsion. Default: false.\n   */\n  outboundAttractionDistribution?: boolean;\n\n  /**\n   * Scaling ratio for repulsion. Default: 100.\n   */\n  scalingRatio?: number;\n\n  /**\n   * Speed of the slowdown. Default: 1.\n   */\n  slowDown?: number;\n\n  /**\n   * Whether to use the strong gravity mode. Default: false.\n   */\n  strongGravityMode?: boolean;\n\n  /**\n   * Number of iterations to perform. Default: 50.\n   */\n  iterations?: number;\n}\n\nexport function forceAtlas2({\n  graph,\n  drags,\n  iterations,\n  ...rest\n}: ForceAtlas2LayoutInputs) {\n  // Note: We need to assign a random position to each node\n  // in order for the force atlas to work.\n  // Reference: https://graphology.github.io/standard-library/layout-forceatlas2.html#pre-requisites\n  random.assign(graph);\n\n  const layout = forceAtlas2Layout(graph, {\n    iterations,\n    settings: rest\n  });\n\n  return {\n    step() {\n      return true;\n    },\n    getNodePosition(id: string) {\n      // If we dragged, we need to use that position\n      return (drags?.[id]?.position as any) || layout?.[id];\n    }\n  };\n}\n","import { LayoutFactoryProps } from './types';\nimport { buildNodeEdges } from './layoutUtils';\n\nexport function custom({ graph, drags, getNodePosition }: LayoutFactoryProps) {\n  const { nodes, edges } = buildNodeEdges(graph);\n\n  return {\n    step() {\n      return true;\n    },\n    getNodePosition(id: string) {\n      return getNodePosition(id, { graph, drags, nodes, edges });\n    }\n  };\n}\n","import { LayoutFactoryProps, LayoutStrategy } from './types';\nimport { forceDirected, ForceDirectedLayoutInputs } from './forceDirected';\nimport { circular2d, CircularLayoutInputs } from './circular2d';\nimport { hierarchical, HierarchicalLayoutInputs } from './hierarchical';\nimport { NoOverlapLayoutInputs, nooverlap } from './nooverlap';\nimport { ForceAtlas2LayoutInputs, forceAtlas2 } from './forceatlas2';\nimport { custom } from './custom';\n\nexport type LayoutOverrides = Partial<\n  | Omit<ForceDirectedLayoutInputs, 'dimensions' | 'mode'>\n  | CircularLayoutInputs\n  | HierarchicalLayoutInputs\n>;\n\nexport const FORCE_LAYOUTS = [\n  'forceDirected2d',\n  'treeTd2d',\n  'treeLr2d',\n  'radialOut2d',\n  'treeTd3d',\n  'treeLr3d',\n  'radialOut3d',\n  'forceDirected3d'\n];\n\nexport function layoutProvider({\n  type,\n  ...rest\n}: LayoutFactoryProps | LayoutOverrides): LayoutStrategy {\n  if (FORCE_LAYOUTS.includes(type)) {\n    const { nodeStrength, linkDistance, nodeLevelRatio } =\n      rest as ForceDirectedLayoutInputs;\n\n    if (type === 'forceDirected2d') {\n      return forceDirected({\n        ...rest,\n        dimensions: 2,\n        nodeLevelRatio: nodeLevelRatio || 2,\n        nodeStrength: nodeStrength || -250,\n        linkDistance,\n        forceLayout: type\n      } as ForceDirectedLayoutInputs);\n    } else if (type === 'treeTd2d') {\n      return forceDirected({\n        ...rest,\n        mode: 'td',\n        dimensions: 2,\n        nodeLevelRatio: nodeLevelRatio || 5,\n        nodeStrength: nodeStrength || -250,\n        linkDistance: linkDistance || 50,\n        forceLayout: type\n      } as ForceDirectedLayoutInputs);\n    } else if (type === 'treeLr2d') {\n      return forceDirected({\n        ...rest,\n        mode: 'lr',\n        dimensions: 2,\n        nodeLevelRatio: nodeLevelRatio || 5,\n        nodeStrength: nodeStrength || -250,\n        linkDistance: linkDistance || 50,\n        forceLayout: type\n      } as ForceDirectedLayoutInputs);\n    } else if (type === 'radialOut2d') {\n      return forceDirected({\n        ...rest,\n        mode: 'radialout',\n        dimensions: 2,\n        nodeLevelRatio: nodeLevelRatio || 5,\n        nodeStrength: nodeStrength || -500,\n        linkDistance: linkDistance || 100,\n        forceLayout: type\n      } as ForceDirectedLayoutInputs);\n    } else if (type === 'treeTd3d') {\n      return forceDirected({\n        ...rest,\n        mode: 'td',\n        dimensions: 3,\n        nodeLevelRatio: nodeLevelRatio || 2,\n        nodeStrength: nodeStrength || -500,\n        linkDistance: linkDistance || 50\n      } as ForceDirectedLayoutInputs);\n    } else if (type === 'treeLr3d') {\n      return forceDirected({\n        ...rest,\n        mode: 'lr',\n        dimensions: 3,\n        nodeLevelRatio: nodeLevelRatio || 2,\n        nodeStrength: nodeStrength || -500,\n        linkDistance: linkDistance || 50,\n        forceLayout: type\n      } as ForceDirectedLayoutInputs);\n    } else if (type === 'radialOut3d') {\n      return forceDirected({\n        ...rest,\n        mode: 'radialout',\n        dimensions: 3,\n        nodeLevelRatio: nodeLevelRatio || 2,\n        nodeStrength: nodeStrength || -500,\n        linkDistance: linkDistance || 100,\n        forceLayout: type\n      } as ForceDirectedLayoutInputs);\n    } else if (type === 'forceDirected3d') {\n      return forceDirected({\n        ...rest,\n        dimensions: 3,\n        nodeLevelRatio: nodeLevelRatio || 2,\n        nodeStrength: nodeStrength || -250,\n        linkDistance,\n        forceLayout: type\n      } as ForceDirectedLayoutInputs);\n    }\n  } else if (type === 'circular2d') {\n    const { radius } = rest as CircularLayoutInputs;\n    return circular2d({\n      ...rest,\n      radius: radius || 300\n    } as CircularLayoutInputs);\n  } else if (type === 'hierarchicalTd') {\n    return hierarchical({ ...rest, mode: 'td' } as HierarchicalLayoutInputs);\n  } else if (type === 'hierarchicalLr') {\n    return hierarchical({ ...rest, mode: 'lr' } as HierarchicalLayoutInputs);\n  } else if (type === 'nooverlap') {\n    const { graph, maxIterations, ratio, margin, gridSize, ...settings } =\n      rest as NoOverlapLayoutInputs;\n\n    return nooverlap({\n      type: 'nooverlap',\n      graph,\n      margin: margin || 10,\n      maxIterations: maxIterations || 50,\n      ratio: ratio || 10,\n      gridSize: gridSize || 20,\n      ...settings\n    });\n  } else if (type === 'forceatlas2') {\n    const { graph, iterations, gravity, scalingRatio, ...settings } =\n      rest as ForceAtlas2LayoutInputs;\n\n    return forceAtlas2({\n      type: 'forceatlas2',\n      graph,\n      ...settings,\n      scalingRatio: scalingRatio || 100,\n      gravity: gravity || 10,\n      iterations: iterations || 50\n    });\n  } else if (type === 'custom') {\n    return custom({\n      type: 'custom',\n      ...rest\n    } as LayoutFactoryProps);\n  }\n\n  throw new Error(`Layout ${type} not found.`);\n}\n","import { GraphEdge, GraphNode } from '../types';\nimport { getNodeDepth } from './depthUtils';\nimport { LayoutTypes } from './types';\n\n/**\n * Given a set of nodes and edges, determine the type of layout that\n * is most ideal. This is very beta.\n */\nexport function recommendLayout(\n  nodes: GraphNode[],\n  edges: GraphEdge[]\n): LayoutTypes {\n  const { invalid } = getNodeDepth(nodes as any[], edges as any[]);\n  const nodeCount = nodes.length;\n\n  if (!invalid) {\n    // Large tree layouts\n    if (nodeCount > 100) {\n      return 'radialOut2d';\n    } else {\n      // Smaller tree layouts\n      return 'treeTd2d';\n    }\n  }\n\n  // Circular layouts\n  return 'forceDirected2d';\n}\n","import { PerspectiveCamera } from 'three';\nimport { EdgeLabelPosition } from '../symbols';\n\nexport type LabelVisibilityType = 'all' | 'auto' | 'none' | 'nodes' | 'edges';\n\ninterface CalcLabelVisibilityArgs {\n  nodeCount: number;\n  nodePosition?: { x: number; y: number; z: number };\n  labelType: LabelVisibilityType;\n  camera?: PerspectiveCamera;\n}\n\nexport function calcLabelVisibility({\n  nodeCount,\n  nodePosition,\n  labelType,\n  camera\n}: CalcLabelVisibilityArgs) {\n  return (shape: 'node' | 'edge', size: number) => {\n    if (\n      camera &&\n      nodePosition &&\n      camera?.position?.z / camera?.zoom - nodePosition?.z > 6000\n    ) {\n      return false;\n    }\n\n    if (labelType === 'all') {\n      return true;\n    } else if (labelType === 'nodes' && shape === 'node') {\n      return true;\n    } else if (labelType === 'edges' && shape === 'edge') {\n      return true;\n    } else if (labelType === 'auto' && shape === 'node') {\n      if (size > 7) {\n        return true;\n      } else if (\n        camera &&\n        nodePosition &&\n        camera.position.z / camera.zoom - nodePosition.z < 3000\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n}\n\nexport function getLabelOffsetByType(\n  offset: number,\n  position: EdgeLabelPosition\n): number {\n  switch (position) {\n  case 'above':\n    return offset;\n  case 'below':\n    return -offset;\n  case 'inline':\n  case 'natural':\n  default:\n    return 0;\n  }\n}\n\nexport const isServerRender = typeof window === 'undefined';\n","import pagerank from 'graphology-metrics/centrality/pagerank.js';\nimport { SizingStrategy, SizingStrategyInputs } from './types';\n\nexport function pageRankSizing({\n  graph\n}: SizingStrategyInputs): SizingStrategy {\n  const ranks = pagerank(graph);\n\n  return {\n    ranks,\n    getSizeForNode: (nodeID: string) => ranks[nodeID] * 80\n  };\n}\n","import { SizingStrategy, SizingStrategyInputs } from './types';\nimport { degreeCentrality } from 'graphology-metrics/centrality/degree.js';\n\nexport function centralitySizing({\n  graph\n}: SizingStrategyInputs): SizingStrategy {\n  const ranks = degreeCentrality(graph);\n\n  return {\n    ranks,\n    getSizeForNode: (nodeID: string) => ranks[nodeID] * 20\n  };\n}\n","import { SizingStrategy, SizingStrategyInputs } from './types';\n\nexport function attributeSizing({\n  graph,\n  attribute,\n  defaultSize\n}: SizingStrategyInputs): SizingStrategy {\n  const map = new Map();\n\n  if (attribute) {\n    graph.forEachNode((id, node) => {\n      const size = node.data?.[attribute];\n      if (isNaN(size)) {\n        console.warn(`Attribute ${size} is not a number for node ${node.id}`);\n      }\n\n      map.set(id, size || 0);\n    });\n  } else {\n    console.warn('Attribute sizing configured but no attribute provided');\n  }\n\n  return {\n    getSizeForNode: (nodeId: string) => {\n      if (!attribute || !map) {\n        return defaultSize;\n      }\n\n      return map.get(nodeId);\n    }\n  };\n}\n","import { pageRankSizing } from './pageRank';\nimport { centralitySizing } from './centrality';\nimport { attributeSizing } from './attribute';\nimport { SizingStrategyInputs } from './types';\nimport { scaleLinear } from 'd3-scale';\n\nexport type SizingType =\n  | 'none'\n  | 'pagerank'\n  | 'centrality'\n  | 'attribute'\n  | 'default';\n\nexport interface NodeSizeProviderInputs extends SizingStrategyInputs {\n  /**\n   * The sizing strategy to use.\n   */\n  type: SizingType;\n}\n\nconst providers = {\n  pagerank: pageRankSizing,\n  centrality: centralitySizing,\n  attribute: attributeSizing,\n  none: ({ defaultSize }: SizingStrategyInputs) => ({\n    getSizeForNode: (_id: string) => defaultSize\n  })\n};\n\nexport function nodeSizeProvider({ type, ...rest }: NodeSizeProviderInputs) {\n  const provider = providers[type]?.(rest);\n  if (!provider && type !== 'default') {\n    throw new Error(`Unknown sizing strategy: ${type}`);\n  }\n\n  const { graph, minSize, maxSize } = rest;\n  const sizes = new Map();\n  let min;\n  let max;\n\n  graph.forEachNode((id, node) => {\n    let size;\n    if (type === 'default') {\n      size = node.size || rest.defaultSize;\n    } else {\n      size = provider.getSizeForNode(id);\n    }\n\n    if (min === undefined || size < min) {\n      min = size;\n    }\n\n    if (max === undefined || size > max) {\n      max = size;\n    }\n\n    sizes.set(id, size);\n  });\n\n  // Relatively scale the sizes\n  if (type !== 'none') {\n    const scale = scaleLinear()\n      .domain([min, max])\n      .rangeRound([minSize, maxSize]);\n\n    for (const [nodeId, size] of sizes) {\n      sizes.set(nodeId, scale(size));\n    }\n  }\n\n  return sizes;\n}\n","import Graph from 'graphology';\nimport { nodeSizeProvider, SizingType } from '../sizing';\nimport {\n  GraphEdge,\n  GraphNode,\n  InternalGraphEdge,\n  InternalGraphNode\n} from '../types';\nimport { calcLabelVisibility, LabelVisibilityType } from './visibility';\nimport { LayoutStrategy } from '../layout';\n\n/**\n * Initialize the graph with the nodes/edges.\n */\nexport function buildGraph(\n  graph: Graph,\n  nodes: GraphNode[],\n  edges: GraphEdge[]\n) {\n  // TODO: We probably want to make this\n  // smarter and only add/remove nodes\n  graph.clear();\n\n  const addedNodes = new Set<string>();\n\n  for (const node of nodes) {\n    try {\n      if (!addedNodes.has(node.id)) {\n        graph.addNode(node.id, node);\n        addedNodes.add(node.id);\n      }\n    } catch (e) {\n      console.error(`[Graph] Error adding node '${node.id}`, e);\n    }\n  }\n\n  for (const edge of edges) {\n    if (!addedNodes.has(edge.source) || !addedNodes.has(edge.target)) {\n      continue;\n    }\n\n    try {\n      graph.addEdge(edge.source, edge.target, edge);\n    } catch (e) {\n      console.error(`[Graph] Error adding edge '${edge.source} -> ${edge.target}`, e);\n    }\n  }\n\n  return graph;\n}\n\ninterface TransformGraphInput {\n  graph: Graph;\n  layout: LayoutStrategy;\n  sizingType?: SizingType;\n  labelType?: LabelVisibilityType;\n  sizingAttribute?: string;\n  minNodeSize?: number;\n  maxNodeSize?: number;\n  defaultNodeSize?: number;\n  clusterAttribute?: string;\n}\n\n/**\n * Transform the graph into a format that is easier to work with.\n */\nexport function transformGraph({\n  graph,\n  layout,\n  sizingType,\n  labelType,\n  sizingAttribute,\n  defaultNodeSize,\n  minNodeSize,\n  maxNodeSize,\n  clusterAttribute\n}: TransformGraphInput) {\n  const nodes: InternalGraphNode[] = [];\n  const edges: InternalGraphEdge[] = [];\n  const map = new Map<string, InternalGraphNode>();\n\n  const sizes = nodeSizeProvider({\n    graph,\n    type: sizingType,\n    attribute: sizingAttribute,\n    minSize: minNodeSize,\n    maxSize: maxNodeSize,\n    defaultSize: defaultNodeSize\n  });\n\n  const nodeCount = graph.nodes().length;\n  const checkVisibility = calcLabelVisibility({ nodeCount, labelType });\n\n  graph.forEachNode((id, node) => {\n    const position = layout.getNodePosition(id);\n    const { data, fill, icon, label, size, ...rest } = node;\n    const nodeSize = sizes.get(node.id);\n    const labelVisible = checkVisibility('node', nodeSize);\n\n    const nodeLinks = graph.inboundNeighbors(node.id) || [];\n    const parents = nodeLinks.map(n => graph.getNodeAttributes(n));\n\n    const n: InternalGraphNode = {\n      ...(node as any),\n      size: nodeSize,\n      labelVisible,\n      label,\n      icon,\n      fill,\n      cluster: clusterAttribute ? data[clusterAttribute] : undefined,\n      parents,\n      data: {\n        ...rest,\n        ...(data ?? {})\n      },\n      position: {\n        ...position,\n        x: position.x || 0,\n        y: position.y || 0,\n        z: position.z || 1\n      }\n    };\n\n    map.set(node.id, n);\n    nodes.push(n);\n  });\n\n  graph.forEachEdge((_id, link) => {\n    const from = map.get(link.source);\n    const to = map.get(link.target);\n\n    if (from && to) {\n      const { data, id, label, size, ...rest } = link;\n      const labelVisible = checkVisibility('edge', size);\n\n      // TODO: Fix type\n      edges.push({\n        ...link,\n        id,\n        label,\n        labelVisible,\n        size,\n        data: {\n          ...rest,\n          id,\n          ...(data || {})\n        }\n      } as any);\n    }\n  });\n\n  return {\n    nodes,\n    edges\n  };\n}\n","export const animationConfig = {\n  mass: 10,\n  tension: 1000,\n  friction: 300,\n  // Decreasing precision to improve performance from 0.00001\n  precision: 0.1\n};\n","import { Curve, Vector3 } from 'three';\n\nimport { EdgeArrowPosition } from '../symbols/Arrow';\n\n// Calculate the correct position for an arrow along a curve,\n// as well as the tangent to the curve at that point.\nexport function getArrowVectors(\n  placement: EdgeArrowPosition,\n  curve: Curve<Vector3>,\n  arrowLength: number\n): [Vector3, Vector3] {\n  const curveLength = curve.getLength();\n  const absSize = placement === 'end' ? curveLength : curveLength / 2;\n  const offset = placement === 'end' ? arrowLength / 2 : 0;\n  const u = (absSize - offset) / curveLength;\n\n  const position = curve.getPointAt(u);\n  const rotation = curve.getTangentAt(u);\n\n  return [position, rotation];\n}\n\nexport function getArrowSize(size: number): [number, number] {\n  return [size + 6, 2 + size / 1.5];\n}\n","import { Curve, LineCurve3, QuadraticBezierCurve3, Vector3 } from 'three';\nimport { InternalGraphNode, InternalVector3 } from '../types';\nimport { EdgeSubLabelPosition } from 'symbols/Edge';\n\nconst MULTI_EDGE_OFFSET_FACTOR = 0.7;\n\n/**\n * Get the midpoint given two points.\n */\nexport function getMidPoint(\n  from: InternalVector3,\n  to: InternalVector3,\n  offset = 0\n) {\n  const fromVector = new Vector3(from.x, from.y || 0, from.z || 0);\n  const toVector = new Vector3(to.x, to.y || 0, to.z || 0);\n  const midVector = new Vector3()\n    .addVectors(fromVector, toVector)\n    .divideScalar(2);\n\n  return midVector.setLength(midVector.length() + offset);\n}\n\n/**\n * Calculate the center for a quadratic bezier curve.\n *\n * 1) Find the point halfway between the start and end points of the desired curve\n * 2) Find the vector pependicular to that point\n * 3) Find the point 1/4 the distance between start and end along that vector.\n */\nexport function getCurvePoints(\n  from: Vector3,\n  to: Vector3,\n  offset = -1\n): [Vector3, Vector3, Vector3] {\n  const fromVector = from.clone();\n  const toVector = to.clone();\n  const v = new Vector3().subVectors(toVector, fromVector);\n  const vlen = v.length();\n  const vn = v.clone().normalize();\n  const vv = new Vector3().subVectors(toVector, fromVector).divideScalar(2);\n  const k = Math.abs(vn.x) % 1;\n  const b = new Vector3(-vn.y, vn.x - k * vn.z, k * vn.y).normalize();\n  const vm = new Vector3()\n    .add(fromVector)\n    .add(vv)\n    .add(b.multiplyScalar(vlen / 4).multiplyScalar(offset));\n\n  return [from, vm, to];\n}\n\n/**\n * Get the curve given two points.\n */\nexport function getCurve(\n  from: Vector3,\n  fromOffset: number,\n  to: Vector3,\n  toOffset: number,\n  curved: boolean,\n  curveOffset?: number\n): Curve<Vector3> {\n  const offsetFrom = getPointBetween(from, to, fromOffset);\n  const offsetTo = getPointBetween(to, from, toOffset);\n  return curved\n    ? new QuadraticBezierCurve3(\n      ...getCurvePoints(offsetFrom, offsetTo, curveOffset)\n    )\n    : new LineCurve3(offsetFrom, offsetTo);\n}\n\n/**\n * Create a threejs vector for a node.\n */\nexport function getVector(node: InternalGraphNode): Vector3 {\n  return new Vector3(node.position.x, node.position.y, node.position.z || 0);\n}\n\n/**\n * Get the point between two vectors.\n */\nfunction getPointBetween(from: Vector3, to: Vector3, offset: number): Vector3 {\n  const distance = from.distanceTo(to);\n  return from.clone().add(\n    to\n      .clone()\n      .sub(from)\n      .multiplyScalar(offset / distance)\n  );\n}\n\n/**\n * Given a node and a new vector set, update the node model.\n */\nexport function updateNodePosition(node: InternalGraphNode, offset: Vector3) {\n  return {\n    ...node,\n    position: {\n      ...node.position,\n      x: node.position.x + offset.x,\n      y: node.position.y + offset.y,\n      z: node.position.z + offset.z\n    }\n  };\n}\n\n/**\n * Calculate the curve offset for an edge.\n * This is used to offset edges that are parallel to each other (same source and same target).\n * This will return a curveOffset of null if the edge is not parallel to any other edges.\n */\nexport function calculateEdgeCurveOffset({ edge, edges, curved }) {\n  let updatedCurved = curved;\n  let curveOffset: number;\n\n  const parallelEdges = edges\n    .filter(e => e.target === edge.target && e.source === edge.source)\n    .map(e => e.id);\n\n  if (parallelEdges.length > 1) {\n    updatedCurved = true;\n    const edgeIndex = parallelEdges.indexOf(edge.id);\n\n    if (parallelEdges.length === 2) {\n      curveOffset =\n        edgeIndex === 0 ? MULTI_EDGE_OFFSET_FACTOR : -MULTI_EDGE_OFFSET_FACTOR;\n    } else {\n      curveOffset =\n        (edgeIndex - Math.floor(parallelEdges.length / 2)) *\n        MULTI_EDGE_OFFSET_FACTOR;\n    }\n  }\n\n  return { curved: updatedCurved, curveOffset };\n}\n\n/**\n * Calculate the offset position for a subLabel based on edge orientation and placement preference\n *\n * @param fromPosition - Position of the source node\n * @param toPosition - Position of the target node\n * @param subLabelPlacement - Whether to place the subLabel 'above' or 'below' the edge\n * @returns Object with x, y offset values for positioning the subLabel perpendicular to the edge\n *\n * The function calculates a perpendicular offset from the edge line, with the direction\n * determined by both the subLabelPlacement ('above' or 'below') and the edge direction.\n * The perpendicular angle is calculated differently based on whether the edge is going\n * left-to-right or right-to-left to maintain consistent 'above'/'below' positioning.\n */\nexport function calculateSubLabelOffset(\n  fromPosition: { x: number; y: number },\n  toPosition: { x: number; y: number },\n  subLabelPlacement?: EdgeSubLabelPosition\n): { x: number; y: number; z: number } {\n  // Calculate direction vector between nodes\n  const dx = toPosition.x - fromPosition.x;\n  const dy = toPosition.y - fromPosition.y;\n\n  // Get angle of the edge\n  const angle = Math.atan2(dy, dx);\n\n  // Calculate perpendicular angle based on edge direction and subLabelPlacement\n  const perpAngle =\n    subLabelPlacement === 'above'\n      ? dx >= 0\n        ? angle + Math.PI / 2\n        : angle - Math.PI / 2\n      : dx >= 0\n        ? angle - Math.PI / 2\n        : angle + Math.PI / 2;\n\n  // Offset distance for subLabel\n  const offsetDistance = 7;\n\n  // Calculate offset using perpendicular angle\n  const offsetX = Math.cos(perpAngle) * offsetDistance;\n  const offsetY = Math.sin(perpAngle) * offsetDistance;\n\n  return { x: offsetX, y: offsetY, z: 0 };\n}\n","import { InternalGraphNode } from '../types';\n\nexport interface CenterPositionVector {\n  x: number;\n  y: number;\n  z: number;\n  minX: number;\n  maxX: number;\n  minY: number;\n  maxY: number;\n  minZ: number;\n  maxZ: number;\n  height: number;\n  width: number;\n}\n\n/**\n * Given a collection of nodes, get the center point.\n */\nexport function getLayoutCenter(\n  nodes: InternalGraphNode[]\n): CenterPositionVector {\n  let minX = Number.POSITIVE_INFINITY;\n  let maxX = Number.NEGATIVE_INFINITY;\n  let minY = Number.POSITIVE_INFINITY;\n  let maxY = Number.NEGATIVE_INFINITY;\n  let minZ = Number.POSITIVE_INFINITY;\n  let maxZ = Number.NEGATIVE_INFINITY;\n\n  for (let node of nodes) {\n    minX = Math.min(minX, node.position.x);\n    maxX = Math.max(maxX, node.position.x);\n    minY = Math.min(minY, node.position.y);\n    maxY = Math.max(maxY, node.position.y);\n    minZ = Math.min(minZ, node.position.z);\n    maxZ = Math.max(maxZ, node.position.z);\n  }\n\n  return {\n    height: maxY - minY,\n    width: maxX - minX,\n    minX,\n    maxX,\n    minY,\n    maxY,\n    minZ,\n    maxZ,\n    x: (maxX + minX) / 2,\n    y: (maxY + minY) / 2,\n    z: (maxZ + minZ) / 2\n  };\n}\n","import { InternalGraphNode } from '../types';\nimport { CenterPositionVector, getLayoutCenter } from './layout';\n\n/**\n * Given nodes and a attribute, find all the cluster groups.\n */\nexport function buildClusterGroups(\n  nodes: InternalGraphNode[],\n  clusterAttribute?: string\n) {\n  if (!clusterAttribute) {\n    return new Map();\n  }\n\n  return nodes.reduce((entryMap, e) => {\n    const val = e.data[clusterAttribute];\n    if (val) {\n      entryMap.set(val, [...(entryMap.get(val) || []), e]);\n    }\n    return entryMap;\n  }, new Map());\n}\n\nexport interface CalculateClustersInput {\n  /**\n   * The nodes to calculate clusters for.\n   */\n  nodes: InternalGraphNode[];\n  /**\n   * The attribute to use for clustering.\n   */\n  clusterAttribute?: string;\n}\n\nexport interface ClusterGroup {\n  /**\n   * Nodes in the cluster.\n   */\n  nodes: InternalGraphNode[];\n\n  /**\n   * Center position of the cluster.\n   */\n  position: CenterPositionVector;\n\n  /**\n   * Label of the cluster.\n   */\n  label: string;\n}\n\n/**\n * Builds the cluster map.\n *\n * This function:\n *  - Builds the cluster groups\n *  - Calculates the center position of each cluster group\n *  - Creates a cluster object for each group\n */\nexport function calculateClusters({\n  nodes,\n  clusterAttribute\n}: CalculateClustersInput) {\n  const result = new Map<string, ClusterGroup>();\n\n  if (clusterAttribute) {\n    const groups = buildClusterGroups(nodes, clusterAttribute);\n    for (const [key, nodes] of groups) {\n      const position = getLayoutCenter(nodes);\n      result.set(key, {\n        label: key,\n        nodes,\n        position\n      });\n    }\n  }\n\n  return result;\n}\n","import Graph from 'graphology';\nimport { bidirectional } from 'graphology-shortest-path';\n\nexport function findPath(graph: Graph, source: string, target: string) {\n  return bidirectional(graph, source, target);\n}\n","/**\n * Check if an element is not editable (input, select, textarea, contentEditable).\n * @param element - The element to check\n * @returns True if the element is not editable, false otherwise\n */\nexport const isNotEditableElement = (element: HTMLElement) => {\n  return (\n    element.tagName !== 'INPUT' &&\n    element.tagName !== 'SELECT' &&\n    element.tagName !== 'TEXTAREA' &&\n    !element.isContentEditable\n  );\n};\n","import { createContext, useContext, FC, ReactNode } from 'react';\nimport React from 'react';\nimport { StoreApi, create, useStore as useZustandStore } from 'zustand';\nimport { useShallow } from 'zustand/shallow';\nimport {\n  InternalGraphEdge,\n  InternalGraphNode,\n  InternalGraphPosition\n} from './types';\nimport { BufferGeometry, Mesh, Vector3 } from 'three';\nimport {\n  CenterPositionVector,\n  ClusterGroup,\n  getLayoutCenter,\n  getVector,\n  updateNodePosition\n} from './utils';\nimport { isServerRender } from './utils/visibility';\nimport Graph from 'graphology';\nimport { Theme } from './themes';\n\nexport type DragReferences = {\n  [key: string]: InternalGraphNode;\n};\n\nexport interface GraphState {\n  nodes: InternalGraphNode[];\n  edges: InternalGraphEdge[];\n  graph: Graph;\n  clusters: Map<string, ClusterGroup>;\n  collapsedNodeIds?: string[];\n  centerPosition?: CenterPositionVector;\n  actives?: string[];\n  selections?: string[];\n  // The node that is currently hovered, used to disable cluster dragging\n  hoveredNodeId?: string;\n  edgeContextMenus?: Set<string>;\n  setEdgeContextMenus: (edges: Set<string>) => void;\n  edgeMeshes: Array<Mesh<BufferGeometry>>;\n  setEdgeMeshes: (edgeMeshes: Array<Mesh<BufferGeometry>>) => void;\n  draggingIds?: string[];\n  drags?: DragReferences;\n  panning?: boolean;\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  setClusters: (clusters: Map<string, ClusterGroup>) => void;\n  setPanning: (panning: boolean) => void;\n  setDrags: (drags: DragReferences) => void;\n  addDraggingId: (id: string) => void;\n  removeDraggingId: (id: string) => void;\n  setActives: (actives: string[]) => void;\n  setSelections: (selections: string[]) => void;\n  setHoveredNodeId: (hoveredNodeId: string | null) => void;\n  setNodes: (nodes: InternalGraphNode[]) => void;\n  setEdges: (edges: InternalGraphEdge[]) => void;\n  setNodePosition: (id: string, position: InternalGraphPosition) => void;\n  setCollapsedNodeIds: (nodeIds: string[]) => void;\n  setClusterPosition: (id: string, position: CenterPositionVector) => void;\n}\n\n// Create a store factory function\nexport const createStore = ({\n  actives = [],\n  selections = [],\n  collapsedNodeIds = [],\n  theme\n}: Partial<GraphState>) =>\n  create<GraphState>(set => ({\n    theme: {\n      ...theme,\n      edge: {\n        ...theme?.edge,\n        label: {\n          ...theme?.edge?.label,\n          fontSize: theme?.edge?.label?.fontSize ?? 6\n        }\n      }\n    },\n    edges: [],\n    nodes: [],\n    collapsedNodeIds,\n    clusters: new Map(),\n    panning: false,\n    draggingIds: [],\n    actives,\n    edgeContextMenus: new Set(),\n    edgeMeshes: [],\n    selections,\n    hoveredNodeId: null,\n    drags: {},\n    graph: new Graph({ multi: true }),\n    setTheme: theme => set(state => ({ ...state, theme })),\n    setClusters: clusters => set(state => ({ ...state, clusters })),\n    setEdgeContextMenus: edgeContextMenus =>\n      set(state => ({\n        ...state,\n        edgeContextMenus\n      })),\n    setEdgeMeshes: edgeMeshes => set(state => ({ ...state, edgeMeshes })),\n    setPanning: panning => set(state => ({ ...state, panning })),\n    setDrags: drags => set(state => ({ ...state, drags })),\n    addDraggingId: id =>\n      set(state => ({ ...state, draggingIds: [...state.draggingIds, id] })),\n    removeDraggingId: id =>\n      set(state => ({\n        ...state,\n        draggingIds: state.draggingIds.filter(drag => drag !== id)\n      })),\n    setActives: actives => set(state => ({ ...state, actives })),\n    setSelections: selections => set(state => ({ ...state, selections })),\n    setHoveredNodeId: hoveredNodeId =>\n      set(state => ({ ...state, hoveredNodeId })),\n    setNodes: nodes =>\n      set(state => ({\n        ...state,\n        nodes,\n        centerPosition: getLayoutCenter(nodes)\n      })),\n    setEdges: edges => set(state => ({ ...state, edges })),\n    setNodePosition: (id, position) =>\n      set(state => {\n        const node = state.nodes.find(n => n.id === id);\n        const originalVector = getVector(node);\n        const newVector = new Vector3(position.x, position.y, position.z);\n        const offset = newVector.sub(originalVector);\n        const nodes = [...state.nodes];\n\n        if (state.selections?.includes(id)) {\n          state.selections?.forEach(id => {\n            const node = state.nodes.find(n => n.id === id);\n            // Selections can contain edges:\n            if (node) {\n              const nodeIndex = state.nodes.indexOf(node);\n              nodes[nodeIndex] = updateNodePosition(node, offset);\n            }\n          });\n        } else {\n          const nodeIndex = state.nodes.indexOf(node);\n          nodes[nodeIndex] = updateNodePosition(node, offset);\n        }\n\n        return {\n          ...state,\n          drags: {\n            ...state.drags,\n            [id]: node\n          },\n          nodes\n        };\n      }),\n    setCollapsedNodeIds: (nodeIds = []) =>\n      set(state => ({ ...state, collapsedNodeIds: nodeIds })),\n    // Update the position of a cluster with nodes inside it\n    setClusterPosition: (id, position) =>\n      set(state => {\n        const clusters = new Map<string, any>(state.clusters);\n        const cluster = clusters.get(id);\n\n        if (cluster) {\n          // Calculate the offset between old and new position\n          const oldPos = cluster.position;\n          const offset = new Vector3(\n            position.x - oldPos.x,\n            position.y - oldPos.y,\n            position.z - (oldPos.z ?? 0)\n          );\n\n          // Update all nodes in the cluster\n          const nodes: InternalGraphNode[] = [...state.nodes];\n          const drags: DragReferences = { ...state.drags };\n          nodes.forEach((node, index) => {\n            if (node.cluster === id) {\n              nodes[index] = {\n                ...node,\n                position: {\n                  ...node.position,\n                  x: node.position.x + offset.x,\n                  y: node.position.y + offset.y,\n                  z: node.position.z + (offset.z ?? 0)\n                } as InternalGraphPosition\n              };\n              // Update node in drag reference\n              drags[node.id] = node;\n            }\n          });\n\n          const clusterNodes: InternalGraphNode[] = nodes.filter(\n            node => node.cluster === id\n          );\n          const newClusterPosition = getLayoutCenter(clusterNodes);\n          // Update cluster position\n          clusters.set(id, {\n            ...cluster,\n            position: newClusterPosition\n          });\n\n          return {\n            ...state,\n            drags: {\n              ...drags,\n              [id]: cluster\n            },\n            clusters,\n            nodes\n          };\n        }\n\n        return state;\n      })\n  }));\n\nconst defaultStore = createStore({});\nconst StoreContext = isServerRender\n  ? null\n  : createContext<StoreApi<GraphState>>(defaultStore);\n\nexport const Provider: FC<{\n  children: ReactNode;\n  store?: StoreApi<GraphState>;\n}> = ({ children, store = defaultStore }) => {\n  if (isServerRender) {\n    return children;\n  }\n\n  return React.createElement(StoreContext.Provider, { value: store }, children);\n};\n\nexport const useStore = <T>(selector: (state: GraphState) => T): T => {\n  const store = useContext(StoreContext);\n  // use the useShallow hook, which will return a stable reference (https://zustand.docs.pmnd.rs/migrations/migrating-to-v5)\n  return useZustandStore(store, useShallow(selector));\n};\n","import { GraphEdge, GraphNode } from '../types';\n\ninterface GetHiddenChildrenInput {\n  nodeId: string;\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n  currentHiddenNodes: GraphNode[];\n  currentHiddenEdges: GraphEdge[];\n}\n\ninterface GetVisibleIdsInput {\n  collapsedIds: string[];\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n}\n\ninterface GetExpandPathInput {\n  nodeId: string;\n  edges: GraphEdge[];\n  visibleEdgeIds: string[];\n}\n\n/**\n * Get the children of a node id that is hidden.\n */\nfunction getHiddenChildren({\n  nodeId,\n  nodes,\n  edges,\n  currentHiddenNodes,\n  currentHiddenEdges\n}: GetHiddenChildrenInput) {\n  const hiddenNodes: GraphNode[] = [];\n  const hiddenEdges: GraphEdge[] = [];\n  const curHiddenNodeIds = currentHiddenNodes.map(n => n.id);\n  const curHiddenEdgeIds = currentHiddenEdges.map(e => e.id);\n\n  const outboundEdges = edges.filter(l => l.source === nodeId);\n  const outboundEdgeNodeIds = outboundEdges.map(l => l.target);\n\n  hiddenEdges.push(...outboundEdges);\n  for (const outboundEdgeNodeId of outboundEdgeNodeIds) {\n    const incomingEdges = edges.filter(\n      l => l.target === outboundEdgeNodeId && l.source !== nodeId\n    );\n    let hideNode = false;\n\n    // Check to see if any other edge is coming into this node\n    if (incomingEdges.length === 0) {\n      hideNode = true;\n    } else if (\n      incomingEdges.length > 0 &&\n      !curHiddenNodeIds.includes(outboundEdgeNodeId)\n    ) {\n      // If all inbound links are hidden, hide this node as well\n      const inboundNodeLinkIds = incomingEdges.map(l => l.id);\n      if (inboundNodeLinkIds.every(i => curHiddenEdgeIds.includes(i))) {\n        hideNode = true;\n      }\n    }\n    if (hideNode) {\n      // Need to hide this node and any children of this node\n      const node = nodes.find(n => n.id === outboundEdgeNodeId);\n      if (node) {\n        hiddenNodes.push(node);\n      }\n      const nested = getHiddenChildren({\n        nodeId: outboundEdgeNodeId,\n        nodes,\n        edges,\n        currentHiddenEdges: hiddenEdges,\n        currentHiddenNodes: hiddenNodes\n      });\n      hiddenEdges.push(...nested.hiddenEdges);\n      hiddenNodes.push(...nested.hiddenNodes);\n    }\n  }\n\n  const uniqueEdges: GraphEdge[] = Object.values(\n    hiddenEdges.reduce(\n      (acc, next) => ({\n        ...acc,\n        [next.id]: next\n      }),\n      {}\n    )\n  );\n\n  const uniqueNodes: GraphNode[] = Object.values(\n    hiddenNodes.reduce(\n      (acc, next) => ({\n        ...acc,\n        [next.id]: next\n      }),\n      {}\n    )\n  );\n\n  return {\n    hiddenEdges: uniqueEdges,\n    hiddenNodes: uniqueNodes\n  };\n}\n\n/**\n * Get the visible nodes and edges given a collapsed set of ids.\n */\nexport const getVisibleEntities = ({\n  collapsedIds,\n  nodes,\n  edges\n}: GetVisibleIdsInput) => {\n  const curHiddenNodes = [];\n  const curHiddenEdges = [];\n\n  for (const collapsedId of collapsedIds) {\n    const { hiddenEdges, hiddenNodes } = getHiddenChildren({\n      nodeId: collapsedId,\n      nodes,\n      edges,\n      currentHiddenEdges: curHiddenEdges,\n      currentHiddenNodes: curHiddenNodes\n    });\n\n    curHiddenNodes.push(...hiddenNodes);\n    curHiddenEdges.push(...hiddenEdges);\n  }\n\n  const hiddenNodeIds = curHiddenNodes.map(n => n.id);\n  const hiddenEdgeIds = curHiddenEdges.map(e => e.id);\n  const visibleNodes = nodes.filter(n => !hiddenNodeIds.includes(n.id));\n  const visibleEdges = edges.filter(e => !hiddenEdgeIds.includes(e.id));\n\n  return {\n    visibleNodes,\n    visibleEdges\n  };\n};\n\n/**\n * Get the path to expand a node.\n */\nexport const getExpandPath = ({\n  nodeId,\n  edges,\n  visibleEdgeIds\n}: GetExpandPathInput) => {\n  const parentIds = [];\n  const inboundEdges = edges.filter(l => l.target === nodeId);\n  const inboundEdgeIds = inboundEdges.map(e => e.id);\n  const hasVisibleInboundEdge = inboundEdgeIds.some(id =>\n    visibleEdgeIds.includes(id)\n  );\n\n  if (hasVisibleInboundEdge) {\n    // If there is a visible edge to this node, that means the node is\n    // visible so no parents need to be expanded\n    return parentIds;\n  }\n\n  const inboundEdgeNodeIds = inboundEdges.map(l => l.source);\n  let addedParent = false;\n\n  for (const inboundNodeId of inboundEdgeNodeIds) {\n    if (!addedParent) {\n      // Only want to expand a single path to the node, so if there\n      // are multiple hidden incoming edges, only expand the first\n      // to reduce how many nodes are expanded to get to the node\n      parentIds.push(\n        ...[\n          inboundNodeId,\n          ...getExpandPath({ nodeId: inboundNodeId, edges, visibleEdgeIds })\n        ]\n      );\n      addedParent = true;\n    }\n  }\n\n  return parentIds;\n};\n","import React, { useCallback } from 'react';\nimport { GraphEdge, GraphNode } from '../types';\nimport { getExpandPath, getVisibleEntities } from './utils';\n\nexport interface UseCollapseProps {\n  /**\n   * Current collapsed node ids.\n   */\n  collapsedNodeIds?: string[];\n\n  /**\n   * Node data.\n   */\n  nodes?: GraphNode[];\n\n  /**\n   * Edge data.\n   */\n  edges?: GraphEdge[];\n}\n\nexport interface CollpaseResult {\n  /**\n   * Determine if a node is currently collapsed\n   */\n  getIsCollapsed: (nodeId: string) => boolean;\n\n  /**\n   * Return a list of ids required to expand in order to view the provided node\n   */\n  getExpandPathIds: (nodeId: string) => string[];\n}\n\nexport const useCollapse = ({\n  collapsedNodeIds = [],\n  nodes = [],\n  edges = []\n}: UseCollapseProps): CollpaseResult => {\n  const getIsCollapsed = useCallback(\n    (nodeId: string) => {\n      const { visibleNodes } = getVisibleEntities({\n        nodes,\n        edges,\n        collapsedIds: collapsedNodeIds\n      });\n      const visibleNodeIds = visibleNodes.map(n => n.id);\n\n      return !visibleNodeIds.includes(nodeId);\n    },\n    [collapsedNodeIds, edges, nodes]\n  );\n\n  const getExpandPathIds = useCallback(\n    (nodeId: string) => {\n      const { visibleEdges } = getVisibleEntities({\n        nodes,\n        edges,\n        collapsedIds: collapsedNodeIds\n      });\n      const visibleEdgeIds = visibleEdges.map(e => e.id);\n\n      return getExpandPath({ nodeId, edges, visibleEdgeIds });\n    },\n    [collapsedNodeIds, edges, nodes]\n  );\n\n  return {\n    getIsCollapsed,\n    getExpandPathIds\n  };\n};\n","import { useRef, useCallback, useEffect, useMemo } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { PerspectiveCamera } from 'three';\nimport { SizingType } from './sizing';\nimport {\n  LayoutTypes,\n  layoutProvider,\n  LayoutStrategy,\n  LayoutOverrides\n} from './layout';\nimport { LabelVisibilityType, calcLabelVisibility } from './utils/visibility';\nimport { tick } from './layout/layoutUtils';\nimport { GraphEdge, GraphNode, InternalGraphNode } from './types';\nimport { buildGraph, transformGraph } from './utils/graph';\nimport { DragReferences, useStore } from './store';\nimport { getVisibleEntities } from './collapse';\nimport { calculateClusters } from './utils/cluster';\n\nexport interface GraphInputs {\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n  collapsedNodeIds?: string[];\n  layoutType?: LayoutTypes;\n  sizingType?: SizingType;\n  labelType?: LabelVisibilityType;\n  sizingAttribute?: string;\n  selections?: string[];\n  actives?: string[];\n  clusterAttribute?: string;\n  defaultNodeSize?: number;\n  minNodeSize?: number;\n  maxNodeSize?: number;\n  constrainDragging?: boolean;\n  layoutOverrides?: LayoutOverrides;\n}\n\nexport const useGraph = ({\n  layoutType,\n  sizingType,\n  labelType,\n  sizingAttribute,\n  clusterAttribute,\n  selections,\n  nodes,\n  edges,\n  actives,\n  collapsedNodeIds,\n  defaultNodeSize,\n  maxNodeSize,\n  minNodeSize,\n  layoutOverrides,\n  constrainDragging\n}: GraphInputs) => {\n  const graph = useStore(state => state.graph);\n  const clusters = useStore(state => state.clusters);\n  const storedNodes = useStore(state => state.nodes);\n  const setClusters = useStore(state => state.setClusters);\n  const stateCollapsedNodeIds = useStore(state => state.collapsedNodeIds);\n  const setEdges = useStore(state => state.setEdges);\n  const stateNodes = useStore(state => state.nodes);\n  const setNodes = useStore(state => state.setNodes);\n  const setSelections = useStore(state => state.setSelections);\n  const setActives = useStore(state => state.setActives);\n  const drags = useStore(state => state.drags);\n  const setDrags = useStore(state => state.setDrags);\n  const setCollapsedNodeIds = useStore(state => state.setCollapsedNodeIds);\n  const layoutMounted = useRef<boolean>(false);\n  const layout = useRef<LayoutStrategy | null>(null);\n  const camera = useThree(state => state.camera) as PerspectiveCamera;\n  const dragRef = useRef<DragReferences>(drags);\n  const clustersRef = useRef<any>([]);\n\n  // When a new node is added, remove the dragged position of the cluster nodes to put new node in the right place\n  useEffect(() => {\n    if (!clusterAttribute) {\n      return;\n    }\n\n    const existedNodesIds = storedNodes.map(n => n.id);\n    const newNode = nodes.find(n => !existedNodesIds.includes(n.id));\n    if (newNode) {\n      const clusterName = newNode.data[clusterAttribute];\n      const cluster = clusters.get(clusterName);\n      const drags = { ...dragRef.current };\n\n      cluster?.nodes?.forEach(node => (drags[node.id] = undefined));\n\n      dragRef.current = drags;\n      setDrags(drags);\n    }\n  }, [storedNodes, nodes, clusterAttribute, clusters, setDrags]);\n\n  // Calculate the visible entities\n  const { visibleEdges, visibleNodes } = useMemo(\n    () =>\n      getVisibleEntities({\n        collapsedIds: stateCollapsedNodeIds,\n        nodes,\n        edges\n      }),\n    [stateCollapsedNodeIds, nodes, edges]\n  );\n\n  // Store node positions inside drags state\n  const updateDrags = useCallback(\n    (nodes: InternalGraphNode[]) => {\n      const drags = { ...dragRef.current };\n      nodes.forEach(node => (drags[node.id] = node));\n      dragRef.current = drags;\n      setDrags(drags);\n    },\n    [setDrags]\n  );\n\n  const updateLayout = useCallback(\n    async (curLayout?: any) => {\n      // Cache the layout provider\n      layout.current =\n        curLayout ||\n        layoutProvider({\n          ...layoutOverrides,\n          type: layoutType,\n          graph,\n          drags: dragRef.current,\n          clusters: clustersRef?.current,\n          clusterAttribute\n        });\n\n      // Run the layout\n      await tick(layout.current);\n\n      // Transform the graph\n      const result = transformGraph({\n        graph,\n        layout: layout.current,\n        sizingType,\n        labelType,\n        sizingAttribute,\n        maxNodeSize,\n        minNodeSize,\n        defaultNodeSize,\n        clusterAttribute\n      });\n\n      // Calculate clusters\n      const newClusters = calculateClusters({\n        nodes: result.nodes,\n        clusterAttribute\n      });\n\n      // Do not decrease the cluster size is the number of nodes is the same\n      if (constrainDragging) {\n        newClusters.forEach(cluster => {\n          const prevCluster = clustersRef.current.get(cluster.label);\n          if (prevCluster?.nodes.length === cluster.nodes.length) {\n            cluster.position =\n              clustersRef.current?.get(cluster.label)?.position ??\n              cluster.position;\n          }\n        });\n      }\n\n      // Set our store outputs\n      setEdges(result.edges);\n      setNodes(result.nodes);\n      setClusters(newClusters);\n      if (clusterAttribute) {\n        // Set drag positions for nodes to prevent them from being moved by the layout update\n        updateDrags(result.nodes);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      layoutOverrides,\n      layoutType,\n      clusterAttribute,\n      sizingType,\n      labelType,\n      sizingAttribute,\n      maxNodeSize,\n      minNodeSize,\n      defaultNodeSize,\n      setEdges,\n      setNodes,\n      setClusters\n    ]\n  );\n\n  // Transient updates\n  useEffect(() => {\n    dragRef.current = drags;\n  }, [drags, clusterAttribute, updateLayout]);\n\n  // Transient cluster state\n  useEffect(() => {\n    clustersRef.current = clusters;\n  }, [clusters]);\n\n  useEffect(() => {\n    // When the camera position/zoom changes, update the label visibility\n    const nodes = stateNodes.map(node => ({\n      ...node,\n      labelVisible: calcLabelVisibility({\n        nodeCount: stateNodes?.length,\n        labelType,\n        camera,\n        nodePosition: node?.position\n      })('node', node?.size)\n    }));\n\n    // Determine if the label visibility has changed\n    const isVisibilityUpdated = nodes.some(\n      (node, i) => node.labelVisible !== stateNodes[i].labelVisible\n    );\n\n    // Update the nodes if the label visibility has changed\n    if (isVisibilityUpdated) {\n      setNodes(nodes);\n    }\n  }, [camera, camera.zoom, camera.position.z, setNodes, stateNodes, labelType]);\n\n  useEffect(() => {\n    // Let's set the store selections so its easier to access\n    if (layoutMounted.current) {\n      setSelections(selections);\n    }\n  }, [selections, setSelections]);\n\n  useEffect(() => {\n    // Let's set the store actives so its easier to access\n    if (layoutMounted.current) {\n      setActives(actives);\n    }\n  }, [actives, setActives]);\n\n  // Create the nggraph graph object\n  useEffect(() => {\n    async function update() {\n      layoutMounted.current = false;\n      buildGraph(graph, visibleNodes, visibleEdges);\n      await updateLayout();\n      // rqf to prevent race condition\n      requestAnimationFrame(() => (layoutMounted.current = true));\n    }\n\n    update();\n    // eslint-disable-next-line\n  }, [visibleNodes, visibleEdges]);\n\n  useEffect(() => {\n    // Let's set the store collapsedNodeIds so its easier to access\n    if (layoutMounted.current) {\n      setCollapsedNodeIds(collapsedNodeIds);\n    }\n  }, [collapsedNodeIds, setCollapsedNodeIds]);\n\n  // Update layout on type changes\n  useEffect(() => {\n    if (layoutMounted.current) {\n      // When a update is changed, discard all the previous drag positions\n      // NOTE: This sets the transient and the state\n      dragRef.current = {};\n      setDrags({});\n\n      // Recalculate the layout\n      updateLayout();\n    }\n  }, [layoutType, updateLayout, setDrags]);\n\n  // Update layout on size, label changes\n  useEffect(() => {\n    if (layoutMounted.current) {\n      updateLayout(layout.current);\n    }\n  }, [sizingType, sizingAttribute, labelType, updateLayout]);\n\n  return {\n    updateLayout\n  };\n};\n","import React, { FC, useMemo } from 'react';\nimport { Billboard, Text } from '@react-three/drei';\nimport { Color, ColorRepresentation, Euler } from 'three';\nimport ellipsize from 'ellipsize';\n\nexport interface LabelProps {\n  /**\n   * Text to render.\n   */\n  text: string;\n\n  /**\n   * Font URL.\n   * Reference: https://github.com/reaviz/reagraph/issues/23\n   */\n  fontUrl?: string;\n\n  /**\n   * Size of the font.\n   */\n  fontSize?: number;\n\n  /**\n   * Color of the text.\n   */\n  color?: ColorRepresentation;\n\n  /**\n   * Stroke of the text.\n   */\n  stroke?: ColorRepresentation;\n\n  /**\n   * Opacity for the label.\n   */\n  opacity?: number;\n\n  /**\n   * The lenth of which to start the ellipsis.\n   */\n  ellipsis?: number;\n\n  /**\n   * Whether the label is active ( dragging, hover, focus ).\n   */\n  active?: boolean;\n\n  /**\n   * Rotation of the label.\n   */\n  rotation?: Euler | [number, number, number];\n}\n\nexport const Label: FC<LabelProps> = ({\n  text,\n  fontSize = 7,\n  fontUrl,\n  color = '#2A6475',\n  opacity = 1,\n  stroke,\n  active,\n  ellipsis = 75,\n  rotation\n}) => {\n  const shortText = ellipsis && !active ? ellipsize(text, ellipsis) : text;\n  const normalizedColor = useMemo(() => new Color(color), [color]);\n  const normalizedStroke = useMemo(\n    () => (stroke ? new Color(stroke) : undefined),\n    [stroke]\n  );\n\n  return (\n    <Billboard position={[0, 0, 1]}>\n      <Text\n        font={fontUrl}\n        fontSize={fontSize}\n        color={normalizedColor}\n        fillOpacity={opacity}\n        textAlign=\"center\"\n        outlineWidth={stroke ? 1 : 0}\n        outlineColor={normalizedStroke}\n        depthOffset={0}\n        maxWidth={100}\n        overflowWrap=\"break-word\"\n        rotation={rotation}\n      >\n        {shortText}\n      </Text>\n    </Billboard>\n  );\n};\n","import { useThree } from '@react-three/fiber';\nimport { useMemo } from 'react';\nimport { useGesture } from '@use-gesture/react';\nimport { Vector2, Vector3, Plane } from 'three';\nimport { InternalGraphPosition } from '../types';\nimport { CenterPositionVector } from '../utils/layout';\n\ninterface DragParams {\n  draggable: boolean;\n  position: InternalGraphPosition;\n  bounds?: CenterPositionVector;\n  set: (position: Vector3) => void;\n  onDragStart: () => void;\n  onDragEnd: () => void;\n}\n\nexport const useDrag = ({\n  draggable,\n  set,\n  position,\n  bounds,\n  onDragStart,\n  onDragEnd\n}: DragParams) => {\n  const camera = useThree(state => state.camera);\n  const raycaster = useThree(state => state.raycaster);\n  const size = useThree(state => state.size);\n  const gl = useThree(state => state.gl);\n\n  // Reference: https://codesandbox.io/s/react-three-draggable-cxu37\n  const { mouse2D, mouse3D, offset, normal, plane } = useMemo(\n    () => ({\n      // Normalized 2D screen space mouse coords\n      mouse2D: new Vector2(),\n      // 3D world space mouse coords\n      mouse3D: new Vector3(),\n      // Drag point offset from object origin\n      offset: new Vector3(),\n      // Normal of the drag plane\n      normal: new Vector3(),\n      // Drag plane\n      plane: new Plane()\n    }),\n    []\n  );\n\n  const clientRect = useMemo(\n    () => gl.domElement.getBoundingClientRect(),\n    [gl.domElement]\n  );\n\n  return useGesture(\n    {\n      onDragStart: ({ event }) => {\n        // @ts-ignore\n        const { eventObject, point } = event;\n\n        // Save the offset of click point from object origin\n        eventObject.getWorldPosition(offset).sub(point);\n\n        // Set initial 3D cursor position (needed for onDrag plane calculation)\n        mouse3D.copy(point);\n\n        // Run user callback\n        onDragStart();\n      },\n      onDrag: ({ xy, buttons, cancel }) => {\n        // If the left mouse button is not pressed, cancel the drag\n        if (buttons !== 1) {\n          cancel();\n          return;\n        }\n        // Compute normalized mouse coordinates (screen space)\n        const nx = ((xy[0] - (clientRect?.left ?? 0)) / size.width) * 2 - 1;\n        const ny = -((xy[1] - (clientRect?.top ?? 0)) / size.height) * 2 + 1;\n\n        // Unlike the mouse from useThree, this works offscreen\n        mouse2D.set(nx, ny);\n\n        // Update raycaster (otherwise it doesn't track offscreen)\n        raycaster.setFromCamera(mouse2D, camera);\n\n        // The drag plane is normal to the camera view\n        camera.getWorldDirection(normal).negate();\n\n        // Find the plane that's normal to the camera and contains our drag point\n        plane.setFromNormalAndCoplanarPoint(normal, mouse3D);\n\n        // Find the point of intersection\n        raycaster.ray.intersectPlane(plane, mouse3D);\n\n        // Update the object position with the original offset\n        const updated = new Vector3(position.x, position.y, position.z)\n          .copy(mouse3D)\n          .add(offset);\n\n        // If there's a cluster, clamp the position within its circular bounds\n        if (bounds) {\n          const center = new Vector3(\n            (bounds.minX + bounds.maxX) / 2,\n            (bounds.minY + bounds.maxY) / 2,\n            (bounds.minZ + bounds.maxZ) / 2\n          );\n          const radius = (bounds.maxX - bounds.minX) / 2;\n\n          // Calculate direction from center to updated position\n          const direction = updated.clone().sub(center);\n          const distance = direction.length();\n\n          // If outside the circle, clamp to the circle's edge\n          if (distance > radius) {\n            direction.normalize().multiplyScalar(radius);\n            updated.copy(center).add(direction);\n          }\n        }\n\n        return set(updated);\n      },\n      onDragEnd\n    },\n    { drag: { enabled: draggable, threshold: 10 } }\n  );\n};\n","import { useCallback, useRef } from 'react';\nimport type { ThreeEvent } from '@react-three/fiber';\n\nexport interface HoverIntentOptions {\n  interval?: number;\n  sensitivity?: number;\n  timeout?: number;\n  disabled?: boolean;\n  onPointerOver: (event: ThreeEvent<PointerEvent>) => void;\n  onPointerOut: (event: ThreeEvent<PointerEvent>) => void;\n}\n\nexport interface HoverIntentResult {\n  pointerOut: (event: ThreeEvent<PointerEvent>) => void;\n  pointerOver: (event: ThreeEvent<PointerEvent>) => void;\n}\n\n/**\n * Hover intent identifies if the user actually is\n * intending to over by measuring the position of the mouse\n * once a pointer enters and determining if in a duration if\n * the mouse moved inside a certain threshold and fires the events.\n */\nexport const useHoverIntent = ({\n  sensitivity = 7,\n  interval = 50,\n  timeout = 0,\n  disabled,\n  onPointerOver,\n  onPointerOut\n}: HoverIntentOptions | undefined): HoverIntentResult => {\n  const mouseOver = useRef<boolean>(false);\n  const timer = useRef<any | null>(null);\n  const state = useRef<number>(0);\n  const coords = useRef({\n    x: null,\n    y: null,\n    px: null,\n    py: null\n  });\n\n  const onMouseMove = useCallback((event: MouseEvent) => {\n    coords.current.x = event.clientX;\n    coords.current.y = event.clientY;\n  }, []);\n\n  const comparePosition = useCallback(\n    (event: ThreeEvent<PointerEvent>) => {\n      timer.current = clearTimeout(timer.current);\n      const { px, x, py, y } = coords.current;\n\n      if (Math.abs(px - x) + Math.abs(py - y) < sensitivity) {\n        state.current = 1;\n        onPointerOver(event);\n      } else {\n        coords.current.px = x;\n        coords.current.py = y;\n        timer.current = setTimeout(() => comparePosition(event), interval);\n      }\n    },\n    [interval, onPointerOver, sensitivity]\n  );\n\n  const cleanup = useCallback(() => {\n    clearTimeout(timer.current);\n    if (typeof window !== 'undefined') {\n      document.removeEventListener('mousemove', onMouseMove, false);\n    }\n  }, [onMouseMove]);\n\n  const pointerOver = useCallback(\n    (event: ThreeEvent<PointerEvent>) => {\n      if (!disabled) {\n        mouseOver.current = true;\n        cleanup();\n\n        if (state.current !== 1) {\n          coords.current.px = event.pointer.x;\n          coords.current.py = event.pointer.y;\n\n          if (typeof window !== 'undefined') {\n            document.addEventListener('mousemove', onMouseMove, false);\n          }\n\n          timer.current = setTimeout(() => comparePosition(event), timeout);\n        }\n      }\n    },\n    [cleanup, comparePosition, disabled, onMouseMove, timeout]\n  );\n\n  const delay = useCallback(\n    (event: ThreeEvent<PointerEvent>) => {\n      timer.current = clearTimeout(timer.current);\n      state.current = 0;\n      onPointerOut(event);\n    },\n    [onPointerOut]\n  );\n\n  const pointerOut = useCallback(\n    (event: ThreeEvent<PointerEvent>) => {\n      mouseOver.current = false;\n      cleanup();\n\n      if (state.current === 1) {\n        timer.current = setTimeout(() => delay(event), timeout);\n      }\n    },\n    [cleanup, delay, timeout]\n  );\n\n  return {\n    pointerOver,\n    pointerOut\n  };\n};\n","import CameraControls from 'camera-controls';\nimport { createContext, useContext } from 'react';\n\nexport interface CameraControlsContextProps {\n  /**\n   * The camera controls object.\n   */\n  controls: CameraControls | null;\n\n  /**\n   * A function that resets the camera controls.\n   * If the optional `animated` argument is true, the reset is animated.\n   */\n  resetControls: (animated?: boolean) => void;\n\n  /**\n   * A function that zooms in the camera.\n   */\n  zoomIn: () => void;\n\n  /**\n   * A function that zooms out the camera.\n   */\n  zoomOut: () => void;\n\n  /**\n   * A function that dollies in the camera.\n   */\n  dollyIn: (distance?: number) => void;\n\n  /**\n   * A function that dollies out the camera.\n   */\n  dollyOut: (distance?: number) => void;\n\n  /**\n   * A function that pans the camera to the left.\n   */\n  panLeft: () => void;\n\n  /**\n   * A function that pans the camera to the right.\n   */\n  panRight: () => void;\n\n  /**\n   * A function that pans the camera upwards.\n   */\n  panUp: () => void;\n\n  /**\n   * A function that pans the camera downwards.\n   */\n  panDown: () => void;\n\n  /**\n   * A function that freezes the camera.\n   */\n  freeze: () => void;\n\n  /**\n   * A function that unfreezes the camera.\n   */\n  unFreeze: () => void;\n}\n\nexport const CameraControlsContext = createContext<CameraControlsContextProps>({\n  controls: null,\n  resetControls: () => undefined,\n  zoomIn: () => undefined,\n  zoomOut: () => undefined,\n  dollyIn: () => undefined,\n  dollyOut: () => undefined,\n  panLeft: () => undefined,\n  panRight: () => undefined,\n  panUp: () => undefined,\n  panDown: () => undefined,\n  freeze: () => undefined,\n  unFreeze: () => undefined\n});\n\nexport const useCameraControls = () => {\n  const context = useContext(CameraControlsContext);\n\n  if (context === undefined) {\n    throw new Error(\n      '`useCameraControls` hook must be used within a `ControlsProvider` component'\n    );\n  }\n\n  return context;\n};\n","import React, { FC } from 'react';\nimport { a, useSpring } from '@react-spring/three';\nimport { Color, DoubleSide } from 'three';\n\nimport { Theme } from '../../themes';\nimport { animationConfig } from '../../utils';\n\nexport interface RingProps {\n  outerRadius: number;\n  innerRadius: number;\n  padding: number;\n  normalizedFill: Color;\n  normalizedStroke: Color;\n  opacity: number;\n  animated: boolean;\n  theme: Theme;\n}\n\nexport const Ring: FC<RingProps> = ({\n  outerRadius,\n  innerRadius,\n  padding,\n  normalizedFill,\n  normalizedStroke,\n  opacity,\n  animated,\n  theme\n}) => {\n  const { opacity: springOpacity } = useSpring({\n    from: { opacity: 0 },\n    to: { opacity },\n    config: {\n      ...animationConfig,\n      duration: animated ? undefined : 0\n    }\n  });\n\n  return (\n    <>\n      <mesh>\n        <ringGeometry attach=\"geometry\" args={[outerRadius, 0, 128]} />\n        <a.meshBasicMaterial\n          attach=\"material\"\n          color={normalizedFill}\n          transparent={true}\n          depthTest={false}\n          opacity={theme.cluster?.fill ? springOpacity : 0}\n          side={DoubleSide}\n          fog={true}\n        />\n      </mesh>\n      <mesh>\n        <ringGeometry\n          attach=\"geometry\"\n          args={[outerRadius, innerRadius + padding, 128]}\n        />\n        <a.meshBasicMaterial\n          attach=\"material\"\n          color={normalizedStroke}\n          transparent={true}\n          depthTest={false}\n          opacity={springOpacity}\n          side={DoubleSide}\n          fog={true}\n        />\n      </mesh>\n    </>\n  );\n};\n","import React, { FC, useMemo, useState } from 'react';\nimport { ClusterGroup, animationConfig } from '../utils';\nimport { useSpring, a } from '@react-spring/three';\nimport { Color } from 'three';\nimport { useStore } from '../store';\nimport { Label } from './Label';\nimport { useCursor } from '@react-three/drei';\nimport type { ThreeEvent } from '@react-three/fiber';\nimport { useDrag } from '../utils/useDrag';\nimport { useHoverIntent } from '../utils/useHoverIntent';\nimport { useCameraControls } from '../CameraControls/useCameraControls';\nimport { Vector3 } from 'three';\nimport { ClusterRenderer } from '../types';\nimport { Ring } from './clusters/Ring';\n\nexport type ClusterEventArgs = Omit<ClusterGroup, 'position'>;\n\nexport interface ClusterProps extends ClusterGroup {\n  /**\n   * Whether the circle should be animated.\n   */\n  animated?: boolean;\n\n  /**\n   * The radius of the circle. Default 1.\n   */\n  radius?: number;\n\n  /**\n   * The padding of the circle. Default 20.\n   */\n  padding?: number;\n\n  /**\n   * The url for the label font.\n   */\n  labelFontUrl?: string;\n\n  /**\n   * Whether the node is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * When the cluster was clicked.\n   */\n  onClick?: (cluster: ClusterEventArgs, event: ThreeEvent<MouseEvent>) => void;\n\n  /**\n   * When a cluster receives a pointer over event.\n   */\n  onPointerOver?: (\n    cluster: ClusterEventArgs,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * When cluster receives a pointer leave event.\n   */\n  onPointerOut?: (\n    cluster: ClusterEventArgs,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * Whether the cluster is draggable\n   */\n  draggable?: boolean;\n\n  /**\n   * Triggered after a cluster was dragged\n   */\n  onDragged?: (cluster: ClusterEventArgs) => void;\n\n  /**\n   * Render a custom cluster label\n   */\n  onRender?: ClusterRenderer;\n}\n\nexport const Cluster: FC<ClusterProps> = ({\n  animated,\n  position,\n  padding = 40,\n  labelFontUrl,\n  disabled,\n  radius = 2,\n  nodes,\n  label,\n  onClick,\n  onPointerOver,\n  onPointerOut,\n  draggable = false,\n  onDragged,\n  onRender\n}) => {\n  const theme = useStore(state => state.theme);\n  const rad = Math.max(position.width, position.height) / 2;\n  const offset = rad - radius + padding;\n  const [active, setActive] = useState<boolean>(false);\n  const center = useStore(state => state.centerPosition);\n  const nodesState = useStore(state => state.nodes);\n  const cameraControls = useCameraControls();\n  const draggingIds = useStore(state => state.draggingIds);\n  const isDraggingCurrent = draggingIds.includes(label);\n  const isDragging = draggingIds.length > 0;\n\n  const isActive = useStore(state =>\n    state.actives?.some(id => nodes.some(n => n.id === id))\n  );\n  const hoveredNodeId = useStore(state => state.hoveredNodeId);\n\n  const isSelected = useStore(state =>\n    state.selections?.some(id => nodes.some(n => n.id === id))\n  );\n\n  const hasSelections = useStore(state => state.selections?.length > 0);\n\n  const opacity = hasSelections\n    ? isSelected || active || isActive\n      ? theme.cluster?.selectedOpacity\n      : theme.cluster?.inactiveOpacity\n    : theme.cluster?.opacity;\n\n  const labelPosition: [number, number, number] = useMemo(() => {\n    const defaultPosition: [number, number, number] = [0, -offset, 2];\n    const themeOffset = theme.cluster?.label?.offset;\n    if (themeOffset) {\n      return [\n        defaultPosition[0] - themeOffset[0],\n        defaultPosition[1] - themeOffset[1],\n        defaultPosition[2] - themeOffset[2]\n      ];\n    }\n\n    return defaultPosition;\n  }, [offset, theme.cluster?.label?.offset]);\n\n  const { circlePosition } = useSpring({\n    from: {\n      circlePosition: [center.x, center.y, -1] as [number, number, number]\n    },\n    to: {\n      circlePosition: position\n        ? ([position.x, position.y, -1] as [number, number, number])\n        : ([0, 0, -1] as [number, number, number])\n    },\n    config: {\n      ...animationConfig,\n      duration: animated && !isDragging ? undefined : 0\n    }\n  });\n\n  const normalizedStroke = useMemo(\n    () => new Color(theme.cluster?.stroke),\n    [theme.cluster?.stroke]\n  );\n\n  const normalizedFill = useMemo(\n    () => new Color(theme.cluster?.fill),\n    [theme.cluster?.fill]\n  );\n\n  const addDraggingId = useStore(state => state.addDraggingId);\n  const removeDraggingId = useStore(state => state.removeDraggingId);\n  const setClusterPosition = useStore(state => state.setClusterPosition);\n\n  // Define the drag event handlers for the cluster\n  const bind = useDrag({\n    draggable: draggable && !hoveredNodeId,\n    position: {\n      x: position.x,\n      y: position.y,\n      z: -1\n    } as any,\n    set: (pos: Vector3) => setClusterPosition(label, pos as any),\n    onDragStart: () => {\n      addDraggingId(label);\n      setActive(true);\n    },\n    onDragEnd: () => {\n      removeDraggingId(label);\n      setActive(false);\n      // Get nodes from store with updated position after dragging\n      const updatedClusterNodes = nodesState.filter(n => n.cluster === label);\n      onDragged?.({ nodes: updatedClusterNodes, label });\n    }\n  });\n\n  // Set the cursor to pointer when the cluster is active and not dragging\n  useCursor(active && !isDragging && onClick !== undefined, 'pointer');\n  // Set the cursor to grab when the cluster is active and draggable\n  useCursor(\n    active && draggable && !isDraggingCurrent && onClick === undefined,\n    'grab'\n  );\n  // Set the cursor to grabbing when the cluster is dragging\n  useCursor(isDraggingCurrent, 'grabbing');\n\n  const { pointerOver, pointerOut } = useHoverIntent({\n    disabled,\n    onPointerOver: (event: ThreeEvent<PointerEvent>) => {\n      setActive(true);\n      cameraControls.freeze();\n      onPointerOver?.(\n        {\n          nodes,\n          label\n        },\n        event\n      );\n    },\n    onPointerOut: (event: ThreeEvent<PointerEvent>) => {\n      setActive(false);\n      cameraControls.unFreeze();\n      onPointerOut?.(\n        {\n          nodes,\n          label\n        },\n        event\n      );\n    }\n  });\n\n  const cluster = useMemo(\n    () =>\n      theme.cluster && (\n        <a.group\n          userData={{ id: label, type: 'cluster' }}\n          position={circlePosition as any}\n          onPointerOver={pointerOver}\n          onPointerOut={pointerOut}\n          onClick={(event: ThreeEvent<MouseEvent>) => {\n            if (!disabled && !isDraggingCurrent) {\n              onClick?.({ nodes, label }, event);\n            }\n          }}\n          {...(bind() as any)}\n        >\n          {onRender ? (\n            onRender({\n              label: {\n                position: labelPosition,\n                text: label,\n                opacity: opacity,\n                fontUrl: labelFontUrl\n              },\n              opacity,\n              outerRadius: offset,\n              innerRadius: rad,\n              padding,\n              theme\n            })\n          ) : (\n            <>\n              <Ring\n                outerRadius={offset}\n                innerRadius={rad}\n                padding={padding}\n                normalizedFill={normalizedFill}\n                normalizedStroke={normalizedStroke}\n                opacity={opacity}\n                animated={animated}\n                theme={theme}\n              />\n              {theme.cluster?.label && (\n                <a.group position={labelPosition}>\n                  <Label\n                    text={label}\n                    opacity={opacity}\n                    fontUrl={labelFontUrl}\n                    stroke={theme.cluster.label.stroke}\n                    active={false}\n                    color={theme.cluster?.label.color}\n                    fontSize={theme.cluster?.label.fontSize ?? 12}\n                  />\n                </a.group>\n              )}\n            </>\n          )}\n        </a.group>\n      ),\n    [\n      theme,\n      circlePosition,\n      pointerOver,\n      pointerOut,\n      offset,\n      normalizedFill,\n      rad,\n      padding,\n      normalizedStroke,\n      labelPosition,\n      label,\n      opacity,\n      labelFontUrl,\n      disabled,\n      onClick,\n      nodes,\n      bind,\n      isDraggingCurrent,\n      onRender,\n      animated\n    ]\n  );\n\n  return cluster;\n};\n","import React, { FC, useMemo, useRef, useEffect, useCallback } from 'react';\nimport { useSpring, a } from '@react-spring/three';\nimport { Color, ColorRepresentation, Mesh, DoubleSide, Vector3 } from 'three';\nimport { animationConfig } from '../utils';\nimport { useStore } from '../store';\n\nexport type EdgeArrowPosition = 'none' | 'mid' | 'end';\n\nexport interface ArrowProps {\n  /**\n   * Whether the arrow should be animated.\n   */\n  animated?: boolean;\n\n  /**\n   * The color of the arrow.\n   */\n  color?: ColorRepresentation;\n\n  /**\n   * The length of the arrow.\n   */\n  length: number;\n\n  /**\n   * The opacity of the arrow.\n   */\n  opacity?: number;\n\n  /**\n   * The position of the arrow in 3D space.\n   */\n  position: Vector3;\n\n  /**\n   * The rotation of the arrow in 3D space.\n   */\n  rotation: Vector3;\n\n  /**\n   * The size of the arrow.\n   */\n  size: number;\n\n  /**\n   * A function that is called when the arrow is right-clicked.\n   */\n  onContextMenu?: () => void;\n\n  /**\n   * A function that is called when the arrow is selected or deselected.\n   */\n  onActive?: (state: boolean) => void;\n}\n\nexport const Arrow: FC<ArrowProps> = ({\n  animated,\n  color = '#D8E6EA',\n  length,\n  opacity = 0.5,\n  position,\n  rotation,\n  size = 1,\n  onActive,\n  onContextMenu\n}) => {\n  const normalizedColor = useMemo(() => new Color(color), [color]);\n  const meshRef = useRef<Mesh | null>(null);\n  const isDragging = useStore(state => state.draggingIds.length > 0);\n  const center = useStore(state => state.centerPosition);\n\n  const [{ pos, arrowOpacity }] = useSpring(\n    () => ({\n      from: {\n        pos: center ? [center.x, center.y, center.z] : [0, 0, 0],\n        arrowOpacity: 0\n      },\n      to: {\n        pos: [position.x, position.y, position.z],\n        arrowOpacity: opacity\n      },\n      config: {\n        ...animationConfig,\n        duration: animated && !isDragging ? undefined : 0\n      }\n    }),\n    [animated, isDragging, opacity, position]\n  );\n\n  const setQuaternion = useCallback(() => {\n    const axis = new Vector3(0, 1, 0);\n    meshRef.current?.quaternion.setFromUnitVectors(axis, rotation);\n  }, [rotation, meshRef]);\n\n  useEffect(() => setQuaternion(), [setQuaternion]);\n\n  return (\n    <a.mesh\n      position={pos as any}\n      ref={meshRef}\n      scale={[1, 1, 1]}\n      onPointerOver={() => onActive(true)}\n      onPointerOut={() => onActive(false)}\n      onPointerDown={event => {\n        // context menu controls\n        if (event.nativeEvent.buttons === 2) {\n          event.stopPropagation();\n          onContextMenu();\n        }\n      }}\n    >\n      <cylinderGeometry\n        args={[0, size, length, 20, 1, true]}\n        attach=\"geometry\"\n      />\n      <a.meshBasicMaterial\n        attach=\"material\"\n        color={normalizedColor}\n        depthTest={false}\n        opacity={arrowOpacity}\n        transparent={true}\n        side={DoubleSide}\n        fog={true}\n      />\n    </a.mesh>\n  );\n};\n","import React, { FC, useEffect, useMemo, useRef } from 'react';\nimport { useSpring, a } from '@react-spring/three';\nimport { animationConfig, getCurve } from '../utils';\nimport {\n  Vector3,\n  TubeGeometry,\n  ColorRepresentation,\n  Color,\n  Curve\n} from 'three';\nimport { useStore } from '../store';\nimport type { ThreeEvent } from '@react-three/fiber';\n\nexport interface LineProps {\n  /**\n   * Whether the line should be animated.\n   */\n  animated?: boolean;\n\n  /**\n   * The color of the line.\n   */\n  color?: ColorRepresentation;\n\n  /**\n   * Whether the line should be curved.\n   */\n  curved: boolean;\n\n  /**\n   * The curve of the line in 3D space.\n   */\n  curve: Curve<Vector3>;\n\n  /**\n   * The unique identifier of the line.\n   */\n  id: string;\n\n  /**\n   * The opacity of the line.\n   */\n  opacity?: number;\n\n  /**\n   * The size of the line.\n   */\n  size?: number;\n\n  /**\n   * A function that is called when the line is clicked.\n   */\n  onClick?: (event: ThreeEvent<MouseEvent>) => void;\n\n  /**\n   * A function that is called when the line is right-clicked.\n   */\n  onContextMenu?: () => void;\n\n  /**\n   * A function that is called when the mouse pointer is moved over the line.\n   */\n  onPointerOver?: (event: ThreeEvent<PointerEvent>) => void;\n\n  /**\n   * A function that is called when the mouse pointer is moved out of the line.\n   */\n  onPointerOut?: (event: ThreeEvent<PointerEvent>) => void;\n\n  /**\n   * The offset of the curve.\n   */\n  curveOffset?: number;\n}\n\nexport const Line: FC<LineProps> = ({\n  curveOffset,\n  animated,\n  color = '#000',\n  curve,\n  curved = false,\n  id,\n  opacity = 1,\n  size = 1,\n  onContextMenu,\n  onClick,\n  onPointerOver,\n  onPointerOut\n}) => {\n  const tubeRef = useRef<TubeGeometry | null>(null);\n  const isDragging = useStore(state => state.draggingIds.length > 0);\n  const normalizedColor = useMemo(() => new Color(color), [color]);\n  const center = useStore(state => state.centerPosition);\n  const mounted = useRef<boolean>(false);\n\n  // Do opacity seperate from vertices for perf\n  const { lineOpacity } = useSpring({\n    from: {\n      lineOpacity: 0\n    },\n    to: {\n      lineOpacity: opacity\n    },\n    config: {\n      ...animationConfig,\n      duration: animated ? undefined : 0\n    }\n  });\n\n  useSpring(() => {\n    const from = curve.getPoint(0);\n    const to = curve.getPoint(1);\n    return {\n      from: {\n        // Animate from center first time, then from the actual from point\n        fromVertices: !mounted.current\n          ? [center?.x, center?.y, center?.z || 0]\n          : [to?.x, to?.y, to?.z || 0],\n        toVertices: [from?.x, from?.y, from?.z || 0]\n      },\n      to: {\n        fromVertices: [from?.x, from?.y, from?.z || 0],\n        toVertices: [to?.x, to?.y, to?.z || 0]\n      },\n      onChange: event => {\n        const { fromVertices, toVertices } = event.value;\n        const fromVector = new Vector3(...fromVertices);\n        const toVector = new Vector3(...toVertices);\n\n        const curve = getCurve(fromVector, 0, toVector, 0, curved, curveOffset);\n        tubeRef.current.copy(new TubeGeometry(curve, 20, size / 2, 5, false));\n      },\n      config: {\n        ...animationConfig,\n        duration: animated && !isDragging ? undefined : 0\n      }\n    };\n  }, [animated, isDragging, curve, size]);\n\n  useEffect(() => {\n    // Handle mount operation for initial render\n    mounted.current = true;\n  }, []);\n\n  return (\n    <mesh\n      userData={{ id, type: 'edge' }}\n      onPointerOver={onPointerOver}\n      onPointerOut={onPointerOut}\n      onClick={onClick}\n      onPointerDown={event => {\n        // context menu controls\n        if (event.nativeEvent.buttons === 2) {\n          event.stopPropagation();\n          onContextMenu();\n        }\n      }}\n    >\n      <tubeGeometry attach=\"geometry\" ref={tubeRef} />\n      <a.meshBasicMaterial\n        attach=\"material\"\n        opacity={lineOpacity}\n        fog={true}\n        transparent={true}\n        depthTest={false}\n        color={normalizedColor}\n      />\n    </mesh>\n  );\n};\n","import React, { FC, useMemo, useState } from 'react';\nimport { useSpring, a } from '@react-spring/three';\nimport { Arrow, EdgeArrowPosition } from './Arrow';\nimport { Label } from './Label';\nimport {\n  animationConfig,\n  calculateEdgeCurveOffset,\n  getArrowSize,\n  getArrowVectors,\n  getCurve,\n  getLabelOffsetByType,\n  getMidPoint,\n  getVector\n} from '../utils';\nimport { Line } from './Line';\nimport { useStore } from '../store';\nimport type { ContextMenuEvent, InternalGraphEdge } from '../types';\nimport { Html, useCursor } from '@react-three/drei';\nimport { useHoverIntent } from '../utils/useHoverIntent';\nimport { Euler, Vector3 } from 'three';\nimport type { ThreeEvent } from '@react-three/fiber';\nimport { calculateSubLabelOffset } from '../utils/position';\n\n/**\n * Label positions relatively edge.\n *\n * - below: show label under the edge line\n * - above: show label above the edge line\n * - inline: show label along the edge line\n * - natural: normal text positions\n */\nexport type EdgeLabelPosition = 'below' | 'above' | 'inline' | 'natural';\n\n/**\n * SubLabel positions relatively to the main label.\n *\n * - below: show subLabel below the main label\n * - above: show subLabel above the main label\n */\nexport type EdgeSubLabelPosition = 'below' | 'above';\n\n/**\n * Type of edge interpolation.\n *\n * - Linear is straight\n * - Curved is curved\n */\nexport type EdgeInterpolation = 'linear' | 'curved';\n\nexport interface EdgeProps {\n  /**\n   * The url for the label font.\n   */\n  labelFontUrl?: string;\n\n  /**\n   * The unique identifier of the edge.\n   */\n  id: string;\n\n  /**\n   * Whether the edge should be animated.\n   */\n  animated?: boolean;\n\n  /**\n   * Whether the edge should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * The placement of the edge label.\n   */\n  labelPlacement?: EdgeLabelPosition;\n\n  /**\n   * The placement of the edge subLabel relative to the main label.\n   */\n  subLabelPlacement?: EdgeSubLabelPosition;\n\n  /**\n   * The placement of the edge arrow.\n   */\n  arrowPlacement?: EdgeArrowPosition;\n\n  /**\n   * The type of interpolation used to draw the edge.\n   */\n  interpolation: EdgeInterpolation;\n\n  /**\n   * A function that returns the context menu for the edge.\n   */\n  contextMenu?: (event: Partial<ContextMenuEvent>) => React.ReactNode;\n\n  /**\n   * A function that is called when the edge is clicked.\n   */\n  onClick?: (edge: InternalGraphEdge, event: ThreeEvent<MouseEvent>) => void;\n\n  /**\n   * A function that is called when the edge is right-clicked.\n   */\n  onContextMenu?: (edge?: InternalGraphEdge) => void;\n\n  /**\n   * A function that is called when the mouse pointer is moved over the edge.\n   */\n  onPointerOver?: (\n    edge: InternalGraphEdge,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * A function that is called when the mouse pointer is moved out of the edge.\n   */\n  onPointerOut?: (\n    edge: InternalGraphEdge,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n}\n\nconst LABEL_PLACEMENT_OFFSET = 3;\n\nexport const Edge: FC<EdgeProps> = ({\n  animated,\n  arrowPlacement = 'end',\n  contextMenu,\n  disabled,\n  labelPlacement = 'inline',\n  id,\n  interpolation,\n  labelFontUrl,\n  onContextMenu,\n  onClick,\n  onPointerOver,\n  onPointerOut,\n  subLabelPlacement = 'below'\n}) => {\n  const theme = useStore(state => state.theme);\n  const isDragging = useStore(state => state.draggingIds.length > 0);\n\n  // UI states\n  const [active, setActive] = useState<boolean>(false);\n  const [menuVisible, setMenuVisible] = useState<boolean>(false);\n\n  // Edge data\n  const edges = useStore(state => state.edges);\n  const edge = edges.find(e => e.id === id);\n  const {\n    target,\n    source,\n    label,\n    subLabel,\n    labelVisible = false,\n    size = 1,\n    fill\n  } = edge;\n\n  // Use subLabelPlacement from edge data if available, otherwise use the prop value\n  const effectiveSubLabelPlacement =\n    edge.subLabelPlacement || subLabelPlacement;\n\n  const from = useStore(store => store.nodes.find(node => node.id === source));\n  const to = useStore(store => store.nodes.find(node => node.id === target));\n\n  // Edge properties\n  const labelOffset = (size + theme.edge.label.fontSize) / 2;\n  const [arrowLength, arrowSize] = useMemo(() => getArrowSize(size), [size]);\n  const { curveOffset, curved } = useMemo(\n    () =>\n      calculateEdgeCurveOffset({\n        edge,\n        edges,\n        curved: interpolation === 'curved'\n      }),\n    [edge, edges, interpolation]\n  );\n\n  const [curve, arrowPosition, arrowRotation] = useMemo(() => {\n    const fromVector = getVector(from);\n    const fromOffset = from.size;\n    const toVector = getVector(to);\n    const toOffset = to.size;\n\n    let curve = getCurve(\n      fromVector,\n      fromOffset,\n      toVector,\n      toOffset,\n      curved,\n      curveOffset\n    );\n\n    const [arrowPosition, arrowRotation] = getArrowVectors(\n      arrowPlacement,\n      curve,\n      arrowLength\n    );\n\n    if (arrowPlacement === 'end') {\n      curve = getCurve(\n        fromVector,\n        fromOffset,\n        arrowPosition,\n        0,\n        curved,\n        curveOffset\n      );\n    }\n\n    return [curve, arrowPosition, arrowRotation];\n  }, [from, to, curved, curveOffset, arrowPlacement, arrowLength]);\n\n  const midPoint = useMemo(() => {\n    let newMidPoint = getMidPoint(\n      from.position,\n      to.position,\n      getLabelOffsetByType(labelOffset, labelPlacement)\n    );\n\n    if (curved) {\n      // Offset the label to the mid point of the curve\n      const offset = new Vector3().subVectors(newMidPoint, curve.getPoint(0.5));\n      switch (labelPlacement) {\n      case 'above':\n        offset.y = offset.y - LABEL_PLACEMENT_OFFSET;\n        break;\n      case 'below':\n        offset.y = offset.y + LABEL_PLACEMENT_OFFSET;\n        break;\n      }\n      newMidPoint = newMidPoint.sub(offset);\n    }\n\n    return newMidPoint;\n  }, [from.position, to.position, labelOffset, labelPlacement, curved, curve]);\n\n  const isSelected = useStore(state => state.selections?.includes(id));\n  const hasSelections = useStore(state => state.selections?.length);\n  const isActive = useStore(state => state.actives?.includes(id));\n  const center = useStore(state => state.centerPosition);\n\n  const selectionOpacity = hasSelections\n    ? isSelected || isActive\n      ? theme.edge.selectedOpacity\n      : theme.edge.inactiveOpacity\n    : theme.edge.opacity;\n\n  // Calculate subLabel position based on edge orientation and subLabelPlacement\n  const subLabelOffset = useMemo(() => {\n    return calculateSubLabelOffset(\n      from.position,\n      to.position,\n      effectiveSubLabelPlacement\n    );\n  }, [from.position, to.position, effectiveSubLabelPlacement]);\n\n  const [{ labelPosition }] = useSpring(\n    () => ({\n      from: {\n        labelPosition: center ? [center.x, center.y, center.z] : [0, 0, 0]\n      },\n      to: {\n        labelPosition: [midPoint.x, midPoint.y, midPoint.z]\n      },\n      config: {\n        ...animationConfig,\n        duration: animated && !isDragging ? undefined : 0\n      }\n    }),\n    [midPoint, animated, isDragging]\n  );\n\n  const labelRotation = useMemo(\n    () =>\n      new Euler(\n        0,\n        0,\n        labelPlacement === 'natural'\n          ? 0\n          : Math.atan(\n            (to.position.y - from.position.y) /\n                (to.position.x - from.position.x)\n          )\n      ),\n    [\n      to.position.x,\n      to.position.y,\n      from.position.x,\n      from.position.y,\n      labelPlacement\n    ]\n  );\n\n  useCursor(active && !isDragging && onClick !== undefined, 'pointer');\n\n  const { pointerOver, pointerOut } = useHoverIntent({\n    disabled,\n    onPointerOver: (event: ThreeEvent<PointerEvent>) => {\n      setActive(true);\n      onPointerOver?.(edge, event);\n    },\n    onPointerOut: (event: ThreeEvent<PointerEvent>) => {\n      setActive(false);\n      onPointerOut?.(edge, event);\n    }\n  });\n\n  const arrowComponent = useMemo(\n    () =>\n      arrowPlacement !== 'none' && (\n        <Arrow\n          animated={animated}\n          color={\n            isSelected || active || isActive\n              ? theme.arrow.activeFill\n              : fill || theme.arrow.fill\n          }\n          length={arrowLength}\n          opacity={selectionOpacity}\n          position={arrowPosition}\n          rotation={arrowRotation}\n          size={arrowSize}\n          onActive={setActive}\n          onContextMenu={() => {\n            if (!disabled) {\n              setMenuVisible(true);\n              onContextMenu?.(edge);\n            }\n          }}\n        />\n      ),\n    [\n      fill,\n      active,\n      animated,\n      arrowLength,\n      arrowPlacement,\n      arrowPosition,\n      arrowRotation,\n      arrowSize,\n      disabled,\n      edge,\n      isActive,\n      isSelected,\n      onContextMenu,\n      selectionOpacity,\n      theme.arrow.activeFill,\n      theme.arrow.fill\n    ]\n  );\n\n  const labelComponent = useMemo(\n    () =>\n      labelVisible &&\n      label && (\n        <a.group\n          position={labelPosition as any}\n          onContextMenu={() => {\n            if (!disabled) {\n              setMenuVisible(true);\n              onContextMenu?.(edge);\n            }\n          }}\n          onPointerOver={pointerOver}\n          onPointerOut={pointerOut}\n        >\n          <Label\n            text={label}\n            ellipsis={15}\n            fontUrl={labelFontUrl}\n            stroke={theme.edge.label.stroke}\n            color={\n              isSelected || active || isActive\n                ? theme.edge.label.activeColor\n                : theme.edge.label.color\n            }\n            opacity={selectionOpacity}\n            fontSize={theme.edge.label.fontSize}\n            rotation={labelRotation}\n          />\n\n          {subLabel && (\n            <group position={[subLabelOffset.x, subLabelOffset.y, 0]}>\n              <Label\n                text={subLabel}\n                ellipsis={15}\n                fontUrl={labelFontUrl}\n                stroke={theme.edge.subLabel?.stroke || theme.edge.label.stroke}\n                color={\n                  isSelected || active || isActive\n                    ? theme.edge.subLabel?.activeColor ||\n                      theme.edge.label.activeColor\n                    : theme.edge.subLabel?.color || theme.edge.label.color\n                }\n                opacity={selectionOpacity}\n                fontSize={\n                  theme.edge.subLabel?.fontSize ||\n                  theme.edge.label.fontSize * 0.8\n                }\n                rotation={labelRotation}\n              />\n            </group>\n          )}\n        </a.group>\n      ),\n    [\n      active,\n      disabled,\n      edge,\n      isActive,\n      isSelected,\n      label,\n      subLabel,\n      labelFontUrl,\n      labelPosition,\n      subLabelOffset,\n      labelRotation,\n      labelVisible,\n      onContextMenu,\n      pointerOut,\n      pointerOver,\n      selectionOpacity,\n      theme.edge.label.activeColor,\n      theme.edge.label.color,\n      theme.edge.label.fontSize,\n      theme.edge.label.stroke,\n      theme.edge.subLabel?.stroke,\n      theme.edge.subLabel?.activeColor,\n      theme.edge.subLabel?.color,\n      theme.edge.subLabel?.fontSize\n    ]\n  );\n\n  const menuComponent = useMemo(\n    () =>\n      menuVisible &&\n      contextMenu && (\n        <Html prepend={true} center={true} position={midPoint}>\n          {contextMenu({ data: edge, onClose: () => setMenuVisible(false) })}\n        </Html>\n      ),\n    [menuVisible, contextMenu, midPoint, edge]\n  );\n\n  return (\n    <group>\n      <Line\n        curveOffset={curveOffset}\n        animated={animated}\n        color={\n          isSelected || active || isActive\n            ? theme.edge.activeFill\n            : fill || theme.edge.fill\n        }\n        curve={curve}\n        curved={curved}\n        id={id}\n        opacity={selectionOpacity}\n        size={size}\n        onClick={event => {\n          if (!disabled) {\n            onClick?.(edge, event);\n          }\n        }}\n        onPointerOver={pointerOver}\n        onPointerOut={pointerOut}\n        onContextMenu={() => {\n          if (!disabled) {\n            setMenuVisible(true);\n            onContextMenu?.(edge);\n          }\n        }}\n      />\n      {arrowComponent}\n      {labelComponent}\n      {menuComponent}\n    </group>\n  );\n};\n","import { useCallback, useRef } from 'react';\nimport {\n  BoxGeometry,\n  BufferGeometry,\n  CylinderGeometry,\n  Quaternion,\n  TubeGeometry,\n  Vector3\n} from 'three';\nimport { mergeBufferGeometries } from 'three-stdlib';\n\nimport { GraphState, useStore } from '../../store';\nimport { InternalGraphEdge } from '../../types';\nimport {\n  getArrowSize,\n  getArrowVectors,\n  getVector,\n  getCurve\n} from '../../utils';\nimport { EdgeArrowPosition } from '../Arrow';\nimport { EdgeInterpolation } from '../Edge';\n\nexport type UseEdgeGeometry = {\n  getGeometries(edges: Array<InternalGraphEdge>): Array<BufferGeometry>;\n  getGeometry(\n    active: Array<InternalGraphEdge>,\n    inactive: Array<InternalGraphEdge>\n  ): BufferGeometry;\n};\n\nconst NULL_GEOMETRY = new BoxGeometry(0, 0, 0);\n\nexport function useEdgeGeometry(\n  arrowPlacement: EdgeArrowPosition,\n  interpolation: EdgeInterpolation\n): UseEdgeGeometry {\n  // We don't want to rerun everything when the state changes,\n  // but we do want to use the most recent nodes whenever `getGeometries`\n  // or `getGeometry` is run, so we store it in a ref:\n  const stateRef = useRef<GraphState | null>(null);\n  const theme = useStore(state => state.theme);\n  useStore(state => {\n    stateRef.current = state;\n  });\n\n  const geometryCacheRef = useRef(new Map<string, BufferGeometry>());\n\n  // Add memoized geometries for arrows and null geometry\n  const nullGeometryRef = useRef(new BoxGeometry(0, 0, 0));\n  const baseArrowGeometryRef = useRef<CylinderGeometry | null>(null);\n\n  const curved = interpolation === 'curved';\n  const getGeometries = useCallback(\n    (edges: Array<InternalGraphEdge>): Array<BufferGeometry> => {\n      const geometries: Array<BufferGeometry> = [];\n      const cache = geometryCacheRef.current;\n\n      // Pre-compute values outside the loop\n      const { nodes } = stateRef.current;\n      const nodesMap = new Map(nodes.map(node => [node.id, node]));\n      const labelFontSize = theme.edge.label.fontSize;\n\n      // Initialize base arrow geometry if needed\n      if (arrowPlacement !== 'none' && !baseArrowGeometryRef.current) {\n        baseArrowGeometryRef.current = new CylinderGeometry(\n          0,\n          1,\n          1,\n          20,\n          1,\n          true\n        );\n      }\n\n      edges.forEach(edge => {\n        const { target, source, size = 1 } = edge;\n        const from = nodesMap.get(source);\n        const to = nodesMap.get(target);\n\n        if (!from || !to) {\n          return;\n        }\n\n        // Improved hash function to include size\n        const hash = `${from.position.x},${from.position.y},${to.position.x},${to.position.y},${size}`;\n        if (cache.has(hash)) {\n          geometries.push(cache.get(hash));\n          return;\n        }\n\n        const fromVector = getVector(from);\n        const fromOffset = from.size + labelFontSize;\n        const toVector = getVector(to);\n        const toOffset = to.size + labelFontSize;\n        let curve = getCurve(\n          fromVector,\n          fromOffset,\n          toVector,\n          toOffset,\n          curved\n        );\n\n        let edgeGeometry = new TubeGeometry(curve, 20, size / 2, 5, false);\n\n        if (arrowPlacement === 'none') {\n          geometries.push(edgeGeometry);\n          cache.set(hash, edgeGeometry);\n          return;\n        }\n\n        // Reuse base arrow geometry and scale/rotate as needed\n        const [arrowLength, arrowSize] = getArrowSize(size);\n        const arrowGeometry = baseArrowGeometryRef.current.clone();\n        arrowGeometry.scale(arrowSize, arrowLength, arrowSize);\n        const [arrowPosition, arrowRotation] = getArrowVectors(\n          arrowPlacement,\n          curve,\n          arrowLength\n        );\n        const quaternion = new Quaternion();\n        quaternion.setFromUnitVectors(new Vector3(0, 1, 0), arrowRotation);\n        arrowGeometry.applyQuaternion(quaternion);\n        arrowGeometry.translate(\n          arrowPosition.x,\n          arrowPosition.y,\n          arrowPosition.z\n        );\n\n        // Move edge so it doesn't stick through the arrow:\n        if (arrowPlacement && arrowPlacement === 'end') {\n          const curve = getCurve(\n            fromVector,\n            fromOffset,\n            arrowPosition,\n            0,\n            curved\n          );\n          edgeGeometry = new TubeGeometry(curve, 20, size / 2, 5, false);\n        }\n\n        const merged = mergeBufferGeometries([edgeGeometry, arrowGeometry]);\n        geometries.push(merged);\n        cache.set(hash, merged);\n      });\n      return geometries;\n    },\n    [arrowPlacement, curved, theme.edge.label.fontSize]\n  );\n\n  const getGeometry = useCallback(\n    (\n      active: Array<InternalGraphEdge>,\n      inactive: Array<InternalGraphEdge>\n    ): BufferGeometry => {\n      const activeGeometries = getGeometries(active);\n      const inactiveGeometries = getGeometries(inactive);\n\n      return mergeBufferGeometries(\n        [\n          inactiveGeometries.length\n            ? mergeBufferGeometries(inactiveGeometries)\n            : NULL_GEOMETRY,\n          activeGeometries.length\n            ? mergeBufferGeometries(activeGeometries)\n            : NULL_GEOMETRY\n        ],\n        true\n      );\n    },\n    [getGeometries]\n  );\n\n  return {\n    getGeometries,\n    getGeometry\n  };\n}\n","import { useCallback, useRef, useEffect } from 'react';\n\nimport { useStore } from '../../store';\nimport { InternalGraphEdge } from '../../types';\n\nexport type EdgeEvents = {\n  onClick?: (edge: InternalGraphEdge) => void;\n  onContextMenu?: (edge?: InternalGraphEdge) => void;\n  onPointerOver?: (edge: InternalGraphEdge) => void;\n  onPointerOut?: (edge: InternalGraphEdge) => void;\n};\n\nexport function useEdgeEvents(\n  events: EdgeEvents,\n  contextMenu,\n  disabled: boolean\n) {\n  const memoizedEvents = useRef(events);\n  useEffect(() => {\n    memoizedEvents.current = events;\n  }, [events]);\n\n  const edgeContextMenus = useStore(state => state.edgeContextMenus);\n  const setEdgeContextMenus = useStore(\n    useCallback(state => state.setEdgeContextMenus, [])\n  );\n\n  const clickRef = useRef(false);\n  const handleClick = useCallback(() => {\n    clickRef.current = true;\n  }, []);\n\n  const contextMenuEventRef = useRef(false);\n  const handleContextMenu = useCallback(() => {\n    contextMenuEventRef.current = true;\n  }, []);\n\n  const handleIntersections = useCallback(\n    (\n      previous: Array<InternalGraphEdge>,\n      intersected: Array<InternalGraphEdge>\n    ) => {\n      const { onClick, onContextMenu, onPointerOver, onPointerOut } =\n        memoizedEvents.current;\n\n      if (onClick && clickRef.current && !disabled) {\n        clickRef.current = false;\n        for (const edge of intersected) {\n          onClick(edge);\n        }\n      }\n\n      if (\n        (contextMenu || onContextMenu) &&\n        contextMenuEventRef.current &&\n        !disabled\n      ) {\n        contextMenuEventRef.current = false;\n        const newEdges = new Set(edgeContextMenus);\n        let hasChanges = false;\n\n        for (const edge of intersected) {\n          if (!edgeContextMenus.has(edge.id)) {\n            newEdges.add(edge.id);\n            hasChanges = true;\n            onContextMenu?.(edge);\n          }\n        }\n\n        if (hasChanges) {\n          setEdgeContextMenus(newEdges);\n        }\n      }\n\n      if (onPointerOver) {\n        const over = intersected.filter(index => !previous.includes(index));\n        over.forEach(edge => {\n          onPointerOver(edge);\n        });\n      }\n\n      if (onPointerOut) {\n        const out = previous.filter(index => !intersected.includes(index));\n        out.forEach(edge => {\n          onPointerOut(edge);\n        });\n      }\n    },\n    [contextMenu, disabled, edgeContextMenus, setEdgeContextMenus]\n  );\n\n  return {\n    handleClick,\n    handleContextMenu,\n    handleIntersections\n  };\n}\n","import { SpringValue, useSpring } from '@react-spring/three';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { BufferAttribute, BufferGeometry } from 'three';\n\nimport { Theme } from '../../themes';\nimport { animationConfig } from '../../utils';\n\nexport function useEdgePositionAnimation(\n  geometry: BufferGeometry,\n  animated: boolean\n): void {\n  const geometryRef = useRef<BufferGeometry>(geometry);\n  const bufferPool = useRef<Float32Array | null>(null);\n\n  useEffect(() => {\n    geometryRef.current = geometry;\n    const positions = geometry.getAttribute('position');\n    bufferPool.current = new Float32Array(positions.array.length);\n  }, [geometry]);\n\n  const getAnimationPositions = useCallback(() => {\n    const positions = geometryRef.current.getAttribute('position');\n    const from = new Float32Array(positions.array.length);\n    return {\n      from,\n      to: positions.array\n    };\n  }, []);\n\n  const updateGeometryPosition = useCallback((positions: Array<number>) => {\n    const buffer = bufferPool.current!;\n    buffer.set(positions);\n    const newPosition = new BufferAttribute(buffer, 3, false);\n    geometryRef.current.setAttribute('position', newPosition);\n    newPosition.needsUpdate = true;\n  }, []);\n\n  useSpring(() => {\n    if (!animated) {\n      return null;\n    }\n\n    const animationPositions = getAnimationPositions();\n\n    return {\n      from: {\n        positions: animationPositions.from\n      },\n      to: {\n        positions: animationPositions.to\n      },\n      onChange: event => {\n        updateGeometryPosition(event.value.positions);\n      },\n      config: {\n        ...animationConfig,\n        duration: animated ? undefined : 0\n      }\n    };\n  }, [animated, getAnimationPositions, updateGeometryPosition]);\n}\n\nexport type UseEdgeOpacityAnimations = {\n  activeOpacity: SpringValue<number>;\n  inactiveOpacity: SpringValue<number>;\n};\n\nexport function useEdgeOpacityAnimation(\n  animated: boolean,\n  hasSelections: boolean,\n  theme: Theme\n): UseEdgeOpacityAnimations {\n  const [{ activeOpacity, inactiveOpacity }] = useSpring(() => {\n    return {\n      from: {\n        activeOpacity: 0,\n        inactiveOpacity: 0\n      },\n      to: {\n        activeOpacity: hasSelections\n          ? theme.edge.selectedOpacity\n          : theme.edge.opacity,\n        inactiveOpacity: hasSelections\n          ? theme.edge.inactiveOpacity\n          : theme.edge.opacity\n      },\n      config: {\n        ...animationConfig,\n        duration: animated ? undefined : 0\n      }\n    };\n  }, [animated, hasSelections, theme]);\n\n  return { activeOpacity, inactiveOpacity };\n}\n","import React, { FC, useCallback, useMemo } from 'react';\nimport { useSpring, a } from '@react-spring/three';\nimport { Html } from '@react-three/drei';\nimport { ColorRepresentation, Euler } from 'three';\n\nimport { useStore } from '../../store';\nimport { ContextMenuEvent, InternalGraphEdge } from '../../types';\nimport {\n  animationConfig,\n  getLabelOffsetByType,\n  getMidPoint\n} from '../../utils';\nimport { Label } from '../Label';\n\n/**\n * Label positions relatively edge\n *\n * below: show label under the edge line\n * above: show label above the edge line\n * inline: show label along the edge line\n * natural: normal text positions\n */\nexport type EdgeLabelPosition = 'below' | 'above' | 'inline' | 'natural';\n\nexport type EdgeArrowPosition = 'none' | 'mid' | 'end';\n\nexport interface EdgeProps {\n  /**\n   * Whether the edge should be animated.\n   */\n  animated?: boolean;\n\n  /**\n   * Whether the edge should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * The color of the edge.\n   */\n  color: ColorRepresentation;\n\n  /**\n   * A function that returns the context menu for the edge.\n   */\n  contextMenu?: (event: Partial<ContextMenuEvent>) => React.ReactNode;\n\n  /**\n   * The edge object.\n   */\n  edge: InternalGraphEdge;\n\n  /**\n   * The URL of the font for the edge label.\n   */\n  labelFontUrl?: string;\n\n  /**\n   * The placement of the edge label.\n   */\n  labelPlacement?: EdgeLabelPosition;\n\n  /**\n   * The opacity of the edge.\n   */\n  opacity?: number;\n}\n\nexport const Edge: FC<EdgeProps> = ({\n  animated,\n  color,\n  contextMenu,\n  edge,\n  labelFontUrl,\n  labelPlacement = 'inline',\n  opacity\n}) => {\n  const theme = useStore(state => state.theme);\n  const { target, source, label, labelVisible = false, size = 1 } = edge;\n\n  const nodes = useStore(store => store.nodes);\n  const [from, to] = useMemo(\n    () => [\n      nodes.find(node => node.id === source),\n      nodes.find(node => node.id === target)\n    ],\n    [nodes, source, target]\n  );\n  const isDragging = useStore(state => state.draggingIds.length > 0);\n\n  const labelOffset = useMemo(\n    () => (size + theme.edge.label.fontSize) / 2,\n    [size, theme.edge.label.fontSize]\n  );\n\n  const midPoint = useMemo(\n    () =>\n      getMidPoint(\n        from.position,\n        to.position,\n        getLabelOffsetByType(labelOffset, labelPlacement)\n      ),\n    [from.position, to.position, labelOffset, labelPlacement]\n  );\n\n  const edgeContextMenus = useStore(state => state.edgeContextMenus);\n  const setEdgeContextMenus = useStore(state => state.setEdgeContextMenus);\n\n  const [{ labelPosition }] = useSpring(\n    () => ({\n      from: {\n        labelPosition: [0, 0, 0]\n      },\n      to: {\n        labelPosition: [midPoint.x, midPoint.y, midPoint.z]\n      },\n      config: {\n        ...animationConfig,\n        duration: animated && !isDragging ? undefined : 0\n      }\n    }),\n    [midPoint, animated, isDragging]\n  );\n\n  const removeContextMenu = useCallback(\n    (edgeId: string) => {\n      edgeContextMenus.delete(edgeId);\n      setEdgeContextMenus(new Set(edgeContextMenus));\n    },\n    [edgeContextMenus, setEdgeContextMenus]\n  );\n\n  const labelRotation = useMemo(() => {\n    if (labelPlacement === 'natural') {\n      return new Euler(0, 0, 0);\n    }\n    return new Euler(\n      0,\n      0,\n      Math.atan2(\n        to.position.y - from.position.y,\n        to.position.x - from.position.x\n      )\n    );\n  }, [\n    labelPlacement,\n    to.position.y,\n    to.position.x,\n    from.position.y,\n    from.position.x\n  ]);\n\n  const htmlProps = useMemo(\n    () => ({\n      prepend: true,\n      center: true,\n      position: midPoint\n    }),\n    [midPoint]\n  );\n\n  const labelProps = useMemo(\n    () => ({\n      text: label,\n      ellipsis: 15,\n      fontUrl: labelFontUrl,\n      stroke: theme.edge.label.stroke,\n      color,\n      opacity,\n      fontSize: theme.edge.label.fontSize,\n      rotation: labelRotation\n    }),\n    [\n      label,\n      labelFontUrl,\n      theme.edge.label.stroke,\n      color,\n      opacity,\n      theme.edge.label.fontSize,\n      labelRotation\n    ]\n  );\n\n  return (\n    <group>\n      {labelVisible && label && (\n        <a.group position={labelPosition as any}>\n          <Label {...labelProps} />\n        </a.group>\n      )}\n      {contextMenu && edgeContextMenus.has(edge.id) && (\n        <Html {...htmlProps}>\n          {contextMenu({\n            data: edge,\n            onClose: () => removeContextMenu(edge.id)\n          })}\n        </Html>\n      )}\n    </group>\n  );\n};\n","import React, { FC, useCallback, useEffect, useMemo, useRef } from 'react';\nimport { a } from '@react-spring/three';\nimport { useFrame } from '@react-three/fiber';\nimport { DoubleSide, Mesh, Raycaster, TubeGeometry } from 'three';\n\nimport { useStore } from '../../store';\nimport { ContextMenuEvent, InternalGraphEdge } from '../../types';\nimport { EdgeArrowPosition } from '../Arrow';\nimport { EdgeLabelPosition, EdgeInterpolation } from '../Edge';\nimport { useEdgeGeometry } from './useEdgeGeometry';\nimport { EdgeEvents, useEdgeEvents } from './useEdgeEvents';\nimport {\n  useEdgePositionAnimation,\n  useEdgeOpacityAnimation\n} from './useEdgeAnimations';\nimport { Edge } from './Edge';\n\nexport type EdgesProps = {\n  /**\n   * Whether the edge should be animated.\n   */\n  animated?: boolean;\n\n  /**\n   * The placement of the edge arrow.\n   */\n  arrowPlacement?: EdgeArrowPosition;\n\n  /**\n   * A function that returns the context menu for the edge.\n   */\n  contextMenu?: (event: Partial<ContextMenuEvent>) => React.ReactNode;\n\n  /**\n   * Whether the edge should be disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * The array of edge objects.\n   */\n  edges: Array<InternalGraphEdge>;\n\n  /**\n   * The URL of the font for the edge label.\n   */\n  labelFontUrl?: string;\n\n  /**\n   * The placement of the edge label.\n   */\n  labelPlacement?: EdgeLabelPosition;\n\n  /**\n   * The type of interpolation used to draw the edge.\n   */\n  interpolation?: EdgeInterpolation;\n} & EdgeEvents;\n\n/**\n * Three.js rendering starts to get slower if you have an individual mesh for each edge\n * and a high number of edges.\n *\n * Instead, we take the edges and split them into their different render states:\n *\n *  * - Active (any edges that are marked as \"selected\" or \"active\" in the state)\n *  * - Dragging (any edges that are connected to a node that is being dragged)\n *  * - Intersecting (any edges that are currently intersected by the ray from the mouse position)\n *  * - Inactive (any edges that aren't active, dragging, or intersected)\n *\n * We generate the geometry for each edge in each of these groups, and then merge them\n * into a single geometry for each group. This merged mesh is rendered as one object\n * which gives much better performance. This means that we only need to update geometry\n * and positions when edges move between the different states, rather than updating all\n * edges whenever any other edge changes.\n *\n * To get this all working, we have to do a few things outside the @react-three/fiber world,\n * specifically:\n *\n *  * manually create edge/arrow geometries (see `useEdgeGeometry`)\n *  * manually track mouse/edge interactions and fire events (see `useEdgeEvents`)\n *  * manually update edge/arrow positions during aniamations (see `useEdgeAnimations`)\n */\nexport const Edges: FC<EdgesProps> = ({\n  interpolation = 'linear',\n  arrowPlacement = 'end',\n  labelPlacement = 'inline',\n  animated,\n  contextMenu,\n  disabled,\n  edges,\n  labelFontUrl,\n  onClick,\n  onContextMenu,\n  onPointerOut,\n  onPointerOver\n}) => {\n  const theme = useStore(state => state.theme);\n  const { getGeometries, getGeometry } = useEdgeGeometry(\n    arrowPlacement,\n    interpolation\n  );\n\n  const draggingIds = useStore(state => state.draggingIds);\n  const edgeMeshes = useStore(state => state.edgeMeshes);\n  const setEdgeMeshes = useStore(state => state.setEdgeMeshes);\n  const actives = useStore(state => state.actives || []);\n  const selections = useStore(state => state.selections || []);\n\n  const [active, inactive, draggingActive, draggingInactive] = useMemo(() => {\n    const active: Array<InternalGraphEdge> = [];\n    const inactive: Array<InternalGraphEdge> = [];\n    const draggingActive: Array<InternalGraphEdge> = [];\n    const draggingInactive: Array<InternalGraphEdge> = [];\n    edges.forEach(edge => {\n      if (\n        draggingIds.includes(edge.source) ||\n        draggingIds.includes(edge.target)\n      ) {\n        if (selections.includes(edge.id) || actives.includes(edge.id)) {\n          draggingActive.push(edge);\n        } else {\n          draggingInactive.push(edge);\n        }\n        return;\n      }\n\n      if (selections.includes(edge.id) || actives.includes(edge.id)) {\n        active.push(edge);\n      } else {\n        inactive.push(edge);\n      }\n    });\n    return [active, inactive, draggingActive, draggingInactive];\n  }, [edges, actives, selections, draggingIds]);\n\n  const hasSelections = !!selections.length;\n\n  const staticEdgesGeometry = useMemo(\n    () => getGeometry(active, inactive),\n    [getGeometry, active, inactive]\n  );\n\n  const { activeOpacity, inactiveOpacity } = useEdgeOpacityAnimation(\n    animated,\n    hasSelections,\n    theme\n  );\n\n  useEdgePositionAnimation(staticEdgesGeometry, animated);\n\n  useEffect(() => {\n    if (draggingIds.length === 0) {\n      const edgeGeometries = getGeometries(edges);\n      const edgeMeshes = edgeGeometries.map(edge => new Mesh(edge));\n      setEdgeMeshes(edgeMeshes);\n    }\n  }, [getGeometries, setEdgeMeshes, edges, draggingIds.length]);\n\n  const staticEdgesRef = useRef(new Mesh());\n  const dynamicEdgesRef = useRef(new Mesh());\n\n  const intersect = useCallback(\n    (raycaster: Raycaster): Array<InternalGraphEdge> => {\n      // Handle initial raycaster state:\n      if (!raycaster.camera) {\n        return [];\n      }\n      const intersections =\n        raycaster.intersectObjects<Mesh<TubeGeometry>>(edgeMeshes);\n      if (!intersections.length) {\n        return [];\n      }\n      return intersections.map(\n        intersection => edges[edgeMeshes.indexOf(intersection.object)]\n      );\n    },\n    [edgeMeshes, edges]\n  );\n\n  const { handleClick, handleContextMenu, handleIntersections } = useEdgeEvents(\n    {\n      onClick,\n      onContextMenu,\n      onPointerOut,\n      onPointerOver\n    },\n    contextMenu,\n    disabled\n  );\n\n  const draggingIdRef = useRef<string[]>([]);\n  const intersectingRef = useRef<Array<InternalGraphEdge>>([]);\n\n  useFrame(state => {\n    staticEdgesRef.current.geometry = staticEdgesGeometry;\n\n    if (disabled) {\n      return;\n    }\n\n    const previousDraggingId = draggingIdRef.current;\n    if (\n      draggingIds.length ||\n      (draggingIds.length === 0 && previousDraggingId !== null)\n    ) {\n      dynamicEdgesRef.current.geometry = getGeometry(\n        draggingActive,\n        draggingInactive\n      );\n    }\n\n    draggingIdRef.current = draggingIds;\n    if (draggingIds.length) {\n      return;\n    }\n\n    const previousIntersecting = intersectingRef.current;\n    const intersecting = intersect(state.raycaster);\n    handleIntersections(previousIntersecting, intersecting);\n\n    if (intersecting.join() !== previousIntersecting.join()) {\n      dynamicEdgesRef.current.geometry = getGeometry(intersecting, []);\n    }\n\n    intersectingRef.current = intersecting;\n  });\n\n  return (\n    <group onClick={handleClick} onContextMenu={handleContextMenu}>\n      {/* Static edges */}\n      <mesh ref={staticEdgesRef}>\n        <a.meshBasicMaterial\n          attach=\"material-0\"\n          color={theme.edge.fill}\n          depthTest={false}\n          fog={true}\n          opacity={inactiveOpacity}\n          side={DoubleSide}\n          transparent={true}\n        />\n        <a.meshBasicMaterial\n          attach=\"material-1\"\n          color={theme.edge.activeFill}\n          depthTest={false}\n          fog={true}\n          opacity={activeOpacity}\n          side={DoubleSide}\n          transparent={true}\n        />\n      </mesh>\n      {/* Dynamic edges */}\n      <mesh ref={dynamicEdgesRef}>\n        <a.meshBasicMaterial\n          attach=\"material-0\"\n          color={theme.edge.fill}\n          depthTest={false}\n          fog={true}\n          opacity={inactiveOpacity}\n          side={DoubleSide}\n          transparent={true}\n        />\n        <a.meshBasicMaterial\n          attach=\"material-1\"\n          color={theme.edge.activeFill}\n          depthTest={false}\n          fog={true}\n          opacity={activeOpacity}\n          side={DoubleSide}\n          transparent={true}\n        />\n      </mesh>\n      {edges.map(edge => (\n        <Edge\n          animated={animated}\n          contextMenu={contextMenu}\n          color={theme.edge.label.color}\n          disabled={disabled}\n          edge={edge}\n          key={edge.id}\n          labelFontUrl={labelFontUrl}\n          labelPlacement={labelPlacement}\n        />\n      ))}\n    </group>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport { Color, ColorRepresentation, DoubleSide } from 'three';\nimport { animationConfig } from '../utils/animation';\nimport { useSpring, a } from '@react-spring/three';\nimport { Billboard } from '@react-three/drei';\n\nexport interface RingProps {\n  /**\n   * The color of the ring.\n   */\n  color?: ColorRepresentation;\n\n  /**\n   * Whether the ring should be animated.\n   */\n  animated?: boolean;\n\n  /**\n   * The size of the ring.\n   */\n  size?: number;\n\n  /**\n   * The opacity of the ring.\n   */\n  opacity?: number;\n\n  /**\n   * The stroke width of the ring.\n   */\n  strokeWidth?: number;\n\n  /**\n   * The inner radius of the ring.\n   * Default value: 4\n   */\n  innerRadius?: number;\n\n  /**\n   * The number of segments in the ring geometry.\n   * Default value: 25\n   */\n  segments?: number;\n}\n\nexport const Ring: FC<RingProps> = ({\n  color = '#D8E6EA',\n  size = 1,\n  opacity = 0.5,\n  animated,\n  strokeWidth = 5,\n  innerRadius = 4,\n  segments = 25\n}) => {\n  const normalizedColor = useMemo(() => new Color(color), [color]);\n\n  const { ringSize, ringOpacity } = useSpring({\n    from: {\n      ringOpacity: 0,\n      ringSize: [0.00001, 0.00001, 0.00001]\n    },\n    to: {\n      ringOpacity: opacity,\n      ringSize: [size / 2, size / 2, 1]\n    },\n    config: {\n      ...animationConfig,\n      duration: animated ? undefined : 0\n    }\n  });\n\n  const strokeWidthFraction = strokeWidth / 10;\n  const outerRadius = innerRadius + strokeWidthFraction;\n\n  return (\n    <Billboard position={[0, 0, 1]}>\n      <a.mesh scale={ringSize as any}>\n        <ringGeometry\n          attach=\"geometry\"\n          args={[innerRadius, outerRadius, segments]}\n        />\n        <a.meshBasicMaterial\n          attach=\"material\"\n          color={normalizedColor}\n          transparent={true}\n          depthTest={false}\n          opacity={ringOpacity}\n          side={DoubleSide}\n          fog={true}\n        />\n      </a.mesh>\n    </Billboard>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport { useSpring, a } from '@react-spring/three';\nimport { animationConfig } from '../../utils/animation';\nimport { Color, DoubleSide } from 'three';\nimport { NodeRendererProps } from '../../types';\nimport { Ring } from '../Ring';\nimport { useStore } from '../../store';\n\nexport const Sphere: FC<NodeRendererProps> = ({\n  color,\n  id,\n  size,\n  selected,\n  opacity = 1,\n  animated\n}) => {\n  const { scale, nodeOpacity } = useSpring({\n    from: {\n      // Note: This prevents incorrect scaling w/ 0\n      scale: [0.00001, 0.00001, 0.00001],\n      nodeOpacity: 0\n    },\n    to: {\n      scale: [size, size, size],\n      nodeOpacity: opacity\n    },\n    config: {\n      ...animationConfig,\n      duration: animated ? undefined : 0\n    }\n  });\n  const normalizedColor = useMemo(() => new Color(color), [color]);\n  const theme = useStore(state => state.theme);\n\n  return (\n    <>\n      <a.mesh userData={{ id, type: 'node' }} scale={scale as any}>\n        <sphereGeometry attach=\"geometry\" args={[1, 25, 25]} />\n        <a.meshPhongMaterial\n          attach=\"material\"\n          side={DoubleSide}\n          transparent={true}\n          fog={true}\n          opacity={nodeOpacity}\n          color={normalizedColor}\n          emissive={normalizedColor}\n          emissiveIntensity={0.7}\n        />\n      </a.mesh>\n      <Ring\n        opacity={selected ? 0.5 : 0}\n        size={size}\n        animated={animated}\n        color={selected ? theme.ring.activeFill : theme.ring.fill}\n      />\n    </>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport { a, useSpring } from '@react-spring/three';\nimport { TextureLoader, LinearFilter, DoubleSide } from 'three';\nimport { animationConfig } from '../../utils';\nimport { NodeRendererProps } from '../../types';\n\nexport interface IconProps extends NodeRendererProps {\n  /**\n   * The image to display on the icon.\n   */\n  image: string;\n}\n\nexport const Icon: FC<IconProps> = ({\n  image,\n  id,\n  size,\n  opacity = 1,\n  animated\n}) => {\n  const texture = useMemo(() => new TextureLoader().load(image), [image]);\n\n  const { scale, spriteOpacity } = useSpring({\n    from: {\n      scale: [0.00001, 0.00001, 0.00001],\n      spriteOpacity: 0\n    },\n    to: {\n      scale: [size, size, size],\n      spriteOpacity: opacity\n    },\n    config: {\n      ...animationConfig,\n      duration: animated ? undefined : 0\n    }\n  });\n\n  return (\n    <a.sprite userData={{ id, type: 'node' }} scale={scale as any}>\n      <a.spriteMaterial\n        attach=\"material\"\n        opacity={spriteOpacity}\n        fog={true}\n        depthTest={false}\n        transparent={true}\n        side={DoubleSide}\n      >\n        <primitive attach=\"map\" object={texture} minFilter={LinearFilter} />\n      </a.spriteMaterial>\n    </a.sprite>\n  );\n};\n","import React, { FC } from 'react';\nimport { NodeRendererProps } from '../../types';\nimport { Sphere } from './Sphere';\nimport { Icon } from './Icon';\n\nexport interface SphereWithIconProps extends NodeRendererProps {\n  /**\n   * The image to display on the icon.\n   */\n  image: string;\n}\n\nexport const SphereWithIcon: FC<SphereWithIconProps> = ({\n  color,\n  id,\n  size,\n  opacity = 1,\n  node,\n  active = false,\n  animated,\n  image,\n  selected\n}) => (\n  <>\n    <Sphere\n      id={id}\n      selected={selected}\n      size={size}\n      opacity={opacity}\n      animated={animated}\n      color={color}\n      node={node}\n      active={active}\n    />\n    <Icon\n      id={id}\n      image={image}\n      selected={selected}\n      size={size + 8}\n      opacity={opacity}\n      animated={animated}\n      color={color}\n      node={node}\n      active={active}\n    />\n  </>\n);\n","import React, { FC, useMemo } from 'react';\nimport { a, useSpring } from '@react-spring/three';\nimport { animationConfig } from '../../utils';\nimport { NodeRendererProps } from '../../types';\nimport {\n  Billboard,\n  Svg as DreiSvg,\n  SvgProps as DreiSvgProps\n} from '@react-three/drei';\nimport { Color, DoubleSide } from 'three';\n\nexport type SvgProps = NodeRendererProps &\n  Omit<DreiSvgProps, 'src' | 'id'> & {\n    /**\n     * The image to display on the icon.\n     */\n    image: string;\n  };\n\nexport const Svg: FC<SvgProps> = ({\n  id,\n  image,\n  color,\n  size,\n  opacity = 1,\n  animated,\n  ...rest\n}) => {\n  const normalizedSize = size / 25;\n\n  const { scale } = useSpring({\n    from: {\n      scale: [0.00001, 0.00001, 0.00001]\n    },\n    to: {\n      scale: [normalizedSize, normalizedSize, normalizedSize]\n    },\n    config: {\n      ...animationConfig,\n      duration: animated ? undefined : 0\n    }\n  });\n\n  const normalizedColor = useMemo(() => new Color(color), [color]);\n\n  return (\n    <a.group userData={{ id, type: 'node' }} scale={scale as any}>\n      <Billboard position={[0, 0, 1]}>\n        <DreiSvg\n          {...rest}\n          src={image}\n          fillMaterial={{\n            fog: true,\n            depthTest: false,\n            transparent: true,\n            color: normalizedColor,\n            opacity,\n            side: DoubleSide,\n            ...(rest.fillMaterial || {})\n          }}\n          fillMeshProps={{\n            // Note: This is a hack to get the svg to\n            // render in the correct position.\n            position: [-25, -25, 1],\n            ...(rest.fillMeshProps || {})\n          }}\n        />\n      </Billboard>\n    </a.group>\n  );\n};\n","import React, { FC } from 'react';\nimport { Sphere } from './Sphere';\nimport { Svg, SvgProps } from './Svg';\nimport { ColorRepresentation } from 'three';\n\nexport interface SphereWithSvgProps extends SvgProps {\n  /**\n   * The image to display on the icon.\n   */\n  image: string;\n\n  /**\n   * The color of the svg fill.\n   */\n  svgFill?: ColorRepresentation;\n}\n\nexport const SphereWithSvg: FC<SphereWithSvgProps> = ({\n  color,\n  id,\n  size,\n  opacity = 1,\n  node,\n  svgFill,\n  active = false,\n  animated,\n  image,\n  selected,\n  ...rest\n}) => (\n  <>\n    <Sphere\n      id={id}\n      selected={selected}\n      size={size}\n      opacity={opacity}\n      animated={animated}\n      color={color}\n      node={node}\n      active={active}\n    />\n    <Svg\n      {...rest}\n      id={id}\n      selected={selected}\n      image={image}\n      size={size}\n      opacity={opacity}\n      animated={animated}\n      color={svgFill}\n      node={node}\n      active={active}\n    />\n  </>\n);\n","import React, {\n  FC,\n  ReactNode,\n  useCallback,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { Group } from 'three';\nimport { animationConfig } from '../utils';\nimport { useSpring, a } from '@react-spring/three';\nimport { Sphere } from './nodes/Sphere';\nimport { Label } from './Label';\nimport {\n  NodeContextMenuProps,\n  ContextMenuEvent,\n  InternalGraphNode,\n  NodeRenderer,\n  CollapseProps\n} from '../types';\nimport { Html, useCursor } from '@react-three/drei';\nimport { useCameraControls } from '../CameraControls/useCameraControls';\nimport { useStore } from '../store';\nimport { useDrag } from '../utils/useDrag';\nimport { useHoverIntent } from '../utils/useHoverIntent';\nimport { Icon } from './nodes';\nimport type { ThreeEvent } from '@react-three/fiber';\n\nexport interface NodeProps {\n  /**\n   * The unique identifier for the node.\n   */\n  id: string;\n\n  /**\n   * The parent nodes of the node.\n   */\n  parents?: string[];\n\n  /**\n   * Whether the node is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the node is animated.\n   */\n  animated?: boolean;\n\n  /**\n   * Whether the node is draggable.\n   */\n  draggable?: boolean;\n\n  /**\n   * Constrain dragging to the cluster bounds.\n   */\n  constrainDragging?: boolean;\n\n  /**\n   * The url for the label font.\n   */\n  labelFontUrl?: string;\n\n  /**\n   * The function to use to render the node.\n   */\n  renderNode?: NodeRenderer;\n\n  /**\n   * The context menu for the node.\n   */\n  contextMenu?: (event: ContextMenuEvent) => ReactNode;\n\n  /**\n   * The function to call when the pointer is over the node.\n   */\n  onPointerOver?: (\n    node: InternalGraphNode,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * The function to call when the pointer is out of the node.\n   */\n  onPointerOut?: (\n    node: InternalGraphNode,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * The function to call when the node is clicked.\n   */\n  onClick?: (\n    node: InternalGraphNode,\n    props?: CollapseProps,\n    event?: ThreeEvent<MouseEvent>\n  ) => void;\n\n  /**\n   * The function to call when the node is double clicked.\n   */\n  onDoubleClick?: (\n    node: InternalGraphNode,\n    event: ThreeEvent<MouseEvent>\n  ) => void;\n\n  /**\n   * The function to call when the node is right clicked.\n   */\n  onContextMenu?: (\n    node?: InternalGraphNode,\n    props?: NodeContextMenuProps\n  ) => void;\n\n  /**\n   * Triggered after a node was dragged.\n   */\n  onDragged?: (node: InternalGraphNode) => void;\n}\n\nexport const Node: FC<NodeProps> = ({\n  animated,\n  disabled,\n  id,\n  draggable = false,\n  labelFontUrl,\n  contextMenu,\n  onClick,\n  onDoubleClick,\n  onPointerOver,\n  onDragged,\n  onPointerOut,\n  onContextMenu,\n  renderNode,\n  constrainDragging\n}) => {\n  const cameraControls = useCameraControls();\n  const theme = useStore(state => state.theme);\n  const node = useStore(state => state.nodes.find(n => n.id === id));\n  const edges = useStore(state => state.edges);\n  const draggingIds = useStore(state => state.draggingIds);\n  const collapsedNodeIds = useStore(state => state.collapsedNodeIds);\n  const addDraggingId = useStore(state => state.addDraggingId);\n  const removeDraggingId = useStore(state => state.removeDraggingId);\n  const setHoveredNodeId = useStore(state => state.setHoveredNodeId);\n  const setNodePosition = useStore(state => state.setNodePosition);\n  const setCollapsedNodeIds = useStore(state => state.setCollapsedNodeIds);\n  const isCollapsed = useStore(state => state.collapsedNodeIds.includes(id));\n  const isActive = useStore(state => state.actives?.includes(id));\n  const isSelected = useStore(state => state.selections?.includes(id));\n  const hasSelections = useStore(state => state.selections?.length > 0);\n  const center = useStore(state => state.centerPosition);\n  const cluster = useStore(state => state.clusters.get(node.cluster));\n\n  const isDraggingCurrent = draggingIds.includes(id);\n  const isDragging = draggingIds.length > 0;\n\n  const {\n    position,\n    label,\n    subLabel,\n    size: nodeSize = 7,\n    labelVisible = true\n  } = node;\n\n  const group = useRef<Group | null>(null);\n  const [active, setActive] = useState<boolean>(false);\n  const [menuVisible, setMenuVisible] = useState<boolean>(false);\n\n  const shouldHighlight = active || isSelected || isActive;\n\n  const selectionOpacity = hasSelections\n    ? shouldHighlight\n      ? theme.node.selectedOpacity\n      : theme.node.inactiveOpacity\n    : theme.node.opacity;\n\n  const canCollapse = useMemo(() => {\n    // If the node has outgoing edges, it can collapse via context menu\n    const outboundLinks = edges.filter(l => l.source === id);\n\n    return outboundLinks.length > 0 || isCollapsed;\n  }, [edges, id, isCollapsed]);\n\n  const onCollapse = useCallback(() => {\n    if (canCollapse) {\n      if (isCollapsed) {\n        setCollapsedNodeIds(collapsedNodeIds.filter(p => p !== id));\n      } else {\n        setCollapsedNodeIds([...collapsedNodeIds, id]);\n      }\n    }\n  }, [canCollapse, collapsedNodeIds, id, isCollapsed, setCollapsedNodeIds]);\n\n  const [{ nodePosition, labelPosition }] = useSpring(\n    () => ({\n      from: {\n        nodePosition: center ? [center.x, center.y, 0] : [0, 0, 0],\n        labelPosition: [0, -(nodeSize + 7), 2]\n      },\n      to: {\n        nodePosition: position\n          ? [\n            position.x,\n            position.y,\n            shouldHighlight ? position.z + 1 : position.z\n          ]\n          : [0, 0, 0],\n        labelPosition: [0, -(nodeSize + 7), 2]\n      },\n      config: {\n        ...animationConfig,\n        duration: animated && !isDragging ? undefined : 0\n      }\n    }),\n    [isDraggingCurrent, position, animated, nodeSize, shouldHighlight]\n  );\n\n  const bind = useDrag({\n    draggable,\n    position,\n    // If dragging is constrained to the cluster, use the cluster's position as the bounds\n    bounds: constrainDragging ? cluster?.position : undefined,\n    // @ts-ignore\n    set: pos => setNodePosition(id, pos),\n    onDragStart: () => {\n      addDraggingId(id);\n      setActive(true);\n    },\n    onDragEnd: () => {\n      removeDraggingId(id);\n      onDragged?.(node);\n    }\n  });\n\n  useCursor(active && !isDragging && onClick !== undefined, 'pointer');\n  useCursor(\n    active && draggable && !isDraggingCurrent && onClick === undefined,\n    'grab'\n  );\n  useCursor(isDraggingCurrent, 'grabbing');\n\n  const combinedActiveState = shouldHighlight || isDraggingCurrent;\n  const color = combinedActiveState\n    ? theme.node.activeFill\n    : node.fill || theme.node.fill;\n\n  const { pointerOver, pointerOut } = useHoverIntent({\n    disabled: disabled || isDraggingCurrent,\n    onPointerOver: (event: ThreeEvent<PointerEvent>) => {\n      cameraControls.freeze();\n      setActive(true);\n      onPointerOver?.(node, event);\n      setHoveredNodeId(id);\n    },\n    onPointerOut: (event: ThreeEvent<PointerEvent>) => {\n      cameraControls.unFreeze();\n      setActive(false);\n      onPointerOut?.(node, event);\n      setHoveredNodeId(null);\n    }\n  });\n\n  const nodeComponent = useMemo(\n    () =>\n      renderNode ? (\n        renderNode({\n          id,\n          color,\n          size: nodeSize,\n          active: combinedActiveState,\n          opacity: selectionOpacity,\n          animated,\n          selected: isSelected,\n          node\n        })\n      ) : (\n        <>\n          {node.icon ? (\n            <Icon\n              id={id}\n              image={node.icon || ''}\n              size={nodeSize + 8}\n              opacity={selectionOpacity}\n              animated={animated}\n              color={color}\n              node={node}\n              active={combinedActiveState}\n              selected={isSelected}\n            />\n          ) : (\n            <Sphere\n              id={id}\n              size={nodeSize}\n              opacity={selectionOpacity}\n              animated={animated}\n              color={color}\n              node={node}\n              active={combinedActiveState}\n              selected={isSelected}\n            />\n          )}\n        </>\n      ),\n    [\n      renderNode,\n      id,\n      color,\n      nodeSize,\n      combinedActiveState,\n      selectionOpacity,\n      animated,\n      isSelected,\n      node\n    ]\n  );\n\n  const labelComponent = useMemo(\n    () =>\n      labelVisible &&\n      (labelVisible || isSelected || active) &&\n      label && (\n        <a.group position={labelPosition as any}>\n          <Label\n            text={label}\n            fontUrl={labelFontUrl}\n            opacity={selectionOpacity}\n            stroke={theme.node.label.stroke}\n            active={isSelected || active || isDraggingCurrent || isActive}\n            color={\n              isSelected || active || isDraggingCurrent || isActive\n                ? theme.node.label.activeColor\n                : theme.node.label.color\n            }\n          />\n          {subLabel && (\n            <group position={[0, -(nodeSize - 3), 0]}>\n              <Label\n                text={subLabel}\n                fontUrl={labelFontUrl}\n                fontSize={5}\n                opacity={selectionOpacity}\n                stroke={theme.node.subLabel?.stroke}\n                active={isSelected || active || isDraggingCurrent || isActive}\n                color={\n                  isSelected || active || isDraggingCurrent || isActive\n                    ? theme.node.subLabel?.activeColor\n                    : theme.node.subLabel?.color\n                }\n              />\n            </group>\n          )}\n        </a.group>\n      ),\n    [\n      active,\n      isActive,\n      isDraggingCurrent,\n      isSelected,\n      label,\n      labelFontUrl,\n      labelPosition,\n      labelVisible,\n      nodeSize,\n      selectionOpacity,\n      subLabel,\n      theme.node.label.activeColor,\n      theme.node.label.color,\n      theme.node.label.stroke,\n      theme.node.subLabel?.activeColor,\n      theme.node.subLabel?.color,\n      theme.node.subLabel?.stroke\n    ]\n  );\n\n  const menuComponent = useMemo(\n    () =>\n      menuVisible &&\n      contextMenu && (\n        <Html prepend={true} center={true}>\n          {contextMenu({\n            data: node,\n            canCollapse,\n            isCollapsed,\n            onCollapse,\n            onClose: () => setMenuVisible(false)\n          })}\n        </Html>\n      ),\n    [menuVisible, contextMenu, node, canCollapse, isCollapsed, onCollapse]\n  );\n\n  return (\n    <a.group\n      renderOrder={1}\n      userData={{ id, type: 'node' }}\n      ref={group}\n      position={nodePosition as any}\n      onPointerOver={pointerOver}\n      onPointerOut={pointerOut}\n      onClick={(event: ThreeEvent<MouseEvent>) => {\n        if (!disabled && !isDraggingCurrent) {\n          onClick?.(\n            node,\n            {\n              canCollapse,\n              isCollapsed\n            },\n            event\n          );\n        }\n      }}\n      onDoubleClick={(event: ThreeEvent<MouseEvent>) => {\n        if (!disabled && !isDraggingCurrent) {\n          onDoubleClick?.(node, event);\n        }\n      }}\n      onContextMenu={() => {\n        if (!disabled) {\n          setMenuVisible(true);\n          onContextMenu?.(node, {\n            canCollapse,\n            isCollapsed,\n            onCollapse\n          });\n        }\n      }}\n      {...(bind() as any)}\n    >\n      {nodeComponent}\n      {menuComponent}\n      {labelComponent}\n    </a.group>\n  );\n};\n","import { PerspectiveCamera } from 'three';\nimport { InternalGraphPosition } from '../types';\n\n/**\n * Get the visible height at the z depth.\n * Ref: https://discourse.threejs.org/t/functions-to-calculate-the-visible-width-height-at-a-given-z-depth-from-a-perspective-camera/269\n */\nfunction visibleHeightAtZDepth(depth: number, camera: PerspectiveCamera) {\n  // compensate for cameras not positioned at z=0\n  const cameraOffset = camera.position.z;\n  if (depth < cameraOffset) depth -= cameraOffset;\n  else depth += cameraOffset;\n\n  // vertical fov in radians\n  const vFOV = ((camera.fov / camera.zoom) * Math.PI) / 180;\n\n  // Math.abs to ensure the result is always positive\n  return 2 * Math.tan(vFOV / 2) * Math.abs(depth);\n}\n\n/**\n * Get the visible width at the z depth.\n */\nfunction visibleWidthAtZDepth(depth: number, camera: PerspectiveCamera) {\n  const height = visibleHeightAtZDepth(depth, camera);\n  return height * camera.aspect;\n}\n\n/**\n * Returns whether the node is in view of the camera.\n */\nexport function isNodeInView(\n  camera: PerspectiveCamera,\n  nodePosition: InternalGraphPosition\n): boolean {\n  const visibleWidth = visibleWidthAtZDepth(1, camera);\n  const visibleHeight = visibleHeightAtZDepth(1, camera);\n\n  // The boundary coordinates of the area visible to the camera relative to the scene\n  const visibleArea = {\n    x0: camera?.position?.x - visibleWidth / 2,\n    x1: camera?.position?.x + visibleWidth / 2,\n    y0: camera?.position?.y - visibleHeight / 2,\n    y1: camera?.position?.y + visibleHeight / 2\n  };\n\n  return (\n    nodePosition?.x > visibleArea.x0 &&\n    nodePosition?.x < visibleArea.x1 &&\n    nodePosition?.y > visibleArea.y0 &&\n    nodePosition?.y < visibleArea.y1\n  );\n}\n\n/**\n * Get the closest axis to a given angle.\n */\nexport function getClosestAxis(angle: number, axes: number[]) {\n  return axes.reduce((prev, curr) =>\n    Math.abs(curr - (angle % Math.PI)) < Math.abs(prev - (angle % Math.PI))\n      ? curr\n      : prev\n  );\n}\n\n/**\n * Get how far an angle is from the closest 2D axis in radians.\n */\nexport function getDegreesToClosest2dAxis(\n  horizontalAngle: number,\n  verticalAngle: number\n) {\n  const closestHorizontalAxis = getClosestAxis(horizontalAngle, [0, Math.PI]);\n  const closestVerticalAxis = getClosestAxis(verticalAngle, [\n    Math.PI / 2,\n    (3 * Math.PI) / 2\n  ]);\n\n  return {\n    horizontalRotation: closestHorizontalAxis - (horizontalAngle % Math.PI),\n    verticalRotation: closestVerticalAxis - (verticalAngle % Math.PI)\n  };\n}\n","import { useThree } from '@react-three/fiber';\nimport { useCameraControls } from '../CameraControls/useCameraControls';\nimport { useCallback, useLayoutEffect, useRef, useState } from 'react';\nimport { Vector3, Box3, PerspectiveCamera } from 'three';\nimport { getLayoutCenter } from '../utils/layout';\nimport { InternalGraphNode } from '../types';\nimport { useStore } from '../store';\nimport {\n  isNodeInView,\n  getDegreesToClosest2dAxis\n} from '../CameraControls/utils';\nimport { LayoutTypes } from '../layout/types';\n\nconst PADDING = 50;\n\nexport interface CenterNodesParams {\n  animated?: boolean;\n  centerOnlyIfNodesNotInView?: boolean;\n}\n\nexport interface FitNodesParams {\n  animated?: boolean;\n  fitOnlyIfNodesNotInView?: boolean;\n}\n\nexport interface CenterGraphInput {\n  /**\n   * Whether the animate the transition or not.\n   */\n  animated?: boolean;\n\n  /**\n   * Whether the center graph function is disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * The layout type of the graph used to determine rotation logic.\n   */\n  layoutType: LayoutTypes;\n}\n\nexport interface CenterGraphOutput {\n  /**\n   * Centers the graph on a specific node or list of nodes.\n   *\n   * @param nodes - An array of `InternalGraphNode` objects to center the graph on. If this parameter is omitted,\n   * the graph will be centered on all nodes.\n   *\n   * @param animated - A boolean flag that determines whether the centering action should be animated.\n   *\n   * @param centerOnlyIfNodesNotInView - A boolean flag that determines whether the graph should\n   * only be centered if the nodes specified by `nodes` are not currently in view. If this\n   * parameter is `true`, the graph will only be re-centered if one or more of the nodes\n   * specified by `nodes` are not currently visible in the viewport. If this parameter is\n   * `false` or omitted, the graph will be re-centered regardless of whether the nodes\n   * are currently in view.\n   */\n  centerNodes: (nodes: InternalGraphNode[], opts: CenterNodesParams) => void;\n\n  /**\n   * Centers the graph on a specific node or list of nodes.\n   *\n   * @param nodeIds - An array of node IDs to center the graph on. If this parameter is omitted,\n   * the graph will be centered on all nodes.\n   *\n   * @param opts.centerOnlyIfNodesNotInView - A boolean flag that determines whether the graph should\n   * only be centered if the nodes specified by `ids` are not currently in view. If this\n   * parameter is `true`, the graph will only be re-centered if one or more of the nodes\n   * specified by `ids` are not currently in view. If this parameter is\n   * `false` or omitted, the graph will be re-centered regardless of whether the nodes\n   * are currently in view.\n   */\n  centerNodesById: (nodeIds: string[], opts?: CenterNodesParams) => void;\n\n  /**\n   * Fit all the given nodes into view of the camera.\n   *\n   * @param nodeIds - An array of node IDs to fit the view on. If this parameter is omitted,\n   * the view will fit to all nodes.\n   *\n   * @param opts.fitOnlyIfNodesNotInView - A boolean flag that determines whether the view should\n   * only be fit if the nodes specified by `ids` are not currently in view. If this\n   * parameter is `true`, the view will only be fit if one or more of the nodes\n   * specified by `ids` are not currently visible in the viewport. If this parameter is\n   * `false` or omitted, the view will be fit regardless of whether the nodes\n   * are currently in view.\n   */\n  fitNodesInViewById: (nodeIds: string[], opts?: FitNodesParams) => void;\n\n  /**\n   * Whether the graph is centered or not.\n   */\n  isCentered?: boolean;\n}\n\nexport const useCenterGraph = ({\n  animated,\n  disabled,\n  layoutType\n}: CenterGraphInput): CenterGraphOutput => {\n  const nodes = useStore(state => state.nodes);\n  const [isCentered, setIsCentered] = useState<boolean>(false);\n  const invalidate = useThree(state => state.invalidate);\n  const { controls } = useCameraControls();\n  const camera = useThree(state => state.camera) as PerspectiveCamera;\n  const mounted = useRef<boolean>(false);\n\n  const centerNodes = useCallback(\n    async (nodes, opts?: CenterNodesParams) => {\n      const animated = opts?.animated !== undefined ? opts?.animated : true;\n      const centerOnlyIfNodesNotInView =\n        opts?.centerOnlyIfNodesNotInView !== undefined\n          ? opts?.centerOnlyIfNodesNotInView\n          : false;\n\n      if (\n        !mounted.current ||\n        !centerOnlyIfNodesNotInView ||\n        (centerOnlyIfNodesNotInView &&\n          nodes?.some(node => !isNodeInView(camera, node.position)))\n      ) {\n        // Centers the graph based on the central most node\n        const { x, y, z } = getLayoutCenter(nodes);\n\n        await controls.setTarget(x, y, z, animated);\n\n        if (!isCentered) {\n          setIsCentered(true);\n        }\n\n        invalidate();\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [invalidate, controls, nodes]\n  );\n\n  const fitNodesInView = useCallback(\n    async (\n      nodes,\n      opts: FitNodesParams = { animated: true, fitOnlyIfNodesNotInView: false }\n    ) => {\n      const { fitOnlyIfNodesNotInView } = opts;\n\n      if (\n        !fitOnlyIfNodesNotInView ||\n        (fitOnlyIfNodesNotInView &&\n          nodes?.some(node => !isNodeInView(camera, node.position)))\n      ) {\n        const { minX, maxX, minY, maxY, minZ, maxZ } = getLayoutCenter(nodes);\n\n        if (!layoutType.includes('3d')) {\n          // fitToBox will auto rotate to the closest axis including the z axis,\n          // which is not desired for 2D graphs\n          // So get the rotation to the closest flat axis for 2D graphs\n          const { horizontalRotation, verticalRotation } =\n            getDegreesToClosest2dAxis(\n              controls?.azimuthAngle,\n              controls?.polarAngle\n            );\n\n          void controls?.rotate(horizontalRotation, verticalRotation, true);\n        }\n\n        await controls?.zoomTo(1, opts?.animated);\n\n        await controls?.fitToBox(\n          new Box3(\n            new Vector3(minX, minY, minZ),\n            new Vector3(maxX, maxY, maxZ)\n          ),\n          opts?.animated,\n          {\n            cover: false,\n            paddingLeft: PADDING,\n            paddingRight: PADDING,\n            paddingBottom: PADDING,\n            paddingTop: PADDING\n          }\n        );\n      }\n    },\n    [camera, controls, layoutType]\n  );\n\n  const getNodesById = useCallback(\n    (nodeIds: string[]) => {\n      let mappedNodes: InternalGraphNode[] | null = null;\n\n      if (nodeIds?.length) {\n        // Map the node ids to the actual nodes\n        mappedNodes = nodeIds.reduce((acc, id) => {\n          const node = nodes.find(n => n.id === id);\n          if (node) {\n            acc.push(node);\n          } else {\n            throw new Error(\n              `Attempted to center ${id} but it was not found in the nodes`\n            );\n          }\n\n          return acc;\n        }, []);\n      }\n\n      return mappedNodes;\n    },\n    [nodes]\n  );\n\n  const centerNodesById = useCallback(\n    (nodeIds: string[], opts: CenterNodesParams) => {\n      const mappedNodes = getNodesById(nodeIds);\n\n      centerNodes(mappedNodes || nodes, {\n        animated,\n        centerOnlyIfNodesNotInView: opts?.centerOnlyIfNodesNotInView\n      });\n    },\n    [animated, centerNodes, getNodesById, nodes]\n  );\n\n  const fitNodesInViewById = useCallback(\n    async (nodeIds: string[], opts: FitNodesParams) => {\n      const mappedNodes = getNodesById(nodeIds);\n\n      await fitNodesInView(mappedNodes || nodes, { animated, ...opts });\n    },\n    [animated, fitNodesInView, getNodesById, nodes]\n  );\n\n  useLayoutEffect(() => {\n    async function load() {\n      // Once we've loaded controls and we have nodes, let's recenter\n      if (controls && nodes?.length) {\n        if (!mounted.current) {\n          // Center the graph once nodes are loaded on mount\n          await centerNodes(nodes, { animated: false });\n          await fitNodesInView(nodes, { animated: false });\n          mounted.current = true;\n        }\n      }\n    }\n\n    load();\n  }, [controls, centerNodes, nodes, animated, camera, fitNodesInView]);\n\n  return { centerNodes, centerNodesById, fitNodesInViewById, isCentered };\n};\n","import React, {\n  FC,\n  forwardRef,\n  Fragment,\n  ReactNode,\n  Ref,\n  useCallback,\n  useImperativeHandle,\n  useMemo\n} from 'react';\nimport { useGraph } from './useGraph';\nimport { LayoutOverrides, LayoutTypes } from './layout';\nimport {\n  NodeContextMenuProps,\n  ContextMenuEvent,\n  GraphEdge,\n  GraphNode,\n  InternalGraphEdge,\n  InternalGraphNode,\n  NodeRenderer,\n  CollapseProps,\n  ClusterRenderer\n} from './types';\nimport type { SizingType } from './sizing';\nimport type { ClusterEventArgs } from './symbols/Cluster';\nimport type { EdgeArrowPosition } from './symbols/edges/Edge';\nimport type { EdgeInterpolation, EdgeLabelPosition } from './symbols/Edge';\nimport type {\n  CenterNodesParams,\n  FitNodesParams\n} from './CameraControls/useCenterGraph';\nimport { Cluster } from './symbols/Cluster';\nimport { Edge } from './symbols/Edge';\nimport { Edges } from './symbols/edges';\nimport { Node } from './symbols';\nimport { useCenterGraph } from './CameraControls/useCenterGraph';\nimport { LabelVisibilityType } from './utils/visibility';\nimport { useStore } from './store';\nimport Graph from 'graphology';\nimport type { ThreeEvent } from '@react-three/fiber';\nimport { useThree } from '@react-three/fiber';\n\nexport interface GraphSceneProps {\n  /**\n   * Type of layout.\n   */\n  layoutType?: LayoutTypes;\n\n  /**\n   * List of ids that are selected.\n   */\n  selections?: string[];\n\n  /**\n   * List of ids that are active.\n   */\n  actives?: string[];\n\n  /**\n   * List of node ids that are collapsed.\n   */\n  collapsedNodeIds?: string[];\n\n  /**\n   * Animate or not the graph positions.\n   */\n  animated?: boolean;\n\n  /**\n   * Nodes to pass to the graph.\n   */\n  nodes: GraphNode[];\n\n  /**\n   * Edges to pass to the graph.\n   */\n  edges: GraphEdge[];\n\n  /**\n   * Context menu element.\n   */\n  contextMenu?: (event: ContextMenuEvent) => ReactNode;\n\n  /**\n   * Type of sizing for nodes.\n   */\n  sizingType?: SizingType;\n\n  /**\n   * Type of visibility for labels.\n   */\n  labelType?: LabelVisibilityType;\n\n  /**\n   * Place of visibility for edge labels.\n   */\n  edgeLabelPosition?: EdgeLabelPosition;\n\n  /**\n   * Placement of edge arrows.\n   */\n  edgeArrowPosition?: EdgeArrowPosition;\n\n  /**\n   * Shape of edge.\n   */\n  edgeInterpolation?: EdgeInterpolation;\n\n  /**\n   * Font of label, same as troika-three-text\n   * The URL of a custom font file to be used. Supported font formats are: * .ttf * .otf * .woff (.woff2 is not supported)\n   * Default: The Roboto font loaded from Google Fonts CDN\n   */\n  labelFontUrl?: string;\n\n  /**\n   * Attribute based sizing property.\n   */\n  sizingAttribute?: string;\n\n  /**\n   * The default size to size nodes to. Default is 7.\n   */\n  defaultNodeSize?: number;\n\n  /**\n   * When using sizing attributes, the min size a node can be.\n   */\n  minNodeSize?: number;\n\n  /**\n   * When using sizing attributes, the max size a node can be.\n   */\n  maxNodeSize?: number;\n\n  /**\n   * Attribute used for clustering.\n   */\n  clusterAttribute?: string;\n\n  /**\n   * Disable interactions or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Allow dragging of nodes.\n   */\n  draggable?: boolean;\n\n  /**\n   * Constrain dragging to the cluster bounds. Default is `false`.\n   */\n  constrainDragging?: boolean;\n\n  /**\n   * Render a custom node\n   */\n  renderNode?: NodeRenderer;\n\n  /**\n   * Render a custom cluster\n   */\n  onRenderCluster?: ClusterRenderer;\n\n  /**\n   * Advanced overrides for the layout.\n   */\n  layoutOverrides?: LayoutOverrides;\n\n  /**\n   * When a node was clicked.\n   */\n  onNodeClick?: (\n    node: InternalGraphNode,\n    props?: CollapseProps,\n    event?: ThreeEvent<MouseEvent>\n  ) => void;\n\n  /**\n   * When a node was double clicked.\n   */\n  onNodeDoubleClick?: (\n    node: InternalGraphNode,\n    event: ThreeEvent<MouseEvent>\n  ) => void;\n\n  /**\n   * When a node context menu happened.\n   */\n  onNodeContextMenu?: (\n    node: InternalGraphNode,\n    props?: NodeContextMenuProps\n  ) => void;\n\n  /**\n   * When node got a pointer over.\n   */\n  onNodePointerOver?: (\n    node: InternalGraphNode,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * When node lost pointer over.\n   */\n  onNodePointerOut?: (\n    node: InternalGraphNode,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * Triggered after a node was dragged.\n   */\n  onNodeDragged?: (node: InternalGraphNode) => void;\n\n  /**\n   * Triggered after a cluster was dragged.\n   */\n  onClusterDragged?: (cluster: ClusterEventArgs) => void;\n\n  /**\n   * When a edge context menu happened.\n   */\n  onEdgeContextMenu?: (edge?: InternalGraphEdge) => void;\n\n  /**\n   * When an edge was clicked.\n   */\n  onEdgeClick?: (\n    edge: InternalGraphEdge,\n    event?: ThreeEvent<MouseEvent>\n  ) => void;\n\n  /**\n   * When edge got a pointer over.\n   */\n  onEdgePointerOver?: (\n    edge: InternalGraphEdge,\n    event?: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * When edge lost pointer over.\n   */\n  onEdgePointerOut?: (\n    edge: InternalGraphEdge,\n    event?: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * When a cluster was clicked.\n   */\n  onClusterClick?: (\n    cluster: ClusterEventArgs,\n    event: ThreeEvent<MouseEvent>\n  ) => void;\n\n  /**\n   * When a cluster receives a pointer over event.\n   */\n  onClusterPointerOver?: (\n    cluster: ClusterEventArgs,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n\n  /**\n   * When cluster receives a pointer leave event.\n   */\n  onClusterPointerOut?: (\n    cluster: ClusterEventArgs,\n    event: ThreeEvent<PointerEvent>\n  ) => void;\n}\n\nexport interface GraphSceneRef {\n  /**\n   * Reference to the graph object.\n   */\n  graph: Graph;\n\n  /**\n   * Centers the graph on a specific node or list of nodes.\n   *\n   * @param nodeIds - An array of node IDs to center the graph on. If this parameter is omitted,\n   * the graph will be centered on all nodes.\n   *\n   * @param opts.centerOnlyIfNodesNotInView - A boolean flag that determines whether the graph should\n   * only be centered if the nodes specified by `ids` are not currently in view. If this\n   * parameter is `true`, the graph will only be re-centered if one or more of the nodes\n   * specified by `ids` are not currently in view. If this parameter is\n   * `false` or omitted, the graph will be re-centered regardless of whether the nodes\n   * are currently in view.\n   */\n  centerGraph: (nodeIds?: string[], opts?: CenterNodesParams) => void;\n\n  /**\n   * Fit all the given nodes into view of the camera.\n   *\n   * @param nodeIds - An array of node IDs to fit the view on. If this parameter is omitted,\n   * the view will fit to all nodes.\n   *\n   * @param opts.fitOnlyIfNodesNotInView - A boolean flag that determines whether the view should\n   * only be fit if the nodes specified by `ids` are not currently in view. If this\n   * parameter is `true`, the view will only be fit if one or more of the nodes\n   * specified by `ids` are not currently visible in the viewport. If this parameter is\n   * `false` or omitted, the view will be fit regardless of whether the nodes\n   * are currently in view.\n   */\n  fitNodesInView: (nodeIds?: string[], opts?: FitNodesParams) => void;\n\n  /**\n   * Calls render scene on the graph. this is useful when you want to manually render the graph\n   * for things like screenshots.\n   */\n  renderScene: () => void;\n}\n\nexport const GraphScene: FC<GraphSceneProps & { ref?: Ref<GraphSceneRef> }> =\n  forwardRef(\n    (\n      {\n        onNodeClick,\n        onNodeDoubleClick,\n        onNodeContextMenu,\n        onEdgeContextMenu,\n        onEdgeClick,\n        onEdgePointerOver,\n        onEdgePointerOut,\n        onNodePointerOver,\n        onNodePointerOut,\n        onClusterClick,\n        onNodeDragged,\n        onClusterDragged,\n        onClusterPointerOver,\n        onClusterPointerOut,\n        contextMenu,\n        animated,\n        disabled,\n        draggable,\n        constrainDragging = false,\n        edgeLabelPosition,\n        edgeArrowPosition,\n        edgeInterpolation = 'linear',\n        labelFontUrl,\n        renderNode,\n        onRenderCluster,\n        ...rest\n      },\n      ref\n    ) => {\n      const { layoutType, clusterAttribute } = rest;\n\n      // Get the gl/scene/camera for render shortcuts\n      const gl = useThree(state => state.gl);\n      const scene = useThree(state => state.scene);\n      const camera = useThree(state => state.camera);\n\n      // Mount and build the graph\n      const { updateLayout } = useGraph({ ...rest, constrainDragging });\n\n      if (\n        clusterAttribute &&\n        !(layoutType === 'forceDirected2d' || layoutType === 'forceDirected3d')\n      ) {\n        throw new Error(\n          'Clustering is only supported for the force directed layouts.'\n        );\n      }\n\n      // Get the graph and nodes via the store for memo\n      const graph = useStore(state => state.graph);\n      const nodes = useStore(state => state.nodes);\n      const edges = useStore(state => state.edges);\n      const clusters = useStore(state => [...state.clusters.values()]);\n\n      // Center the graph on the nodes\n      const { centerNodesById, fitNodesInViewById, isCentered } =\n        useCenterGraph({\n          animated,\n          disabled,\n          layoutType\n        });\n\n      // Let's expose some helper methods\n      useImperativeHandle(\n        ref,\n        () => ({\n          centerGraph: centerNodesById,\n          fitNodesInView: fitNodesInViewById,\n          graph,\n          renderScene: () => gl.render(scene, camera)\n        }),\n        [centerNodesById, fitNodesInViewById, graph, gl, scene, camera]\n      );\n\n      const onNodeDraggedHandler = useCallback(\n        (node: InternalGraphNode) => {\n          onNodeDragged?.(node);\n\n          // Update layout to recalculate the cluster positions when a node is dragged\n          if (clusterAttribute) {\n            updateLayout();\n          }\n        },\n        [clusterAttribute, onNodeDragged, updateLayout]\n      );\n\n      const nodeComponents = useMemo(\n        () =>\n          nodes.map(n => (\n            <Node\n              key={n?.id}\n              id={n?.id}\n              labelFontUrl={labelFontUrl}\n              draggable={draggable}\n              constrainDragging={constrainDragging}\n              disabled={disabled}\n              animated={animated}\n              contextMenu={contextMenu}\n              renderNode={renderNode}\n              onClick={onNodeClick}\n              onDoubleClick={onNodeDoubleClick}\n              onContextMenu={onNodeContextMenu}\n              onPointerOver={onNodePointerOver}\n              onPointerOut={onNodePointerOut}\n              onDragged={onNodeDraggedHandler}\n            />\n          )),\n        [\n          constrainDragging,\n          animated,\n          contextMenu,\n          disabled,\n          draggable,\n          labelFontUrl,\n          nodes,\n          onNodeClick,\n          onNodeContextMenu,\n          onNodeDoubleClick,\n          onNodeDraggedHandler,\n          onNodePointerOut,\n          onNodePointerOver,\n          renderNode\n        ]\n      );\n\n      const edgeComponents = useMemo(\n        () =>\n          animated ? (\n            edges.map(e => (\n              <Edge\n                key={e.id}\n                id={e.id}\n                disabled={disabled}\n                animated={animated}\n                labelFontUrl={labelFontUrl}\n                labelPlacement={edgeLabelPosition}\n                arrowPlacement={edgeArrowPosition}\n                interpolation={edgeInterpolation}\n                contextMenu={contextMenu}\n                onClick={onEdgeClick}\n                onContextMenu={onEdgeContextMenu}\n                onPointerOver={onEdgePointerOver}\n                onPointerOut={onEdgePointerOut}\n              />\n            ))\n          ) : (\n            <Edges\n              edges={edges}\n              disabled={disabled}\n              animated={animated}\n              labelFontUrl={labelFontUrl}\n              labelPlacement={edgeLabelPosition}\n              arrowPlacement={edgeArrowPosition}\n              interpolation={edgeInterpolation}\n              contextMenu={contextMenu}\n              onClick={onEdgeClick}\n              onContextMenu={onEdgeContextMenu}\n              onPointerOver={onEdgePointerOver}\n              onPointerOut={onEdgePointerOut}\n            />\n          ),\n        [\n          animated,\n          contextMenu,\n          disabled,\n          edgeArrowPosition,\n          edgeInterpolation,\n          edgeLabelPosition,\n          edges,\n          labelFontUrl,\n          onEdgeClick,\n          onEdgeContextMenu,\n          onEdgePointerOut,\n          onEdgePointerOver\n        ]\n      );\n\n      const clusterComponents = useMemo(\n        () =>\n          clusters.map(c => (\n            <Cluster\n              key={c.label}\n              animated={animated}\n              disabled={disabled}\n              draggable={draggable}\n              labelFontUrl={labelFontUrl}\n              onClick={onClusterClick}\n              onPointerOver={onClusterPointerOver}\n              onPointerOut={onClusterPointerOut}\n              onDragged={onClusterDragged}\n              onRender={onRenderCluster}\n              {...c}\n            />\n          )),\n        [\n          animated,\n          clusters,\n          disabled,\n          draggable,\n          labelFontUrl,\n          onClusterClick,\n          onClusterPointerOut,\n          onClusterPointerOver,\n          onClusterDragged,\n          onRenderCluster\n        ]\n      );\n\n      return (\n        isCentered && (\n          <Fragment>\n            {edgeComponents}\n            {nodeComponents}\n            {clusterComponents}\n          </Fragment>\n        )\n      );\n    }\n  );\n","import React, {\n  FC,\n  useRef,\n  useEffect,\n  useCallback,\n  forwardRef,\n  Ref,\n  useImperativeHandle,\n  useMemo,\n  ReactNode,\n  useState\n} from 'react';\nimport { useThree, useFrame, extend } from '@react-three/fiber';\nimport {\n  MOUSE,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion,\n  Matrix4,\n  Spherical,\n  Box3,\n  Sphere,\n  Raycaster,\n  MathUtils\n} from 'three';\nimport ThreeCameraControls from 'camera-controls';\nimport {\n  CameraControlsContext,\n  CameraControlsContextProps\n} from './useCameraControls';\nimport * as holdEvent from 'hold-event';\nimport { useStore } from '../store';\nimport { isServerRender } from '../utils/visibility';\n\n// Install the camera controls\n// Use a subset for better three shaking\nThreeCameraControls.install({\n  THREE: {\n    MOUSE: MOUSE,\n    Vector2: Vector2,\n    Vector3: Vector3,\n    Vector4: Vector4,\n    Quaternion: Quaternion,\n    Matrix4: Matrix4,\n    Spherical: Spherical,\n    Box3: Box3,\n    Sphere: Sphere,\n    Raycaster: Raycaster,\n    MathUtils: {\n      DEG2RAD: MathUtils?.DEG2RAD,\n      clamp: MathUtils?.clamp\n    }\n  }\n});\n\n// Extend r3f with the new controls\nextend({ ThreeCameraControls });\n\nconst KEY_CODES = {\n  ARROW_LEFT: 37,\n  ARROW_UP: 38,\n  ARROW_RIGHT: 39,\n  ARROW_DOWN: 40\n};\n\nexport type CameraMode = 'pan' | 'rotate' | 'orbit';\n\nexport interface CameraControlsProps {\n  /**\n   * Mode of the camera.\n   */\n  mode?: CameraMode;\n\n  /**\n   * Children symbols.\n   */\n  children?: ReactNode;\n\n  /**\n   * Animate transitions to centering.\n   */\n  animated?: boolean;\n\n  /**\n   * Whether the controls are enabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * The maximum distance for the camera.\n   */\n  maxDistance?: number;\n\n  /**\n   * The minimum distance for the camera.\n   */\n  minDistance?: number;\n}\n\nexport type CameraControlsRef = CameraControlsContextProps;\n\nexport const CameraControls: FC<\n  CameraControlsProps & { ref?: Ref<CameraControlsRef> }\n> = forwardRef(\n  (\n    {\n      mode = 'rotate',\n      children,\n      animated,\n      disabled,\n      minDistance = 1000,\n      maxDistance = 50000\n    },\n    ref: Ref<CameraControlsRef>\n  ) => {\n    const cameraRef = useRef<ThreeCameraControls | null>(null);\n    const camera = useThree(state => state.camera);\n    const gl = useThree(state => state.gl);\n    const isOrbiting = mode === 'orbit';\n    const setPanning = useStore(state => state.setPanning);\n    const isDragging = useStore(state => state.draggingIds.length > 0);\n    const cameraSpeedRef = useRef(0);\n    const [controlMounted, setControlMounted] = useState<boolean>(false);\n\n    useFrame((_state, delta) => {\n      if (cameraRef.current?.enabled) {\n        cameraRef.current?.update(delta);\n      }\n\n      if (isOrbiting) {\n        cameraRef.current.azimuthAngle += 20 * delta * MathUtils.DEG2RAD;\n      }\n    }, -1);\n\n    useEffect(() => () => cameraRef.current?.dispose(), []);\n\n    const zoomIn = useCallback(() => {\n      cameraRef.current?.zoom(camera.zoom / 2, animated);\n    }, [animated, camera.zoom]);\n\n    const zoomOut = useCallback(() => {\n      cameraRef.current?.zoom(-camera.zoom / 2, animated);\n    }, [animated, camera.zoom]);\n\n    const dollyIn = useCallback(\n      distance => {\n        cameraRef.current?.dolly(distance, animated);\n      },\n      [animated]\n    );\n\n    const dollyOut = useCallback(\n      distance => {\n        cameraRef.current?.dolly(distance, animated);\n      },\n      [animated]\n    );\n\n    const panRight = useCallback(\n      event => {\n        if (!isOrbiting) {\n          cameraRef.current?.truck(-0.03 * event.deltaTime, 0, animated);\n        }\n      },\n      [animated, isOrbiting]\n    );\n\n    const panLeft = useCallback(\n      event => {\n        if (!isOrbiting) {\n          cameraRef.current?.truck(0.03 * event.deltaTime, 0, animated);\n        }\n      },\n      [animated, isOrbiting]\n    );\n\n    const panUp = useCallback(\n      event => {\n        if (!isOrbiting) {\n          cameraRef.current?.truck(0, 0.03 * event.deltaTime, animated);\n        }\n      },\n      [animated, isOrbiting]\n    );\n\n    const panDown = useCallback(\n      event => {\n        if (!isOrbiting) {\n          cameraRef.current?.truck(0, -0.03 * event.deltaTime, animated);\n        }\n      },\n      [animated, isOrbiting]\n    );\n\n    const onKeyDown = useCallback(\n      event => {\n        if (event.code === 'Space') {\n          if (mode === 'rotate') {\n            cameraRef.current.mouseButtons.left =\n              ThreeCameraControls.ACTION.TRUCK;\n          } else {\n            cameraRef.current.mouseButtons.left =\n              ThreeCameraControls.ACTION.ROTATE;\n          }\n        }\n      },\n      [mode]\n    );\n\n    const onKeyUp = useCallback(\n      event => {\n        if (event.code === 'Space') {\n          if (mode === 'rotate') {\n            cameraRef.current.mouseButtons.left =\n              ThreeCameraControls.ACTION.ROTATE;\n          } else {\n            cameraRef.current.mouseButtons.left =\n              ThreeCameraControls.ACTION.TRUCK;\n          }\n        }\n      },\n      [mode]\n    );\n\n    const [keyControls, setKeyControls] = useState<{\n      leftKey: holdEvent.KeyboardKeyHold;\n      rightKey: holdEvent.KeyboardKeyHold;\n      upKey: holdEvent.KeyboardKeyHold;\n      downKey: holdEvent.KeyboardKeyHold;\n    } | null>(null);\n\n    useEffect(() => {\n      // Only initialize on client side\n      if (!isServerRender) {\n        setKeyControls({\n          leftKey: new holdEvent.KeyboardKeyHold(KEY_CODES.ARROW_LEFT, 100),\n          rightKey: new holdEvent.KeyboardKeyHold(KEY_CODES.ARROW_RIGHT, 100),\n          upKey: new holdEvent.KeyboardKeyHold(KEY_CODES.ARROW_UP, 100),\n          downKey: new holdEvent.KeyboardKeyHold(KEY_CODES.ARROW_DOWN, 100)\n        });\n      }\n    }, []);\n\n    useEffect(() => {\n      if (!disabled && keyControls) {\n        keyControls.leftKey.addEventListener('holding', panLeft);\n        keyControls.rightKey.addEventListener('holding', panRight);\n        keyControls.upKey.addEventListener('holding', panUp);\n        keyControls.downKey.addEventListener('holding', panDown);\n\n        window.addEventListener('keydown', onKeyDown);\n        window.addEventListener('keyup', onKeyUp);\n      }\n\n      return () => {\n        if (keyControls) {\n          keyControls.leftKey.removeEventListener('holding', panLeft);\n          keyControls.rightKey.removeEventListener('holding', panRight);\n          keyControls.upKey.removeEventListener('holding', panUp);\n          keyControls.downKey.removeEventListener('holding', panDown);\n\n          window.removeEventListener('keydown', onKeyDown);\n          window.removeEventListener('keyup', onKeyUp);\n        }\n      };\n    }, [\n      disabled,\n      onKeyDown,\n      onKeyUp,\n      panDown,\n      panLeft,\n      panRight,\n      panUp,\n      keyControls\n    ]);\n\n    useEffect(() => {\n      if (disabled) {\n        cameraRef.current.mouseButtons.left = ThreeCameraControls.ACTION.NONE;\n        cameraRef.current.mouseButtons.middle = ThreeCameraControls.ACTION.NONE;\n        cameraRef.current.mouseButtons.wheel = ThreeCameraControls.ACTION.NONE;\n      } else {\n        cameraRef.current.mouseButtons.left = ThreeCameraControls.ACTION.TRUCK;\n        cameraRef.current.mouseButtons.middle =\n          ThreeCameraControls.ACTION.TRUCK;\n        cameraRef.current.mouseButtons.wheel = ThreeCameraControls.ACTION.DOLLY;\n      }\n    }, [disabled]);\n\n    useEffect(() => {\n      const onControl = () => setPanning(true);\n      const onControlEnd = () => setPanning(false);\n\n      const ref = cameraRef.current;\n      if (ref) {\n        ref.addEventListener('control', onControl);\n        ref.addEventListener('controlend', onControlEnd);\n      }\n\n      return () => {\n        if (ref) {\n          ref.removeEventListener('control', onControl);\n          ref.removeEventListener('controlend', onControlEnd);\n        }\n      };\n    }, [cameraRef, setPanning]);\n\n    useEffect(() => {\n      // If a node is being dragged, disable the camera controls\n      if (isDragging) {\n        cameraRef.current.mouseButtons.left = ThreeCameraControls.ACTION.NONE;\n        cameraRef.current.touches.one = ThreeCameraControls.ACTION.NONE;\n      } else {\n        if (mode === 'rotate') {\n          cameraRef.current.mouseButtons.left =\n            ThreeCameraControls.ACTION.ROTATE;\n          cameraRef.current.touches.one =\n            ThreeCameraControls.ACTION.TOUCH_ROTATE;\n        } else {\n          cameraRef.current.touches.one =\n            ThreeCameraControls.ACTION.TOUCH_TRUCK;\n          cameraRef.current.mouseButtons.left =\n            ThreeCameraControls.ACTION.TRUCK;\n        }\n      }\n    }, [isDragging, mode]);\n\n    const values = useMemo(\n      () => ({\n        controls: cameraRef.current,\n        zoomIn: () => zoomIn(),\n        zoomOut: () => zoomOut(),\n        dollyIn: (distance = 1000) => dollyIn(distance),\n        dollyOut: (distance = -1000) => dollyOut(distance),\n        panLeft: (deltaTime = 100) => panLeft({ deltaTime }),\n        panRight: (deltaTime = 100) => panRight({ deltaTime }),\n        panDown: (deltaTime = 100) => panDown({ deltaTime }),\n        panUp: (deltaTime = 100) => panUp({ deltaTime }),\n        resetControls: (animated?: boolean) =>\n          cameraRef.current?.reset(animated),\n        freeze: () => {\n          // Save the current speed\n          if (cameraRef.current.truckSpeed) {\n            cameraSpeedRef.current = cameraRef.current.truckSpeed;\n          }\n          cameraRef.current.truckSpeed = 0;\n        },\n        unFreeze: () => (cameraRef.current.truckSpeed = cameraSpeedRef.current)\n      }),\n      // eslint-disable-next-line\n      [zoomIn, zoomOut, panLeft, panRight, panDown, panUp, cameraRef.current]\n    );\n\n    useImperativeHandle(ref, () => values);\n\n    return (\n      <CameraControlsContext.Provider value={values}>\n        <threeCameraControls\n          ref={controls => {\n            cameraRef.current = controls;\n            if (!controlMounted) {\n              // Update the state when the controls are mounted to notify about it component that using that controls\n              setControlMounted(true);\n            }\n          }}\n          args={[camera, gl.domElement]}\n          smoothTime={0.1}\n          minDistance={minDistance}\n          dollyToCursor\n          maxDistance={maxDistance}\n        />\n        {children}\n      </CameraControlsContext.Provider>\n    );\n  }\n);\n","import { Theme } from './theme';\n\nexport const darkTheme: Theme = {\n  canvas: { background: '#1E2026' },\n  node: {\n    fill: '#7A8C9E',\n    activeFill: '#1DE9AC',\n    opacity: 1,\n    selectedOpacity: 1,\n    inactiveOpacity: 0.2,\n    label: { stroke: '#1E2026', color: '#ACBAC7', activeColor: '#1DE9AC' },\n    subLabel: { stroke: '#1E2026', color: '#ACBAC7', activeColor: '#1DE9AC' }\n  },\n  lasso: { border: '1px solid #55aaff', background: 'rgba(75, 160, 255, 0.1)' },\n  ring: { fill: '#54616D', activeFill: '#1DE9AC' },\n  edge: {\n    fill: '#474B56',\n    activeFill: '#1DE9AC',\n    opacity: 1,\n    selectedOpacity: 1,\n    inactiveOpacity: 0.1,\n    label: {\n      stroke: '#1E2026',\n      color: '#ACBAC7',\n      activeColor: '#1DE9AC',\n      fontSize: 6\n    },\n    subLabel: {\n      stroke: '#1E2026',\n      color: '#ACBAC7',\n      activeColor: '#1DE9AC'\n    }\n  },\n  arrow: { fill: '#474B56', activeFill: '#1DE9AC' },\n  cluster: {\n    stroke: '#474B56',\n    opacity: 1,\n    selectedOpacity: 1,\n    inactiveOpacity: 0.1,\n    label: { stroke: '#1E2026', color: '#ACBAC7' }\n  }\n};\n","import { Theme } from './theme';\n\nexport const lightTheme: Theme = {\n  canvas: { background: '#fff' },\n  node: {\n    fill: '#7CA0AB',\n    activeFill: '#1DE9AC',\n    opacity: 1,\n    selectedOpacity: 1,\n    inactiveOpacity: 0.2,\n    label: { color: '#2A6475', stroke: '#fff', activeColor: '#1DE9AC' },\n    subLabel: { color: '#ddd', stroke: 'transparent', activeColor: '#1DE9AC' }\n  },\n  lasso: { border: '1px solid #55aaff', background: 'rgba(75, 160, 255, 0.1)' },\n  ring: { fill: '#D8E6EA', activeFill: '#1DE9AC' },\n  edge: {\n    fill: '#D8E6EA',\n    activeFill: '#1DE9AC',\n    opacity: 1,\n    selectedOpacity: 1,\n    inactiveOpacity: 0.1,\n    label: {\n      stroke: '#fff',\n      color: '#2A6475',\n      activeColor: '#1DE9AC',\n      fontSize: 6\n    },\n    subLabel: {\n      color: '#ddd',\n      stroke: 'transparent',\n      activeColor: '#1DE9AC'\n    }\n  },\n  arrow: { fill: '#D8E6EA', activeFill: '#1DE9AC' },\n  cluster: {\n    stroke: '#D8E6EA',\n    opacity: 1,\n    selectedOpacity: 1,\n    inactiveOpacity: 0.1,\n    label: { stroke: '#fff', color: '#2A6475' }\n  }\n};\n","import { Theme } from '../themes';\nimport Graph from 'graphology';\n\nexport type PathSelectionTypes = 'direct' | 'out' | 'in' | 'all';\n\n/**\n * Given a graph and a list of node ids, return the adjacent nodes and edges.\n *\n * TODO: This method could be improved with the introduction of graphology\n */\nexport function getAdjacents(\n  graph: Graph,\n  nodeIds: string | string[],\n  type: PathSelectionTypes\n) {\n  nodeIds = Array.isArray(nodeIds) ? nodeIds : [nodeIds];\n\n  const nodes: string[] = [];\n  const edges: string[] = [];\n\n  for (const nodeId of nodeIds) {\n    const graphLinks = [\n      ...(graph.inEdgeEntries(nodeId) ?? []),\n      ...(graph.outEdgeEntries(nodeId) ?? [])\n    ];\n\n    if (!graphLinks) {\n      continue;\n    }\n\n    for (const link of graphLinks) {\n      const linkId = link.attributes.id;\n\n      if (type === 'in') {\n        if (link.target === nodeId && !edges.includes(linkId)) {\n          edges.push(linkId);\n        }\n      } else if (type === 'out') {\n        if (link.source === nodeId && !edges.includes(linkId)) {\n          edges.push(linkId);\n        }\n      } else {\n        if (!edges.includes(linkId)) {\n          edges.push(linkId);\n        }\n      }\n\n      if (type === 'out' || type === 'all') {\n        const toId = link.target;\n        if (!nodes.includes(toId as string)) {\n          nodes.push(toId as string);\n        }\n      }\n\n      if (type === 'in' || type === 'all') {\n        if (!nodes.includes(link.source)) {\n          nodes.push(link.source as string);\n        }\n      }\n    }\n  }\n\n  return {\n    nodes,\n    edges\n  };\n}\n\n/**\n * Set the vectors.\n */\nexport function prepareRay(event, vec, size) {\n  const { offsetX, offsetY } = event;\n  const { width, height } = size;\n  vec.set((offsetX / width) * 2 - 1, -(offsetY / height) * 2 + 1);\n}\n\n/**\n * Create a lasso element.\n */\nexport function createElement(theme: Theme) {\n  const element = document.createElement('div');\n  element.style.pointerEvents = 'none';\n  element.style.border = theme.lasso.border;\n  element.style.backgroundColor = theme.lasso.background;\n  element.style.position = 'fixed';\n  return element;\n}\n","import React, {\n  FC,\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useRef\n} from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { SelectionBox } from 'three-stdlib';\nimport { Mesh, Scene, TubeGeometry, Vector2 } from 'three';\nimport { useCameraControls } from '../CameraControls/useCameraControls';\nimport { useStore } from '../store';\nimport { createElement, prepareRay } from './utils';\n\nexport type LassoType = 'none' | 'all' | 'node' | 'edge';\n\nexport type LassoProps = PropsWithChildren<{\n  /**\n   * Whether the lasso tool is disabled.\n   */\n  disabled?: boolean;\n\n  /**\n   * The type of the lasso tool.\n   */\n  type?: LassoType;\n\n  /**\n   * A function that is called when the lasso tool is used to select nodes.\n   * The function receives an array of the ids of the selected nodes.\n   */\n  onLasso?: (selections: string[]) => void;\n\n  /**\n   * A function that is called when the lasso tool is released, ending the selection.\n   * The function receives an array of the ids of the selected nodes.\n   */\n  onLassoEnd?: (selections: string[]) => void;\n}>;\n\nexport const Lasso: FC<LassoProps> = ({\n  children,\n  type = 'none',\n  onLasso,\n  onLassoEnd,\n  disabled\n}) => {\n  const theme = useStore(state => state.theme);\n  const camera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const setEvents = useThree(state => state.setEvents);\n  const size = useThree(state => state.size);\n  const get = useThree(state => state.get);\n  const scene = useThree(state => state.scene);\n\n  const cameraControls = useCameraControls();\n\n  const actives = useStore(state => state.actives);\n  const setActives = useStore(state => state.setActives);\n  const edges = useStore(state => state.edges);\n  const edgeMeshes = useStore(state => state.edgeMeshes);\n\n  const selectionBoxRef = useRef<SelectionBox | null>(null);\n  const edgeMeshSelectionBoxRef = useRef<SelectionBox | null>(null);\n  const elementRef = useRef<HTMLDivElement>(createElement(theme));\n  const vectorsRef = useRef<[Vector2, Vector2, Vector2] | null>(null);\n  const isDownRef = useRef(false);\n  const oldRaycasterEnabledRef = useRef<boolean>(get().events.enabled);\n  const oldControlsEnabledRef = useRef<boolean>(\n    cameraControls.controls?.enabled\n  );\n\n  const onPointerMove = useCallback(\n    event => {\n      if (isDownRef.current) {\n        const [startPoint, pointTopLeft, pointBottomRight] = vectorsRef.current;\n\n        pointBottomRight.x = Math.max(startPoint.x, event.clientX);\n        pointBottomRight.y = Math.max(startPoint.y, event.clientY);\n        pointTopLeft.x = Math.min(startPoint.x, event.clientX);\n        pointTopLeft.y = Math.min(startPoint.y, event.clientY);\n        elementRef.current.style.left = `${pointTopLeft.x}px`;\n        elementRef.current.style.top = `${pointTopLeft.y}px`;\n        elementRef.current.style.width = `${\n          pointBottomRight.x - pointTopLeft.x\n        }px`;\n        elementRef.current.style.height = `${\n          pointBottomRight.y - pointTopLeft.y\n        }px`;\n\n        prepareRay(event, selectionBoxRef.current.endPoint, size);\n        prepareRay(event, edgeMeshSelectionBoxRef.current.endPoint, size);\n\n        const allSelected = [];\n        const edgesSelected = edgeMeshSelectionBoxRef.current\n          .select()\n          .sort(o => (o as any).uuid)\n          .map(\n            edge => edges[edgeMeshes.indexOf(edge as Mesh<TubeGeometry>)].id\n          );\n        allSelected.push(...edgesSelected);\n\n        const selected = selectionBoxRef.current\n          .select()\n          .sort(o => (o as any).uuid)\n          .filter(\n            o =>\n              o.isMesh &&\n              o.userData?.id &&\n              (o.userData?.type === type || type === 'all')\n          )\n          .map(o => o.userData.id);\n        allSelected.push(...selected);\n\n        // Note: This probably isn't the best solution but\n        // it prevents the render thrashing and causing flickering\n        requestAnimationFrame(() => {\n          setActives(allSelected);\n          onLasso?.(allSelected);\n        });\n\n        document.addEventListener('pointermove', onPointerMove, {\n          passive: true,\n          capture: true,\n          once: true\n        });\n      }\n    },\n    [size, edges, edgeMeshes, type, setActives, onLasso]\n  );\n\n  const onPointerUp = useCallback(() => {\n    if (isDownRef.current) {\n      setEvents({ enabled: oldRaycasterEnabledRef.current });\n      isDownRef.current = false;\n      elementRef.current.parentElement?.removeChild(elementRef.current);\n      cameraControls.controls.enabled = oldControlsEnabledRef.current;\n      onLassoEnd?.(actives);\n\n      document.removeEventListener('pointermove', onPointerMove);\n      document.removeEventListener('pointerup', onPointerUp);\n    }\n  }, [setEvents, cameraControls.controls, onLassoEnd, actives, onPointerMove]);\n\n  const onPointerDown = useCallback(\n    event => {\n      if (event.shiftKey) {\n        // Let's capture the old props to restore them later\n        oldRaycasterEnabledRef.current = get().events.enabled;\n        oldControlsEnabledRef.current = cameraControls.controls?.enabled;\n\n        // SelectionBox for all meshes\n        selectionBoxRef.current = new SelectionBox(camera, scene);\n\n        // SelectionBox for all Edge meshes (since they are combined into one geometry for rendering)\n        const edgeScene = new Scene();\n        if (edgeMeshes.length) {\n          edgeScene.add(...edgeMeshes);\n        }\n        edgeMeshSelectionBoxRef.current = new SelectionBox(camera, edgeScene);\n\n        vectorsRef.current = [\n          // start point\n          new Vector2(),\n          // point top left\n          new Vector2(),\n          // point bottom right\n          new Vector2()\n        ];\n\n        const [startPoint] = vectorsRef.current;\n\n        cameraControls.controls.enabled = false;\n        setEvents({ enabled: false });\n        isDownRef.current = true;\n        gl.domElement.parentElement?.appendChild(elementRef.current);\n        elementRef.current.style.left = `${event.clientX}px`;\n        elementRef.current.style.top = `${event.clientY}px`;\n        elementRef.current.style.width = '0px';\n        elementRef.current.style.height = '0px';\n        startPoint.x = event.clientX;\n        startPoint.y = event.clientY;\n\n        prepareRay(event, selectionBoxRef.current.startPoint, size);\n        prepareRay(event, edgeMeshSelectionBoxRef.current.startPoint, size);\n\n        document.addEventListener('pointermove', onPointerMove, {\n          passive: true,\n          capture: true,\n          once: true\n        });\n        document.addEventListener('pointerup', onPointerUp, { passive: true });\n      }\n    },\n    [\n      camera,\n      cameraControls.controls,\n      edgeMeshes,\n      get,\n      gl.domElement.parentElement,\n      onPointerMove,\n      onPointerUp,\n      scene,\n      setEvents,\n      size\n    ]\n  );\n\n  useEffect(() => {\n    if (disabled || type === 'none') {\n      return;\n    }\n\n    if (typeof window !== 'undefined') {\n      document.addEventListener('pointerdown', onPointerDown, {\n        passive: true\n      });\n      document.addEventListener('pointermove', onPointerMove, {\n        passive: true\n      });\n      document.addEventListener('pointerup', onPointerUp, { passive: true });\n    }\n\n    return () => {\n      if (typeof window !== 'undefined') {\n        document.removeEventListener('pointerdown', onPointerDown);\n        document.removeEventListener('pointermove', onPointerMove);\n        document.removeEventListener('pointerup', onPointerUp);\n      }\n    };\n  }, [type, disabled, onPointerDown, onPointerMove, onPointerUp]);\n\n  return <group>{children}</group>;\n};\n","import React, {\n  FC,\n  forwardRef,\n  ReactNode,\n  Ref,\n  Suspense,\n  useImperativeHandle,\n  useRef,\n  useMemo\n} from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport { GraphScene } from '../GraphScene';\nimport type { GraphSceneProps, GraphSceneRef } from '../GraphScene';\nimport { CameraControls } from '../CameraControls';\nimport type { CameraMode, CameraControlsRef } from '../CameraControls';\nimport { Theme, lightTheme } from '../themes';\nimport { createStore, Provider } from '../store';\nimport Graph from 'graphology';\nimport { Lasso } from '../selection/Lasso';\nimport type { LassoType } from '../selection/Lasso';\nimport ThreeCameraControls from 'camera-controls';\nimport css from './GraphCanvas.module.css';\n\nexport interface GraphCanvasProps extends Omit<GraphSceneProps, 'theme'> {\n  /**\n   * Theme to use for the graph.\n   */\n  theme?: Theme;\n\n  /**\n   * Type of camera interaction.\n   */\n  cameraMode?: CameraMode;\n\n  /**\n   * The maximum distance for the camera. Default is 50000.\n   */\n  maxDistance?: number;\n\n  /**\n   * The minimum distance for the camera. Default is 1000.\n   */\n  minDistance?: number;\n\n  /**\n   * The type of lasso selection.\n   */\n  lassoType?: LassoType;\n\n  /**\n   * Children to render in the canvas. Useful for things like lights.\n   */\n  children?: ReactNode;\n\n  /**\n   * Ability to extend Cavas gl options. For example { preserveDrawingBuffer: true }\n   */\n  glOptions?: Object;\n\n  /**\n   * When the canvas had a lasso selection.\n   */\n  onLasso?: (selections: string[]) => void;\n\n  /**\n   * When the canvas had a lasso selection end.\n   */\n  onLassoEnd?: (selections: string[]) => void;\n\n  /**\n   * When the canvas was clicked but didn't hit a node/edge.\n   */\n  onCanvasClick?: (event: MouseEvent) => void;\n}\n\nexport type GraphCanvasRef = Omit<GraphSceneRef, 'graph' | 'renderScene'> &\n  Omit<CameraControlsRef, 'controls'> & {\n    /**\n     * Get the graph object.\n     */\n    getGraph: () => Graph;\n\n    /**\n     * Get the camera controls.\n     */\n    getControls: () => ThreeCameraControls;\n\n    /**\n     * Export the canvas as a data URL.\n     */\n    exportCanvas: () => string;\n  };\n\nconst GL_DEFAULTS = {\n  alpha: true,\n  antialias: true\n};\n\n// TODO: Fix type\nconst CAMERA_DEFAULTS: any = {\n  position: [0, 0, 1000],\n  near: 5,\n  far: 50000,\n  fov: 10\n};\n\nexport const GraphCanvas: FC<GraphCanvasProps & { ref?: Ref<GraphCanvasRef> }> =\n  forwardRef(\n    (\n      {\n        cameraMode = 'pan',\n        layoutType = 'forceDirected2d',\n        sizingType = 'default',\n        labelType = 'auto',\n        theme = lightTheme,\n        animated = true,\n        defaultNodeSize = 7,\n        minNodeSize = 5,\n        maxNodeSize = 15,\n        lassoType = 'none',\n        glOptions = {},\n        edges,\n        children,\n        nodes,\n        minDistance,\n        maxDistance,\n        onCanvasClick,\n        disabled,\n        onLasso,\n        onLassoEnd,\n        ...rest\n      },\n      ref: Ref<GraphCanvasRef>\n    ) => {\n      const rendererRef = useRef<GraphSceneRef | null>(null);\n      const controlsRef = useRef<CameraControlsRef | null>(null);\n      const canvasRef = useRef<HTMLCanvasElement | null>(null);\n\n      useImperativeHandle(ref, () => ({\n        centerGraph: (nodeIds, opts) =>\n          rendererRef.current?.centerGraph(nodeIds, opts),\n        fitNodesInView: (nodeIds, opts) =>\n          rendererRef.current?.fitNodesInView(nodeIds, opts),\n        zoomIn: () => controlsRef.current?.zoomIn(),\n        zoomOut: () => controlsRef.current?.zoomOut(),\n        dollyIn: distance => controlsRef.current?.dollyIn(distance),\n        dollyOut: distance => controlsRef.current?.dollyOut(distance),\n        panLeft: () => controlsRef.current?.panLeft(),\n        panRight: () => controlsRef.current?.panRight(),\n        panDown: () => controlsRef.current?.panDown(),\n        panUp: () => controlsRef.current?.panUp(),\n        resetControls: (animated?: boolean) =>\n          controlsRef.current?.resetControls(animated),\n        getControls: () => controlsRef.current?.controls,\n        getGraph: () => rendererRef.current?.graph,\n        exportCanvas: () => {\n          rendererRef.current.renderScene();\n          return canvasRef.current.toDataURL();\n        },\n        freeze: () => controlsRef.current?.freeze(),\n        unFreeze: () => controlsRef.current?.unFreeze()\n      }));\n\n      // Defaults to pass to the store\n      const { selections, actives, collapsedNodeIds } = rest;\n\n      // It's pretty hard to get good animation performance with large n of edges/nodes\n      const finalAnimated =\n        edges.length + nodes.length > 400 ? false : animated;\n\n      const gl = useMemo(() => ({ ...glOptions, ...GL_DEFAULTS }), [glOptions]);\n      // zustand/context migration (https://github.com/pmndrs/zustand/discussions/1180)\n      const store = useRef(\n        createStore({\n          selections,\n          actives,\n          theme,\n          collapsedNodeIds\n        })\n      ).current;\n\n      // NOTE: The legacy/linear/flat flags are for color issues\n      // Reference: https://github.com/protectwise/troika/discussions/213#discussioncomment-3086666\n      return (\n        <div className={css.canvas}>\n          <Canvas\n            legacy\n            linear\n            ref={canvasRef}\n            flat\n            gl={gl}\n            camera={CAMERA_DEFAULTS}\n            onPointerMissed={onCanvasClick}\n          >\n            <Provider store={store}>\n              {theme.canvas?.background && (\n                <color attach=\"background\" args={[theme.canvas.background]} />\n              )}\n              <ambientLight intensity={1} />\n              {children}\n              {theme.canvas?.fog && (\n                <fog attach=\"fog\" args={[theme.canvas.fog, 4000, 9000]} />\n              )}\n              <CameraControls\n                mode={cameraMode}\n                ref={controlsRef}\n                disabled={disabled}\n                minDistance={minDistance}\n                maxDistance={maxDistance}\n                animated={animated}\n              >\n                <Lasso\n                  disabled={disabled}\n                  type={lassoType}\n                  onLasso={onLasso}\n                  onLassoEnd={onLassoEnd}\n                >\n                  <Suspense>\n                    <GraphScene\n                      ref={rendererRef as any}\n                      disabled={disabled}\n                      animated={finalAnimated}\n                      edges={edges}\n                      nodes={nodes}\n                      layoutType={layoutType}\n                      sizingType={sizingType}\n                      labelType={labelType}\n                      defaultNodeSize={defaultNodeSize}\n                      minNodeSize={minNodeSize}\n                      maxNodeSize={maxNodeSize}\n                      {...rest}\n                    />\n                  </Suspense>\n                </Lasso>\n              </CameraControls>\n            </Provider>\n          </Canvas>\n        </div>\n      );\n    }\n  );\n","import React, {\n  RefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState\n} from 'react';\nimport { isNotEditableElement } from '../utils/dom';\nimport { GraphCanvasRef } from '../GraphCanvas';\nimport { GraphEdge, GraphNode } from '../types';\nimport { findPath } from '../utils/paths';\nimport { getAdjacents, PathSelectionTypes } from './utils';\n\nexport type HotkeyTypes = 'selectAll' | 'deselect' | 'delete';\n\nexport type SelectionTypes = 'single' | 'multi' | 'multiModifier';\n\nexport interface SelectionProps {\n  /**\n   * Required ref for the graph.\n   */\n  ref: RefObject<GraphCanvasRef | null>;\n\n  /**\n   * Current selections.\n   *\n   * Contains both nodes and edges ids.\n   */\n  selections?: string[];\n\n  /**\n   * Default active selections.\n   */\n  actives?: string[];\n\n  /**\n   * Node datas.\n   */\n  nodes?: GraphNode[];\n\n  /**\n   * Edge datas.\n   */\n  edges?: GraphEdge[];\n\n  /**\n   * Disabled or not.\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether to focus on select or not.\n   */\n  focusOnSelect?: boolean | 'singleOnly';\n\n  /**\n   * Type of selection.\n   */\n  type?: SelectionTypes;\n\n  /**\n   * Type of selection.\n   */\n  pathSelectionType?: PathSelectionTypes;\n\n  /**\n   * Whether it should active on hover or not.\n   */\n  pathHoverType?: PathSelectionTypes;\n\n  /**\n   * On selection change.\n   */\n  onSelection?: (selectionIds: string[]) => void;\n}\n\nexport interface SelectionResult {\n  /**\n   * Selections id array (of nodes and edges).\n   */\n  selections: string[];\n\n  /**\n   * The nodes/edges around the selections to highlight.\n   */\n  actives: string[];\n\n  /**\n   * Clear selections method.\n   */\n  clearSelections: (value?: string[]) => void;\n\n  /**\n   * A selection method.\n   */\n  addSelection: (value: string) => void;\n\n  /**\n   * Get the paths between two nodes.\n   */\n  selectNodePaths: (source: string, target: string) => void;\n\n  /**\n   * Remove selection method.\n   */\n  removeSelection: (value: string) => void;\n\n  /**\n   * Toggle existing selection on/off method.\n   */\n  toggleSelection: (value: string) => void;\n\n  /**\n   * Set internal selections.\n   */\n  setSelections: (value: string[]) => void;\n\n  /**\n   * On click event pass through.\n   */\n  onNodeClick?: (data: GraphNode) => void;\n\n  /**\n   * On canvas click event pass through.\n   */\n  onCanvasClick?: (event: MouseEvent) => void;\n\n  /**\n   * When the lasso happened.\n   */\n  onLasso?: (selections: string[]) => void;\n\n  /**\n   * When the lasso ended.\n   */\n  onLassoEnd?: (selections: string[]) => void;\n\n  /**\n   * When node got a pointer over.\n   */\n  onNodePointerOver?: (node: GraphNode) => void;\n\n  /**\n   * When node lost pointer over.\n   */\n  onNodePointerOut?: (node: GraphNode) => void;\n}\n\nexport const useSelection = ({\n  selections = [],\n  nodes = [],\n  actives = [],\n  focusOnSelect = true,\n  type = 'single',\n  pathHoverType = 'out',\n  pathSelectionType = 'direct',\n  ref,\n  disabled,\n  onSelection\n}: SelectionProps): SelectionResult => {\n  const [internalHovers, setInternalHovers] = useState<string[]>([]);\n  const [internalActives, setInternalActives] = useState<string[]>(actives);\n  const [internalSelections, setInternalSelections] =\n    useState<string[]>(selections);\n  const [metaKeyDown, setMetaKeyDown] = useState<boolean>(false);\n  const isMulti = type === 'multi' || type === 'multiModifier';\n\n  const addSelection = useCallback(\n    (items: string | string[]) => {\n      if (!disabled && items) {\n        items = Array.isArray(items) ? items : [items];\n\n        const filtered = items.filter(\n          item => !internalSelections.includes(item)\n        );\n        if (filtered.length) {\n          const next = [...internalSelections, ...filtered];\n          onSelection?.(next);\n          setInternalSelections(next);\n        }\n      }\n    },\n    [disabled, internalSelections, onSelection]\n  );\n\n  const removeSelection = useCallback(\n    (items: string | string[]) => {\n      if (!disabled && items) {\n        items = Array.isArray(items) ? items : [items];\n\n        const next = internalSelections.filter(i => !items.includes(i));\n        onSelection?.(next);\n        setInternalSelections(next);\n      }\n    },\n    [disabled, internalSelections, onSelection]\n  );\n\n  const clearSelections = useCallback(\n    (next: string | string[] = []) => {\n      if (!disabled) {\n        next = Array.isArray(next) ? next : [next];\n        setInternalActives([]);\n        setInternalSelections(next);\n        onSelection?.(next);\n      }\n    },\n    [disabled, onSelection]\n  );\n\n  const toggleSelection = useCallback(\n    (item: string) => {\n      const has = internalSelections.includes(item);\n      if (has) {\n        removeSelection(item);\n      } else {\n        if (!isMulti) {\n          clearSelections(item);\n        } else {\n          addSelection(item);\n        }\n      }\n    },\n    [\n      addSelection,\n      clearSelections,\n      internalSelections,\n      isMulti,\n      removeSelection\n    ]\n  );\n\n  const onNodeClick = useCallback(\n    (data: GraphNode) => {\n      if (isMulti) {\n        if (type === 'multiModifier') {\n          if (metaKeyDown) {\n            addSelection(data.id);\n          } else {\n            clearSelections(data.id);\n          }\n        } else {\n          addSelection(data.id);\n        }\n      } else {\n        clearSelections(data.id);\n      }\n\n      if (\n        focusOnSelect === true ||\n        (focusOnSelect === 'singleOnly' && !metaKeyDown)\n      ) {\n        if (!ref.current) {\n          throw new Error('No ref found for the graph canvas.');\n        }\n\n        const graph = ref.current.getGraph();\n        const { nodes: adjacents } = getAdjacents(\n          graph,\n          [data.id],\n          pathSelectionType\n        );\n\n        ref.current.fitNodesInView([data.id, ...adjacents], {\n          fitOnlyIfNodesNotInView: true\n        });\n      }\n    },\n    [\n      addSelection,\n      clearSelections,\n      focusOnSelect,\n      isMulti,\n      metaKeyDown,\n      pathSelectionType,\n      ref,\n      type\n    ]\n  );\n\n  const selectNodePaths = useCallback(\n    (source: string, target: string) => {\n      const graph = ref.current.getGraph();\n      if (!graph) {\n        throw new Error('Graph is not initialized');\n      }\n\n      const path = findPath(graph, source, target);\n      clearSelections([source, target]);\n\n      const result = [];\n      for (let i = 0; i < path.length - 1; i++) {\n        const from = path[i];\n        const to = path[i + 1];\n        const edge = graph.getEdgeAttributes(from, to);\n        if (edge) {\n          result.push(edge.id);\n        }\n      }\n\n      setInternalActives([...path.map(p => p as string), ...result]);\n    },\n    [clearSelections, ref]\n  );\n\n  const onKeyDown = useCallback((event: KeyboardEvent) => {\n    const element = event.target as HTMLElement;\n    const isSafe = isNotEditableElement(element);\n    const isMeta = event.metaKey || event.ctrlKey;\n\n    if (isSafe && isMeta) {\n      setMetaKeyDown(true);\n    }\n  }, []);\n\n  const onKeyUp = useCallback((event: KeyboardEvent) => {\n    const element = event.target as HTMLElement;\n    const isSafe = isNotEditableElement(element);\n    const isMeta = ['Meta', 'Control'].includes(event.key);\n\n    if (isSafe && isMeta) {\n      setMetaKeyDown(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      window.addEventListener('keydown', onKeyDown);\n      window.addEventListener('keyup', onKeyUp);\n    }\n\n    return () => {\n      if (typeof window !== 'undefined') {\n        window.removeEventListener('keydown', onKeyDown);\n        window.removeEventListener('keyup', onKeyUp);\n      }\n    };\n  }, [onKeyDown, onKeyUp]);\n\n  const onCanvasClick = useCallback(\n    (event: MouseEvent) => {\n      if (\n        event.button !== 2 &&\n        (internalSelections.length || internalActives.length)\n      ) {\n        clearSelections();\n        setMetaKeyDown(false);\n\n        // Only re-center if we have a single selection\n        if (focusOnSelect && internalSelections.length === 1) {\n          if (!ref.current) {\n            throw new Error('No ref found for the graph canvas.');\n          }\n\n          ref.current.fitNodesInView([], { fitOnlyIfNodesNotInView: true });\n        }\n      }\n    },\n    [\n      clearSelections,\n      focusOnSelect,\n      internalActives.length,\n      internalSelections.length,\n      ref\n    ]\n  );\n\n  const onLasso = useCallback((selections: string[]) => {\n    setInternalActives(selections);\n  }, []);\n\n  const onLassoEnd = useCallback(\n    (selections: string[]) => {\n      clearSelections(selections);\n    },\n    [clearSelections]\n  );\n\n  const onNodePointerOver = useCallback(\n    (data: GraphNode) => {\n      if (pathHoverType) {\n        const graph = ref.current.getGraph();\n        if (!graph) {\n          throw new Error('No ref found for the graph canvas.');\n        }\n\n        const { nodes, edges } = getAdjacents(graph, [data.id], pathHoverType);\n        setInternalHovers([...nodes, ...edges]);\n      }\n    },\n    [pathHoverType, ref]\n  );\n\n  const onNodePointerOut = useCallback(() => {\n    if (pathHoverType) {\n      setInternalHovers([]);\n    }\n  }, [pathHoverType]);\n\n  useEffect(() => {\n    if (pathSelectionType !== 'direct' && internalSelections.length > 0) {\n      const graph = ref.current?.getGraph();\n      if (graph) {\n        const { nodes, edges } = getAdjacents(\n          graph,\n          internalSelections,\n          pathSelectionType\n        );\n        setInternalActives([...nodes, ...edges]);\n      }\n    }\n  }, [internalSelections, pathSelectionType, ref]);\n\n  const joinedActives = useMemo(\n    () => [...internalActives, ...internalHovers],\n    [internalActives, internalHovers]\n  );\n\n  return {\n    actives: joinedActives,\n    onNodeClick,\n    onNodePointerOver,\n    onNodePointerOut,\n    onLasso,\n    onLassoEnd,\n    selectNodePaths,\n    onCanvasClick,\n    selections: internalSelections,\n    clearSelections,\n    addSelection,\n    removeSelection,\n    toggleSelection,\n    setSelections: setInternalSelections\n  };\n};\n","import classNames from 'classnames';\nimport React, { FC, ReactNode } from 'react';\nimport css from './RadialSlice.module.css';\n\nexport interface MenuItem {\n  /**\n   * Label to display on the menu item.\n   */\n  label: string;\n\n  /**\n   * CSS Classname to apply to the slice.\n   */\n  className?: string;\n\n  /**\n   * Optional icon to display on the menu item.\n   */\n  icon?: ReactNode;\n\n  /**\n   * Optional callback to detemine if the menu item is active.\n   */\n  disabled?: boolean;\n\n  /**\n   * Optional callback to handle when the menu item is clicked.\n   */\n  onClick?: (event: React.MouseEvent<HTMLDivElement>) => void;\n}\n\ninterface RadialSliceProps extends MenuItem {\n  /**\n   * The starting angle of the radial slice, in degrees.\n   */\n  startAngle: number;\n\n  /**\n   * The ending angle of the radial slice, in degrees.\n   */\n  endAngle: number;\n\n  /**\n   * The skew of the radial slice.\n   */\n  skew: number;\n\n  /**\n   * Whether the radial slice is polar (true) or not (false).\n   */\n  polar: boolean;\n\n  /**\n   * The central angle of the radial slice, in degrees.\n   */\n  centralAngle: number;\n\n  /**\n   * The radius of the radial slice.\n   */\n  radius: number;\n\n  /**\n   * The inner radius of the radial slice.\n   */\n  innerRadius: number;\n}\n\nexport const RadialSlice: FC<RadialSliceProps> = ({\n  label,\n  centralAngle,\n  startAngle,\n  endAngle,\n  polar,\n  radius,\n  className,\n  icon,\n  innerRadius,\n  skew,\n  disabled,\n  onClick\n}) => (\n  <div\n    role=\"menuitem\"\n    className={classNames(css.container, className, {\n      [css.disabled]: disabled\n    })}\n    style={{\n      width: centralAngle > 90 ? '100%' : '50%',\n      height: centralAngle > 90 ? '100%' : '50%',\n      bottom: centralAngle > 90 ? '50%' : 'initial',\n      right: centralAngle > 90 ? '50%' : 'initial',\n      transform: `rotate(${startAngle + endAngle}deg) skew(${skew}deg)`\n    }}\n    onClick={event => {\n      if (!disabled) {\n        onClick(event);\n      }\n    }}\n  >\n    <div\n      className={css.contentContainer}\n      style={{\n        transform: `skew(${-skew}deg) rotate(${\n          (polar ? 90 : centralAngle) / 2 - 90\n        }deg)`\n      }}\n    >\n      <div\n        className={css.contentInner}\n        style={{\n          top: `calc((((${\n            centralAngle > 90 ? '50% + ' : ''\n          }${radius}px) - ${innerRadius}px) / 2) - 4em)`\n        }}\n      >\n        <div\n          className={css.content}\n          style={{\n            transform: `rotate(${-endAngle}deg)`\n          }}\n          title={label}\n        >\n          {icon}\n          {label}\n        </div>\n      </div>\n    </div>\n  </div>\n);\n","import { MenuItem } from './RadialSlice';\n\nexport function calculateRadius(items: MenuItem[], startOffsetAngle: number) {\n  const centralAngle = 360 / items.length || 360;\n  const polar = centralAngle % 180 === 0;\n  const deltaAngle = 90 - centralAngle;\n  const startAngle = polar\n    ? 45\n    : startOffsetAngle + deltaAngle + centralAngle / 2;\n\n  return { centralAngle, polar, startAngle, deltaAngle };\n}\n","import React, { FC, useLayoutEffect, useMemo, useRef } from 'react';\nimport { RadialSlice, MenuItem } from './RadialSlice';\nimport { calculateRadius } from './utils';\nimport css from './RadialMenu.module.css';\nimport classNames from 'classnames';\n\ninterface RadialMenuProps {\n  /**\n   * An array of menu items to be displayed in the radial menu.\n   */\n  items: MenuItem[];\n\n  /**\n   * The radius of the radial menu.\n   */\n  radius?: number;\n\n  /**\n   * The inner radius of the radial menu.\n   */\n  innerRadius?: number;\n\n  /**\n   * The starting offset angle for the first menu item.\n   */\n  startOffsetAngle?: number;\n\n  /**\n   * The CSS class name for the radial menu.\n   */\n  className?: string;\n\n  /**\n   * A function that is called when the radial menu is closed.\n   * The function receives the mouse event that triggered the closure.\n   */\n  onClose?: (event: React.MouseEvent<HTMLDivElement>) => void;\n}\n\nexport const RadialMenu: FC<RadialMenuProps> = ({\n  items,\n  radius = 175,\n  className,\n  innerRadius = 25,\n  startOffsetAngle = 0,\n  onClose\n}) => {\n  const { centralAngle, polar, startAngle, deltaAngle } = useMemo(\n    () => calculateRadius(items, startOffsetAngle),\n    [items, startOffsetAngle]\n  );\n  const timeout = useRef<any | null>(null);\n\n  useLayoutEffect(() => {\n    const timer = timeout.current;\n    return () => clearTimeout(timer);\n  }, []);\n\n  if (items.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      role=\"menu\"\n      className={classNames(css.container, className)}\n      onPointerEnter={() => clearTimeout(timeout.current)}\n      onPointerLeave={event => {\n        clearTimeout(timeout.current);\n        timeout.current = setTimeout(() => onClose?.(event), 500);\n      }}\n    >\n      {items.map((slice, index) => (\n        <RadialSlice\n          key={index}\n          {...slice}\n          radius={radius}\n          innerRadius={innerRadius}\n          startAngle={startAngle}\n          endAngle={centralAngle * index}\n          skew={polar ? 0 : deltaAngle}\n          polar={polar}\n          centralAngle={centralAngle}\n          onClick={event => {\n            slice?.onClick(event);\n            onClose?.(event);\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n"],"names":["d3ForceRadial","tree","nodes","links","a","_b","_a","forceX","forceY","d3ForceX","d3ForceY","d3ForceSimulation","d3ForceCenter","d3ForceLink","d3ForceManyBody","d3ForceZ","n","theme","actives","selections","id","node","useZustandStore","drags","disabled","Ring","_c","curve","Edge","arrowPosition","arrowRotation","_d","active","inactive","draggingActive","draggingInactive","edgeMeshes","DreiSvg","animated","Fragment","Sphere","ref","css"],"mappings":"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"}